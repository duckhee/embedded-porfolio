
2-3. UART Interrupt Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004830  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  080049b8  080049b8  000149b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000074  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000250  20000250  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000cff5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001bc5  00000000  00000000  0002d201  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006a8  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005e0  00000000  00000000  0002f470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000036fb  00000000  00000000  0002fa50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002590  00000000  00000000  0003314b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000356db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000021d0  00000000  00000000  00035758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049a0 	.word	0x080049a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	080049a0 	.word	0x080049a0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_uldivmod>:
 8000af8:	b953      	cbnz	r3, 8000b10 <__aeabi_uldivmod+0x18>
 8000afa:	b94a      	cbnz	r2, 8000b10 <__aeabi_uldivmod+0x18>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bf08      	it	eq
 8000b00:	2800      	cmpeq	r0, #0
 8000b02:	bf1c      	itt	ne
 8000b04:	f04f 31ff 	movne.w	r1, #4294967295
 8000b08:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0c:	f000 b97a 	b.w	8000e04 <__aeabi_idiv0>
 8000b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b18:	f000 f806 	bl	8000b28 <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4770      	bx	lr

08000b28 <__udivmoddi4>:
 8000b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	460d      	mov	r5, r1
 8000b30:	4604      	mov	r4, r0
 8000b32:	9e08      	ldr	r6, [sp, #32]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d151      	bne.n	8000bdc <__udivmoddi4+0xb4>
 8000b38:	428a      	cmp	r2, r1
 8000b3a:	4617      	mov	r7, r2
 8000b3c:	d96d      	bls.n	8000c1a <__udivmoddi4+0xf2>
 8000b3e:	fab2 fe82 	clz	lr, r2
 8000b42:	f1be 0f00 	cmp.w	lr, #0
 8000b46:	d00b      	beq.n	8000b60 <__udivmoddi4+0x38>
 8000b48:	f1ce 0c20 	rsb	ip, lr, #32
 8000b4c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b54:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b58:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b5c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b64:	0c25      	lsrs	r5, r4, #16
 8000b66:	fbbc f8fa 	udiv	r8, ip, sl
 8000b6a:	fa1f f987 	uxth.w	r9, r7
 8000b6e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b76:	fb08 f309 	mul.w	r3, r8, r9
 8000b7a:	42ab      	cmp	r3, r5
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x6c>
 8000b7e:	19ed      	adds	r5, r5, r7
 8000b80:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b84:	f080 8123 	bcs.w	8000dce <__udivmoddi4+0x2a6>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	f240 8120 	bls.w	8000dce <__udivmoddi4+0x2a6>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	443d      	add	r5, r7
 8000b94:	1aed      	subs	r5, r5, r3
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b9c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ba0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba4:	fb00 f909 	mul.w	r9, r0, r9
 8000ba8:	45a1      	cmp	r9, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x98>
 8000bac:	19e4      	adds	r4, r4, r7
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 810a 	bcs.w	8000dca <__udivmoddi4+0x2a2>
 8000bb6:	45a1      	cmp	r9, r4
 8000bb8:	f240 8107 	bls.w	8000dca <__udivmoddi4+0x2a2>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	eba4 0409 	sub.w	r4, r4, r9
 8000bc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d061      	beq.n	8000c92 <__udivmoddi4+0x16a>
 8000bce:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	6034      	str	r4, [r6, #0]
 8000bd6:	6073      	str	r3, [r6, #4]
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0xc8>
 8000be0:	2e00      	cmp	r6, #0
 8000be2:	d054      	beq.n	8000c8e <__udivmoddi4+0x166>
 8000be4:	2100      	movs	r1, #0
 8000be6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bea:	4608      	mov	r0, r1
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	fab3 f183 	clz	r1, r3
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	f040 808e 	bne.w	8000d16 <__udivmoddi4+0x1ee>
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xdc>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80fa 	bhi.w	8000df8 <__udivmoddi4+0x2d0>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb65 0503 	sbc.w	r5, r5, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	46ac      	mov	ip, r5
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d03f      	beq.n	8000c92 <__udivmoddi4+0x16a>
 8000c12:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b912      	cbnz	r2, 8000c22 <__udivmoddi4+0xfa>
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c22:	fab7 fe87 	clz	lr, r7
 8000c26:	f1be 0f00 	cmp.w	lr, #0
 8000c2a:	d134      	bne.n	8000c96 <__udivmoddi4+0x16e>
 8000c2c:	1beb      	subs	r3, r5, r7
 8000c2e:	0c3a      	lsrs	r2, r7, #16
 8000c30:	fa1f fc87 	uxth.w	ip, r7
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c3a:	0c25      	lsrs	r5, r4, #16
 8000c3c:	fb02 3318 	mls	r3, r2, r8, r3
 8000c40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c44:	fb0c f308 	mul.w	r3, ip, r8
 8000c48:	42ab      	cmp	r3, r5
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0x134>
 8000c4c:	19ed      	adds	r5, r5, r7
 8000c4e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x132>
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	f200 80d1 	bhi.w	8000dfc <__udivmoddi4+0x2d4>
 8000c5a:	4680      	mov	r8, r0
 8000c5c:	1aed      	subs	r5, r5, r3
 8000c5e:	b2a3      	uxth	r3, r4
 8000c60:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c64:	fb02 5510 	mls	r5, r2, r0, r5
 8000c68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c6c:	fb0c fc00 	mul.w	ip, ip, r0
 8000c70:	45a4      	cmp	ip, r4
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x15c>
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x15a>
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	f200 80b8 	bhi.w	8000df2 <__udivmoddi4+0x2ca>
 8000c82:	4618      	mov	r0, r3
 8000c84:	eba4 040c 	sub.w	r4, r4, ip
 8000c88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c8c:	e79d      	b.n	8000bca <__udivmoddi4+0xa2>
 8000c8e:	4631      	mov	r1, r6
 8000c90:	4630      	mov	r0, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1ce 0420 	rsb	r4, lr, #32
 8000c9a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c9e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ca2:	fa20 f804 	lsr.w	r8, r0, r4
 8000ca6:	0c3a      	lsrs	r2, r7, #16
 8000ca8:	fa25 f404 	lsr.w	r4, r5, r4
 8000cac:	ea48 0803 	orr.w	r8, r8, r3
 8000cb0:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cb8:	fb02 4411 	mls	r4, r2, r1, r4
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cc4:	fb01 f30c 	mul.w	r3, r1, ip
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x1bc>
 8000cd0:	19ed      	adds	r5, r5, r7
 8000cd2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cd6:	f080 808a 	bcs.w	8000dee <__udivmoddi4+0x2c6>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	f240 8087 	bls.w	8000dee <__udivmoddi4+0x2c6>
 8000ce0:	3902      	subs	r1, #2
 8000ce2:	443d      	add	r5, r7
 8000ce4:	1aeb      	subs	r3, r5, r3
 8000ce6:	fa1f f588 	uxth.w	r5, r8
 8000cea:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cee:	fb02 3310 	mls	r3, r2, r0, r3
 8000cf2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cf6:	fb00 f30c 	mul.w	r3, r0, ip
 8000cfa:	42ab      	cmp	r3, r5
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1e6>
 8000cfe:	19ed      	adds	r5, r5, r7
 8000d00:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d04:	d26f      	bcs.n	8000de6 <__udivmoddi4+0x2be>
 8000d06:	42ab      	cmp	r3, r5
 8000d08:	d96d      	bls.n	8000de6 <__udivmoddi4+0x2be>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	443d      	add	r5, r7
 8000d0e:	1aeb      	subs	r3, r5, r3
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	e78f      	b.n	8000c36 <__udivmoddi4+0x10e>
 8000d16:	f1c1 0720 	rsb	r7, r1, #32
 8000d1a:	fa22 f807 	lsr.w	r8, r2, r7
 8000d1e:	408b      	lsls	r3, r1
 8000d20:	fa05 f401 	lsl.w	r4, r5, r1
 8000d24:	ea48 0303 	orr.w	r3, r8, r3
 8000d28:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d36:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d3e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d42:	fa1f f883 	uxth.w	r8, r3
 8000d46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d4a:	fb09 f408 	mul.w	r4, r9, r8
 8000d4e:	42ac      	cmp	r4, r5
 8000d50:	fa02 f201 	lsl.w	r2, r2, r1
 8000d54:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x244>
 8000d5a:	18ed      	adds	r5, r5, r3
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d243      	bcs.n	8000dea <__udivmoddi4+0x2c2>
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	d941      	bls.n	8000dea <__udivmoddi4+0x2c2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	441d      	add	r5, r3
 8000d6c:	1b2d      	subs	r5, r5, r4
 8000d6e:	fa1f fe8e 	uxth.w	lr, lr
 8000d72:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d76:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45a0      	cmp	r8, r4
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x26e>
 8000d86:	18e4      	adds	r4, r4, r3
 8000d88:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d8c:	d229      	bcs.n	8000de2 <__udivmoddi4+0x2ba>
 8000d8e:	45a0      	cmp	r8, r4
 8000d90:	d927      	bls.n	8000de2 <__udivmoddi4+0x2ba>
 8000d92:	3802      	subs	r0, #2
 8000d94:	441c      	add	r4, r3
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba4 0408 	sub.w	r4, r4, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	464d      	mov	r5, r9
 8000da8:	d315      	bcc.n	8000dd6 <__udivmoddi4+0x2ae>
 8000daa:	d012      	beq.n	8000dd2 <__udivmoddi4+0x2aa>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x29c>
 8000dae:	ebba 030e 	subs.w	r3, sl, lr
 8000db2:	eb64 0405 	sbc.w	r4, r4, r5
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40cb      	lsrs	r3, r1
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	40cc      	lsrs	r4, r1
 8000dc0:	6037      	str	r7, [r6, #0]
 8000dc2:	6074      	str	r4, [r6, #4]
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e6f8      	b.n	8000bc0 <__udivmoddi4+0x98>
 8000dce:	4690      	mov	r8, r2
 8000dd0:	e6e0      	b.n	8000b94 <__udivmoddi4+0x6c>
 8000dd2:	45c2      	cmp	sl, r8
 8000dd4:	d2ea      	bcs.n	8000dac <__udivmoddi4+0x284>
 8000dd6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dda:	eb69 0503 	sbc.w	r5, r9, r3
 8000dde:	3801      	subs	r0, #1
 8000de0:	e7e4      	b.n	8000dac <__udivmoddi4+0x284>
 8000de2:	4628      	mov	r0, r5
 8000de4:	e7d7      	b.n	8000d96 <__udivmoddi4+0x26e>
 8000de6:	4640      	mov	r0, r8
 8000de8:	e791      	b.n	8000d0e <__udivmoddi4+0x1e6>
 8000dea:	4681      	mov	r9, r0
 8000dec:	e7be      	b.n	8000d6c <__udivmoddi4+0x244>
 8000dee:	4601      	mov	r1, r0
 8000df0:	e778      	b.n	8000ce4 <__udivmoddi4+0x1bc>
 8000df2:	3802      	subs	r0, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	e745      	b.n	8000c84 <__udivmoddi4+0x15c>
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xe6>
 8000dfc:	f1a8 0802 	sub.w	r8, r8, #2
 8000e00:	443d      	add	r5, r7
 8000e02:	e72b      	b.n	8000c5c <__udivmoddi4+0x134>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f925 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f001 fef4 	bl	8002c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f93d 	bl	80010ea <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f905 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000004 	.word	0x20000004
 8000ea8:	20000000 	.word	0x20000000

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	20000204 	.word	0x20000204

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000204 	.word	0x20000204

08000eec <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f5a:	4909      	ldr	r1, [pc, #36]	; (8000f80 <NVIC_EnableIRQ+0x30>)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	095b      	lsrs	r3, r3, #5
 8000f62:	79fa      	ldrb	r2, [r7, #7]
 8000f64:	f002 021f 	and.w	r2, r2, #31
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	da0b      	bge.n	8000fb0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	490d      	ldr	r1, [pc, #52]	; (8000fd0 <NVIC_SetPriority+0x4c>)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	3b04      	subs	r3, #4
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fae:	e009      	b.n	8000fc4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <NVIC_SetPriority+0x50>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	2201      	movs	r2, #1
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	401a      	ands	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101e:	2101      	movs	r1, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	1e59      	subs	r1, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff90 	bl	8000f84 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff2f 	bl	8000eec <NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff44 	bl	8000f34 <NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff90 	bl	8000fd8 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5f 	bl	8000f84 <NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff37 	bl	8000f50 <NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d106      	bne.n	8001120 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800111e:	e005      	b.n	800112c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 0304 	bic.w	r3, r3, #4
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001140:	f000 f802 	bl	8001148 <HAL_SYSTICK_Callback>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d004      	beq.n	8001174 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e00c      	b.n	800118e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2205      	movs	r2, #5
 8001178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e16b      	b.n	8001490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 815a 	bne.w	800148a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x4a>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d123      	bne.n	800122e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	69b9      	ldr	r1, [r7, #24]
 800122a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0203 	and.w	r2, r3, #3
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d00b      	beq.n	8001282 <HAL_GPIO_Init+0xe6>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001276:	2b11      	cmp	r3, #17
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b12      	cmp	r3, #18
 8001280:	d130      	bne.n	80012e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 0201 	and.w	r2, r3, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80b4 	beq.w	800148a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4a5f      	ldr	r2, [pc, #380]	; (80014a4 <HAL_GPIO_Init+0x308>)
 8001328:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <HAL_GPIO_Init+0x308>)
 800132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <HAL_GPIO_Init+0x308>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	4a5a      	ldr	r2, [pc, #360]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a51      	ldr	r2, [pc, #324]	; (80014ac <HAL_GPIO_Init+0x310>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02b      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a50      	ldr	r2, [pc, #320]	; (80014b0 <HAL_GPIO_Init+0x314>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x222>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x318>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x21e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_GPIO_Init+0x31c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x21a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <HAL_GPIO_Init+0x320>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x216>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4c      	ldr	r2, [pc, #304]	; (80014c0 <HAL_GPIO_Init+0x324>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x212>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <HAL_GPIO_Init+0x328>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4a      	ldr	r2, [pc, #296]	; (80014c8 <HAL_GPIO_Init+0x32c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x20a>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00e      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013a6:	2308      	movs	r3, #8
 80013a8:	e00c      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00a      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4934      	ldr	r1, [pc, #208]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e2:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <HAL_GPIO_Init+0x330>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001406:	4a31      	ldr	r2, [pc, #196]	; (80014cc <HAL_GPIO_Init+0x330>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <HAL_GPIO_Init+0x330>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <HAL_GPIO_Init+0x330>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_GPIO_Init+0x330>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <HAL_GPIO_Init+0x330>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_GPIO_Init+0x330>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001484:	4a11      	ldr	r2, [pc, #68]	; (80014cc <HAL_GPIO_Init+0x330>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f ae90 	bls.w	80011b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40021400 	.word	0x40021400
 80014c4:	40021800 	.word	0x40021800
 80014c8:	40021c00 	.word	0x40021c00
 80014cc:	40013c00 	.word	0x40013c00

080014d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	4613      	mov	r3, r2
 80014de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e0:	787b      	ldrb	r3, [r7, #1]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ec:	e003      	b.n	80014f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	041a      	lsls	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	619a      	str	r2, [r3, #24]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e22d      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d075      	beq.n	800160e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001522:	4ba3      	ldr	r3, [pc, #652]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b04      	cmp	r3, #4
 800152c:	d00c      	beq.n	8001548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	4ba0      	ldr	r3, [pc, #640]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001536:	2b08      	cmp	r3, #8
 8001538:	d112      	bne.n	8001560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153a:	4b9d      	ldr	r3, [pc, #628]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001546:	d10b      	bne.n	8001560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	4b99      	ldr	r3, [pc, #612]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d05b      	beq.n	800160c <HAL_RCC_OscConfig+0x108>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d157      	bne.n	800160c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e208      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0x74>
 800156a:	4a91      	ldr	r2, [pc, #580]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	4b90      	ldr	r3, [pc, #576]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e01d      	b.n	80015b4 <HAL_RCC_OscConfig+0xb0>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x98>
 8001582:	4a8b      	ldr	r2, [pc, #556]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	4b8a      	ldr	r3, [pc, #552]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4a88      	ldr	r2, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	4b87      	ldr	r3, [pc, #540]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0xb0>
 800159c:	4a84      	ldr	r2, [pc, #528]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	4b84      	ldr	r3, [pc, #528]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4a81      	ldr	r2, [pc, #516]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 80015aa:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc8a 	bl	8000ed4 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fc86 	bl	8000ed4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1cd      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0xc0>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fc76 	bl	8000ed4 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fc72 	bl	8000ed4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e1b9      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	4b6c      	ldr	r3, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0xe8>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d063      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800161a:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001626:	4b62      	ldr	r3, [pc, #392]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162e:	2b08      	cmp	r3, #8
 8001630:	d11c      	bne.n	800166c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001632:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d116      	bne.n	800166c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	4b5c      	ldr	r3, [pc, #368]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_RCC_OscConfig+0x152>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e18d      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001656:	4956      	ldr	r1, [pc, #344]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	4b55      	ldr	r3, [pc, #340]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	e03a      	b.n	80016e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d020      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <HAL_RCC_OscConfig+0x2b0>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff fc2b 	bl	8000ed4 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001682:	f7ff fc27 	bl	8000ed4 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e16e      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4943      	ldr	r1, [pc, #268]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b6:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_RCC_OscConfig+0x2b0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc0a 	bl	8000ed4 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc06 	bl	8000ed4 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e14d      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d030      	beq.n	8001750 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d016      	beq.n	8001724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <HAL_RCC_OscConfig+0x2b4>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fbea 	bl	8000ed4 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fbe6 	bl	8000ed4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e12d      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x200>
 8001722:	e015      	b.n	8001750 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_RCC_OscConfig+0x2b4>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fbd3 	bl	8000ed4 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff fbcf 	bl	8000ed4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e116      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80a0 	beq.w	800189e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10f      	bne.n	800178e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_OscConfig+0x2b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d121      	bne.n	80017de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_RCC_OscConfig+0x2b8>)
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_RCC_OscConfig+0x2b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fb95 	bl	8000ed4 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ac:	e011      	b.n	80017d2 <HAL_RCC_OscConfig+0x2ce>
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	42470000 	.word	0x42470000
 80017b8:	42470e80 	.word	0x42470e80
 80017bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c0:	f7ff fb88 	bl	8000ed4 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0cf      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b6a      	ldr	r3, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x478>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
 80017e6:	4a66      	ldr	r2, [pc, #408]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 80017e8:	4b65      	ldr	r3, [pc, #404]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6713      	str	r3, [r2, #112]	; 0x70
 80017f2:	e01c      	b.n	800182e <HAL_RCC_OscConfig+0x32a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_OscConfig+0x312>
 80017fc:	4a60      	ldr	r2, [pc, #384]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 80017fe:	4b60      	ldr	r3, [pc, #384]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6713      	str	r3, [r2, #112]	; 0x70
 8001808:	4a5d      	ldr	r2, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6713      	str	r3, [r2, #112]	; 0x70
 8001814:	e00b      	b.n	800182e <HAL_RCC_OscConfig+0x32a>
 8001816:	4a5a      	ldr	r2, [pc, #360]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	4a57      	ldr	r2, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001824:	4b56      	ldr	r3, [pc, #344]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d015      	beq.n	8001862 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff fb4d 	bl	8000ed4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff fb49 	bl	8000ed4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e08e      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001854:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0ee      	beq.n	800183e <HAL_RCC_OscConfig+0x33a>
 8001860:	e014      	b.n	800188c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7ff fb37 	bl	8000ed4 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff fb33 	bl	8000ed4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e078      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ee      	bne.n	800186a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001892:	4a3b      	ldr	r2, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d064      	beq.n	8001970 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018a6:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d05c      	beq.n	800196c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d141      	bne.n	800193e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <HAL_RCC_OscConfig+0x480>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fb08 	bl	8000ed4 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff fb04 	bl	8000ed4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e04b      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018e6:	4926      	ldr	r1, [pc, #152]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	019b      	lsls	r3, r3, #6
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	3b01      	subs	r3, #1
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	061b      	lsls	r3, r3, #24
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <HAL_RCC_OscConfig+0x480>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff fadd 	bl	8000ed4 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff fad9 	bl	8000ed4 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e020      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x41a>
 800193c:	e018      	b.n	8001970 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_RCC_OscConfig+0x480>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fac6 	bl	8000ed4 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fac2 	bl	8000ed4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e009      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_RCC_OscConfig+0x47c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x448>
 800196a:	e001      	b.n	8001970 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40007000 	.word	0x40007000
 8001980:	40023800 	.word	0x40023800
 8001984:	42470060 	.word	0x42470060

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0ca      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_RCC_ClockConfig+0x1b4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 020f 	and.w	r2, r3, #15
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d20c      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b64      	ldr	r3, [pc, #400]	; (8001b3c <HAL_RCC_ClockConfig+0x1b4>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_ClockConfig+0x1b4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 020f 	and.w	r2, r3, #15
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b6      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019dc:	4a58      	ldr	r2, [pc, #352]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	4b58      	ldr	r3, [pc, #352]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f4:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019f6:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	494f      	ldr	r1, [pc, #316]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a02:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d044      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d119      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e07d      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a46:	4b3e      	ldr	r3, [pc, #248]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e06d      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e065      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4936      	ldr	r1, [pc, #216]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 0203 	bic.w	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a78:	f7ff fa2c 	bl	8000ed4 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7ff fa28 	bl	8000ed4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e04d      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 020c 	and.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1eb      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_ClockConfig+0x1b4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 020f 	and.w	r2, r3, #15
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d90c      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCC_ClockConfig+0x1b4>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_RCC_ClockConfig+0x1b4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 020f 	and.w	r2, r3, #15
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e030      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001adc:	4918      	ldr	r1, [pc, #96]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afa:	4911      	ldr	r1, [pc, #68]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b0e:	f000 f81d 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b12:	4601      	mov	r1, r0
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	5cd3      	ldrb	r3, [r2, r3]
 8001b22:	fa21 f303 	lsr.w	r3, r1, r3
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff f98e 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023c00 	.word	0x40023c00
 8001b40:	40023800 	.word	0x40023800
 8001b44:	080049d8 	.word	0x080049d8
 8001b48:	20000008 	.word	0x20000008

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b50:	b08f      	sub	sp, #60	; 0x3c
 8001b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b64:	4b62      	ldr	r3, [pc, #392]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d007      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x34>
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d008      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 80b2 	bne.w	8001cde <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b7a:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001b7e:	e0b1      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b80:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b84:	e0ae      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b86:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b90:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d04e      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9c:	4b54      	ldr	r3, [pc, #336]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	f04f 0400 	mov.w	r4, #0
 8001ba6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	ea01 0103 	and.w	r1, r1, r3
 8001bb2:	ea02 0204 	and.w	r2, r2, r4
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	0160      	lsls	r0, r4, #5
 8001bbc:	6278      	str	r0, [r7, #36]	; 0x24
 8001bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bc0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001bc4:	6278      	str	r0, [r7, #36]	; 0x24
 8001bc6:	015b      	lsls	r3, r3, #5
 8001bc8:	623b      	str	r3, [r7, #32]
 8001bca:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001bce:	1a5b      	subs	r3, r3, r1
 8001bd0:	eb64 0402 	sbc.w	r4, r4, r2
 8001bd4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001bd8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001bdc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001be0:	ebb8 0803 	subs.w	r8, r8, r3
 8001be4:	eb69 0904 	sbc.w	r9, r9, r4
 8001be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c00:	eb18 0801 	adds.w	r8, r8, r1
 8001c04:	eb49 0902 	adc.w	r9, r9, r2
 8001c08:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c20:	4640      	mov	r0, r8
 8001c22:	4649      	mov	r1, r9
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	f04f 0400 	mov.w	r4, #0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	f7fe ff63 	bl	8000af8 <__aeabi_uldivmod>
 8001c32:	4603      	mov	r3, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
 8001c38:	e043      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	099b      	lsrs	r3, r3, #6
 8001c40:	f04f 0400 	mov.w	r4, #0
 8001c44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	ea01 0103 	and.w	r1, r1, r3
 8001c50:	ea02 0204 	and.w	r2, r2, r4
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	0160      	lsls	r0, r4, #5
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	015b      	lsls	r3, r3, #5
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c6c:	1a5b      	subs	r3, r3, r1
 8001c6e:	eb64 0402 	sbc.w	r4, r4, r2
 8001c72:	01a6      	lsls	r6, r4, #6
 8001c74:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001c78:	019d      	lsls	r5, r3, #6
 8001c7a:	1aed      	subs	r5, r5, r3
 8001c7c:	eb66 0604 	sbc.w	r6, r6, r4
 8001c80:	00f3      	lsls	r3, r6, #3
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	00eb      	lsls	r3, r5, #3
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001c94:	186d      	adds	r5, r5, r1
 8001c96:	eb46 0602 	adc.w	r6, r6, r2
 8001c9a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001c9e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001ca2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001ca6:	4655      	mov	r5, sl
 8001ca8:	465e      	mov	r6, fp
 8001caa:	4628      	mov	r0, r5
 8001cac:	4631      	mov	r1, r6
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	f04f 0400 	mov.w	r4, #0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	f7fe ff1e 	bl	8000af8 <__aeabi_uldivmod>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	0c1b      	lsrs	r3, r3, #16
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cdc:	e002      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ce2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	373c      	adds	r7, #60	; 0x3c
 8001cea:	46bd      	mov	sp, r7
 8001cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4601      	mov	r1, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	080049e8 	.word	0x080049e8

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffdc 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d44:	4601      	mov	r1, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0b5b      	lsrs	r3, r3, #13
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	080049e8 	.word	0x080049e8

08001d64 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e03f      	b.n	8001df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f001 f83c 	bl	8002e08 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2224      	movs	r2, #36	; 0x24
 8001d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	68d2      	ldr	r2, [r2, #12]
 8001da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fb7f 	bl	80024ac <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	6912      	ldr	r2, [r2, #16]
 8001db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	6952      	ldr	r2, [r2, #20]
 8001dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dcc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	68d2      	ldr	r2, [r2, #12]
 8001dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ddc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b088      	sub	sp, #32
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	f040 8082 	bne.w	8001f24 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_UART_Transmit+0x2e>
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e07a      	b.n	8001f26 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_UART_Transmit+0x40>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e073      	b.n	8001f26 <HAL_UART_Transmit+0x128>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2221      	movs	r2, #33	; 0x21
 8001e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e54:	f7ff f83e 	bl	8000ed4 <HAL_GetTick>
 8001e58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	88fa      	ldrh	r2, [r7, #6]
 8001e64:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001e66:	e041      	b.n	8001eec <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7e:	d121      	bne.n	8001ec4 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2200      	movs	r2, #0
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 f9ac 	bl	80021e8 <UART_WaitOnFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e045      	b.n	8001f26 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eaa:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d103      	bne.n	8001ebc <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	e017      	b.n	8001eec <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	e013      	b.n	8001eec <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f98a 	bl	80021e8 <UART_WaitOnFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e023      	b.n	8001f26 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1c59      	adds	r1, r3, #1
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1b8      	bne.n	8001e68 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2140      	movs	r1, #64	; 0x40
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f971 	bl	80021e8 <UART_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e00a      	b.n	8001f26 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
  }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d138      	bne.n	8001fba <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_UART_Receive_IT+0x26>
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e031      	b.n	8001fbc <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_UART_Receive_IT+0x38>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e02a      	b.n	8001fbc <HAL_UART_Receive_IT+0x8e>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	88fa      	ldrh	r2, [r7, #6]
 8001f78:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	88fa      	ldrh	r2, [r7, #6]
 8001f7e:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2222      	movs	r2, #34	; 0x22
 8001f8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	6952      	ldr	r2, [r2, #20]
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	68d2      	ldr	r2, [r2, #12]
 8001fb0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001fb4:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8001fba:	2302      	movs	r3, #2
  }
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10d      	bne.n	800201a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_UART_IRQHandler+0x52>
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f9d1 	bl	80023ba <UART_Receive_IT>
      return;
 8002018:	e0cc      	b.n	80021b4 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80ab 	beq.w	8002178 <HAL_UART_IRQHandler+0x1b0>
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_UART_IRQHandler+0x70>
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80a0 	beq.w	8002178 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_UART_IRQHandler+0x90>
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	f043 0201 	orr.w	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_UART_IRQHandler+0xb0>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	f043 0202 	orr.w	r2, r3, #2
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_UART_IRQHandler+0xd0>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	f043 0204 	orr.w	r2, r3, #4
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_UART_IRQHandler+0xf0>
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	f043 0208 	orr.w	r2, r3, #8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d078      	beq.n	80021b2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_UART_IRQHandler+0x112>
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f970 	bl	80023ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <HAL_UART_IRQHandler+0x13a>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d031      	beq.n	8002166 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8ba 	bl	800227c <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d023      	beq.n	800215e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	6952      	ldr	r2, [r2, #20]
 8002120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002124:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212a:	2b00      	cmp	r3, #0
 800212c:	d013      	beq.n	8002156 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002132:	4a22      	ldr	r2, [pc, #136]	; (80021bc <HAL_UART_IRQHandler+0x1f4>)
 8002134:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f80b 	bl	8001156 <HAL_DMA_Abort_IT>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002150:	4610      	mov	r0, r2
 8002152:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002154:	e00e      	b.n	8002174 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f83c 	bl	80021d4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800215c:	e00a      	b.n	8002174 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f838 	bl	80021d4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002164:	e006      	b.n	8002174 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f834 	bl	80021d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002172:	e01e      	b.n	80021b2 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002174:	bf00      	nop
    return;
 8002176:	e01c      	b.n	80021b2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_UART_IRQHandler+0x1cc>
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8a7 	bl	80022e0 <UART_Transmit_IT>
    return;
 8002192:	e00f      	b.n	80021b4 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_UART_IRQHandler+0x1ec>
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f8ee 	bl	800238a <UART_EndTransmit_IT>
    return;
 80021ae:	bf00      	nop
 80021b0:	e000      	b.n	80021b4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80021b2:	bf00      	nop
  }
}
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	080022b9 	.word	0x080022b9

080021c0 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80021f8:	e02c      	b.n	8002254 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d028      	beq.n	8002254 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <UART_WaitOnFlagUntilTimeout+0x30>
 8002208:	f7fe fe64 	bl	8000ed4 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	1ad2      	subs	r2, r2, r3
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	429a      	cmp	r2, r3
 8002216:	d91d      	bls.n	8002254 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	68d2      	ldr	r2, [r2, #12]
 8002222:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002226:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	6952      	ldr	r2, [r2, #20]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e00f      	b.n	8002274 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	401a      	ands	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	429a      	cmp	r2, r3
 8002270:	d0c3      	beq.n	80021fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	68d2      	ldr	r2, [r2, #12]
 800228e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002292:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	6952      	ldr	r2, [r2, #20]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff ff7e 	bl	80021d4 <HAL_UART_ErrorCallback>
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b21      	cmp	r3, #33	; 0x21
 80022f2:	d143      	bne.n	800237c <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fc:	d119      	bne.n	8002332 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	8812      	ldrh	r2, [r2, #0]
 800230c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002310:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	1c9a      	adds	r2, r3, #2
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	621a      	str	r2, [r3, #32]
 8002324:	e00e      	b.n	8002344 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	621a      	str	r2, [r3, #32]
 8002330:	e008      	b.n	8002344 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	1c58      	adds	r0, r3, #1
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	6208      	str	r0, [r1, #32]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29b      	uxth	r3, r3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4619      	mov	r1, r3
 8002352:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10f      	bne.n	8002378 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002366:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002376:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	68d2      	ldr	r2, [r2, #12]
 800239c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff08 	bl	80021c0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b22      	cmp	r3, #34	; 0x22
 80023cc:	d169      	bne.n	80024a2 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d6:	d123      	bne.n	8002420 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10e      	bne.n	8002404 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	1c9a      	adds	r2, r3, #2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
 8002402:	e029      	b.n	8002458 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	b29b      	uxth	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
 800241e:	e01b      	b.n	8002458 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	1c59      	adds	r1, r3, #1
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6291      	str	r1, [r2, #40]	; 0x28
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	6852      	ldr	r2, [r2, #4]
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e00c      	b.n	8002458 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	1c59      	adds	r1, r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6291      	str	r1, [r2, #40]	; 0x28
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	6852      	ldr	r2, [r2, #4]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29b      	uxth	r3, r3
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4619      	mov	r1, r3
 8002466:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002468:	2b00      	cmp	r3, #0
 800246a:	d118      	bne.n	800249e <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800247a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	6952      	ldr	r2, [r2, #20]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fba3 	bl	8002be0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e002      	b.n	80024a4 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80024e8:	f023 030c 	bic.w	r3, r3, #12
 80024ec:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4313      	orrs	r3, r2
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253c:	f040 80e4 	bne.w	8002708 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4aab      	ldr	r2, [pc, #684]	; (80027f4 <UART_SetConfig+0x348>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <UART_SetConfig+0xa8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4aaa      	ldr	r2, [pc, #680]	; (80027f8 <UART_SetConfig+0x34c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d16c      	bne.n	800262e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681c      	ldr	r4, [r3, #0]
 8002558:	f7ff fbf0 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800255c:	4602      	mov	r2, r0
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	009a      	lsls	r2, r3, #2
 8002566:	441a      	add	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	4aa2      	ldr	r2, [pc, #648]	; (80027fc <UART_SetConfig+0x350>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	011d      	lsls	r5, r3, #4
 800257c:	f7ff fbde 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002580:	4602      	mov	r2, r0
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009a      	lsls	r2, r3, #2
 800258a:	441a      	add	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fbb2 f6f3 	udiv	r6, r2, r3
 8002596:	f7ff fbd1 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800259a:	4602      	mov	r2, r0
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	009a      	lsls	r2, r3, #2
 80025a4:	441a      	add	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	4a92      	ldr	r2, [pc, #584]	; (80027fc <UART_SetConfig+0x350>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2264      	movs	r2, #100	; 0x64
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	1af3      	subs	r3, r6, r3
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	3332      	adds	r3, #50	; 0x32
 80025c4:	4a8d      	ldr	r2, [pc, #564]	; (80027fc <UART_SetConfig+0x350>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025d2:	441d      	add	r5, r3
 80025d4:	f7ff fbb2 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	009a      	lsls	r2, r3, #2
 80025e2:	441a      	add	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80025ee:	f7ff fba5 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	009a      	lsls	r2, r3, #2
 80025fc:	441a      	add	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	4a7c      	ldr	r2, [pc, #496]	; (80027fc <UART_SetConfig+0x350>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2264      	movs	r2, #100	; 0x64
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	1af3      	subs	r3, r6, r3
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	3332      	adds	r3, #50	; 0x32
 800261c:	4a77      	ldr	r2, [pc, #476]	; (80027fc <UART_SetConfig+0x350>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	442b      	add	r3, r5
 800262a:	60a3      	str	r3, [r4, #8]
 800262c:	e154      	b.n	80028d8 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681c      	ldr	r4, [r3, #0]
 8002632:	f7ff fb6f 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002636:	4602      	mov	r2, r0
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	4a6b      	ldr	r2, [pc, #428]	; (80027fc <UART_SetConfig+0x350>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	011d      	lsls	r5, r3, #4
 8002656:	f7ff fb5d 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 800265a:	4602      	mov	r2, r0
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002670:	f7ff fb50 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002674:	4602      	mov	r2, r0
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009a      	lsls	r2, r3, #2
 800267e:	441a      	add	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	4a5c      	ldr	r2, [pc, #368]	; (80027fc <UART_SetConfig+0x350>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	2264      	movs	r2, #100	; 0x64
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	1af3      	subs	r3, r6, r3
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	3332      	adds	r3, #50	; 0x32
 800269e:	4a57      	ldr	r2, [pc, #348]	; (80027fc <UART_SetConfig+0x350>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026ac:	441d      	add	r5, r3
 80026ae:	f7ff fb31 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009a      	lsls	r2, r3, #2
 80026bc:	441a      	add	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80026c8:	f7ff fb24 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	009a      	lsls	r2, r3, #2
 80026d6:	441a      	add	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4a46      	ldr	r2, [pc, #280]	; (80027fc <UART_SetConfig+0x350>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	2264      	movs	r2, #100	; 0x64
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	1af3      	subs	r3, r6, r3
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	3332      	adds	r3, #50	; 0x32
 80026f6:	4a41      	ldr	r2, [pc, #260]	; (80027fc <UART_SetConfig+0x350>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	442b      	add	r3, r5
 8002704:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002706:	e0e7      	b.n	80028d8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a39      	ldr	r2, [pc, #228]	; (80027f4 <UART_SetConfig+0x348>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <UART_SetConfig+0x270>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a38      	ldr	r2, [pc, #224]	; (80027f8 <UART_SetConfig+0x34c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d171      	bne.n	8002800 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681c      	ldr	r4, [r3, #0]
 8002720:	f7ff fb0c 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002724:	4602      	mov	r2, r0
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	009a      	lsls	r2, r3, #2
 800272e:	441a      	add	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	4a30      	ldr	r2, [pc, #192]	; (80027fc <UART_SetConfig+0x350>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	011d      	lsls	r5, r3, #4
 8002744:	f7ff fafa 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002748:	4602      	mov	r2, r0
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009a      	lsls	r2, r3, #2
 8002752:	441a      	add	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	fbb2 f6f3 	udiv	r6, r2, r3
 800275e:	f7ff faed 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002762:	4602      	mov	r2, r0
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009a      	lsls	r2, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	4a20      	ldr	r2, [pc, #128]	; (80027fc <UART_SetConfig+0x350>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2264      	movs	r2, #100	; 0x64
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	1af3      	subs	r3, r6, r3
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	3332      	adds	r3, #50	; 0x32
 800278c:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <UART_SetConfig+0x350>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002798:	441d      	add	r5, r3
 800279a:	f7ff facf 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009a      	lsls	r2, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80027b4:	f7ff fac2 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	009a      	lsls	r2, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <UART_SetConfig+0x350>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	2264      	movs	r2, #100	; 0x64
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	1af3      	subs	r3, r6, r3
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	3332      	adds	r3, #50	; 0x32
 80027e2:	4a06      	ldr	r2, [pc, #24]	; (80027fc <UART_SetConfig+0x350>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	442b      	add	r3, r5
 80027f0:	60a3      	str	r3, [r4, #8]
 80027f2:	e071      	b.n	80028d8 <UART_SetConfig+0x42c>
 80027f4:	40011000 	.word	0x40011000
 80027f8:	40011400 	.word	0x40011400
 80027fc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681c      	ldr	r4, [r3, #0]
 8002804:	f7ff fa86 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002808:	4602      	mov	r2, r0
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	009a      	lsls	r2, r3, #2
 8002812:	441a      	add	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	4a30      	ldr	r2, [pc, #192]	; (80028e0 <UART_SetConfig+0x434>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	011d      	lsls	r5, r3, #4
 8002828:	f7ff fa74 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 800282c:	4602      	mov	r2, r0
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	009a      	lsls	r2, r3, #2
 8002836:	441a      	add	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002842:	f7ff fa67 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002846:	4602      	mov	r2, r0
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009a      	lsls	r2, r3, #2
 8002850:	441a      	add	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <UART_SetConfig+0x434>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2264      	movs	r2, #100	; 0x64
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	1af3      	subs	r3, r6, r3
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	3332      	adds	r3, #50	; 0x32
 8002870:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <UART_SetConfig+0x434>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287c:	441d      	add	r5, r3
 800287e:	f7ff fa49 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002882:	4602      	mov	r2, r0
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009a      	lsls	r2, r3, #2
 800288c:	441a      	add	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fbb2 f6f3 	udiv	r6, r2, r3
 8002898:	f7ff fa3c 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 800289c:	4602      	mov	r2, r0
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009a      	lsls	r2, r3, #2
 80028a6:	441a      	add	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <UART_SetConfig+0x434>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	2264      	movs	r2, #100	; 0x64
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	1af3      	subs	r3, r6, r3
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	3332      	adds	r3, #50	; 0x32
 80028c6:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <UART_SetConfig+0x434>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	442b      	add	r3, r5
 80028d4:	60a3      	str	r3, [r4, #8]
}
 80028d6:	e7ff      	b.n	80028d8 <UART_SetConfig+0x42c>
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e0:	51eb851f 	.word	0x51eb851f

080028e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	4a54      	ldr	r2, [pc, #336]	; (8002a40 <MX_GPIO_Init+0x15c>)
 80028f0:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <MX_GPIO_Init+0x15c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f043 0310 	orr.w	r3, r3, #16
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <MX_GPIO_Init+0x15c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4a4d      	ldr	r2, [pc, #308]	; (8002a40 <MX_GPIO_Init+0x15c>)
 800290c:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <MX_GPIO_Init+0x15c>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <MX_GPIO_Init+0x15c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	4a46      	ldr	r2, [pc, #280]	; (8002a40 <MX_GPIO_Init+0x15c>)
 8002928:	4b45      	ldr	r3, [pc, #276]	; (8002a40 <MX_GPIO_Init+0x15c>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <MX_GPIO_Init+0x15c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	4a3f      	ldr	r2, [pc, #252]	; (8002a40 <MX_GPIO_Init+0x15c>)
 8002944:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <MX_GPIO_Init+0x15c>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b3c      	ldr	r3, [pc, #240]	; (8002a40 <MX_GPIO_Init+0x15c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4a38      	ldr	r2, [pc, #224]	; (8002a40 <MX_GPIO_Init+0x15c>)
 8002960:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <MX_GPIO_Init+0x15c>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f043 0308 	orr.w	r3, r3, #8
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <MX_GPIO_Init+0x15c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8002976:	2200      	movs	r2, #0
 8002978:	2121      	movs	r1, #33	; 0x21
 800297a:	4832      	ldr	r0, [pc, #200]	; (8002a44 <MX_GPIO_Init+0x160>)
 800297c:	f7fe fda8 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002980:	2200      	movs	r2, #0
 8002982:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002986:	4830      	ldr	r0, [pc, #192]	; (8002a48 <MX_GPIO_Init+0x164>)
 8002988:	f7fe fda2 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	2140      	movs	r1, #64	; 0x40
 8002990:	482e      	ldr	r0, [pc, #184]	; (8002a4c <MX_GPIO_Init+0x168>)
 8002992:	f7fe fd9d 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002996:	2308      	movs	r3, #8
 8002998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	4829      	ldr	r0, [pc, #164]	; (8002a50 <MX_GPIO_Init+0x16c>)
 80029aa:	f7fe fbf7 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	4822      	ldr	r0, [pc, #136]	; (8002a4c <MX_GPIO_Init+0x168>)
 80029c4:	f7fe fbea 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80029c8:	2321      	movs	r3, #33	; 0x21
 80029ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029cc:	2301      	movs	r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4619      	mov	r1, r3
 80029de:	4819      	ldr	r0, [pc, #100]	; (8002a44 <MX_GPIO_Init+0x160>)
 80029e0:	f7fe fbdc 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80029e4:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80029e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	4813      	ldr	r0, [pc, #76]	; (8002a48 <MX_GPIO_Init+0x164>)
 80029fa:	f7fe fbcf 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80029fe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	480c      	ldr	r0, [pc, #48]	; (8002a48 <MX_GPIO_Init+0x164>)
 8002a18:	f7fe fbc0 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a1c:	2340      	movs	r3, #64	; 0x40
 8002a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a20:	2301      	movs	r3, #1
 8002a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	4806      	ldr	r0, [pc, #24]	; (8002a4c <MX_GPIO_Init+0x168>)
 8002a34:	f7fe fbb2 	bl	800119c <HAL_GPIO_Init>

}
 8002a38:	bf00      	nop
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40021000 	.word	0x40021000

08002a54 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a5a:	f7fe f9d5 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a5e:	f000 f83d 	bl	8002adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a62:	f7ff ff3f 	bl	80028e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002a66:	f000 f9a1 	bl	8002dac <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002a6a:	f000 f8ad 	bl	8002bc8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2140      	movs	r1, #64	; 0x40
 8002a72:	4814      	ldr	r0, [pc, #80]	; (8002ac4 <main+0x70>)
 8002a74:	f7fe fd2c 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4812      	ldr	r0, [pc, #72]	; (8002ac8 <main+0x74>)
 8002a7e:	f7fe fd27 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002a82:	2201      	movs	r2, #1
 8002a84:	2120      	movs	r1, #32
 8002a86:	4810      	ldr	r0, [pc, #64]	; (8002ac8 <main+0x74>)
 8002a88:	f7fe fd22 	bl	80014d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a92:	480e      	ldr	r0, [pc, #56]	; (8002acc <main+0x78>)
 8002a94:	f7fe fd1c 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a9e:	480b      	ldr	r0, [pc, #44]	; (8002acc <main+0x78>)
 8002aa0:	f7fe fd16 	bl	80014d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002aaa:	4808      	ldr	r0, [pc, #32]	; (8002acc <main+0x78>)
 8002aac:	f7fe fd10 	bl	80014d0 <HAL_GPIO_WritePin>

	HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <main+0x7c>)
 8002ab4:	4807      	ldr	r0, [pc, #28]	; (8002ad4 <main+0x80>)
 8002ab6:	f7ff fa3a 	bl	8001f2e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t a = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	71fb      	strb	r3, [r7, #7]
	float f = 1.234;
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <main+0x84>)
 8002ac0:	603b      	str	r3, [r7, #0]
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <main+0x6e>
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020c00 	.word	0x40020c00
 8002ad0:	20000208 	.word	0x20000208
 8002ad4:	2000020c 	.word	0x2000020c
 8002ad8:	3f9df3b6 	.word	0x3f9df3b6

08002adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b094      	sub	sp, #80	; 0x50
 8002ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	4a34      	ldr	r2, [pc, #208]	; (8002bb8 <SystemClock_Config+0xdc>)
 8002ae8:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <SystemClock_Config+0xdc>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <SystemClock_Config+0xdc>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	4a2e      	ldr	r2, [pc, #184]	; (8002bbc <SystemClock_Config+0xe0>)
 8002b04:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <SystemClock_Config+0xe0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <SystemClock_Config+0xe0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b24:	2302      	movs	r3, #2
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b32:	23a8      	movs	r3, #168	; 0xa8
 8002b34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b36:	2302      	movs	r3, #2
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b3e:	f107 0320 	add.w	r3, r7, #32
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fcde 	bl	8001504 <HAL_RCC_OscConfig>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b4e:	21a2      	movs	r1, #162	; 0xa2
 8002b50:	481b      	ldr	r0, [pc, #108]	; (8002bc0 <SystemClock_Config+0xe4>)
 8002b52:	f000 f863 	bl	8002c1c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b56:	230f      	movs	r3, #15
 8002b58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	2105      	movs	r1, #5
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe ff07 	bl	8001988 <HAL_RCC_ClockConfig>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <SystemClock_Config+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b80:	21b0      	movs	r1, #176	; 0xb0
 8002b82:	480f      	ldr	r0, [pc, #60]	; (8002bc0 <SystemClock_Config+0xe4>)
 8002b84:	f000 f84a 	bl	8002c1c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b88:	f7ff f8b8 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <SystemClock_Config+0xe8>)
 8002b90:	fba3 2302 	umull	r2, r3, r3, r2
 8002b94:	099b      	lsrs	r3, r3, #6
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe faa7 	bl	80010ea <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b9c:	2004      	movs	r0, #4
 8002b9e:	f7fe fab1 	bl	8001104 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8002baa:	f7fe fa74 	bl	8001096 <HAL_NVIC_SetPriority>
}
 8002bae:	bf00      	nop
 8002bb0:	3750      	adds	r7, #80	; 0x50
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	080049b8 	.word	0x080049b8
 8002bc4:	10624dd3 	.word	0x10624dd3

08002bc8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	2027      	movs	r0, #39	; 0x27
 8002bd2:	f7fe fa60 	bl	8001096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bd6:	2027      	movs	r0, #39	; 0x27
 8002bd8:	f7fe fa79 	bl	80010ce <HAL_NVIC_EnableIRQ>
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a08      	ldr	r2, [pc, #32]	; (8002c10 <HAL_UART_RxCpltCallback+0x30>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10a      	bne.n	8002c08 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4907      	ldr	r1, [pc, #28]	; (8002c14 <HAL_UART_RxCpltCallback+0x34>)
 8002bf6:	4808      	ldr	r0, [pc, #32]	; (8002c18 <HAL_UART_RxCpltCallback+0x38>)
 8002bf8:	f7ff f999 	bl	8001f2e <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart3, &rx3_data, 1, 10);
 8002bfc:	230a      	movs	r3, #10
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4904      	ldr	r1, [pc, #16]	; (8002c14 <HAL_UART_RxCpltCallback+0x34>)
 8002c02:	4805      	ldr	r0, [pc, #20]	; (8002c18 <HAL_UART_RxCpltCallback+0x38>)
 8002c04:	f7ff f8fb 	bl	8001dfe <HAL_UART_Transmit>
	}
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40004800 	.word	0x40004800
 8002c14:	20000208 	.word	0x20000208
 8002c18:	2000020c 	.word	0x2000020c

08002c1c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002c26:	e7fe      	b.n	8002c26 <_Error_Handler+0xa>

08002c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <HAL_MspInit+0xa0>)
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_MspInit+0xa0>)
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3e:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <HAL_MspInit+0xa0>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_MspInit+0xa0>)
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_MspInit+0xa0>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_MspInit+0xa0>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c66:	2003      	movs	r0, #3
 8002c68:	f7fe fa0a 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2100      	movs	r1, #0
 8002c70:	f06f 000b 	mvn.w	r0, #11
 8002c74:	f7fe fa0f 	bl	8001096 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f06f 000a 	mvn.w	r0, #10
 8002c80:	f7fe fa09 	bl	8001096 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002c84:	2200      	movs	r2, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	f06f 0009 	mvn.w	r0, #9
 8002c8c:	f7fe fa03 	bl	8001096 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2100      	movs	r1, #0
 8002c94:	f06f 0004 	mvn.w	r0, #4
 8002c98:	f7fe f9fd 	bl	8001096 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	f06f 0003 	mvn.w	r0, #3
 8002ca4:	f7fe f9f7 	bl	8001096 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	f06f 0001 	mvn.w	r0, #1
 8002cb0:	f7fe f9f1 	bl	8001096 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f7fe f9eb 	bl	8001096 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800

08002ccc <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cde:	e7fe      	b.n	8002cde <HardFault_Handler+0x4>

08002ce0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <MemManage_Handler+0x4>

08002ce6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <BusFault_Handler+0x4>

08002cec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <UsageFault_Handler+0x4>

08002cf2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d20:	f7fe f8c4 	bl	8000eac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002d24:	f7fe fa0a 	bl	800113c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <USART3_IRQHandler+0x10>)
 8002d32:	f7ff f949 	bl	8001fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000020c 	.word	0x2000020c

08002d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <SystemInit+0x60>)
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <SystemInit+0x60>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d54:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <SystemInit+0x64>)
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <SystemInit+0x64>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d60:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <SystemInit+0x64>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <SystemInit+0x64>)
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <SystemInit+0x64>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <SystemInit+0x64>)
 8002d78:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <SystemInit+0x68>)
 8002d7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d7c:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <SystemInit+0x64>)
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <SystemInit+0x64>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <SystemInit+0x64>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <SystemInit+0x60>)
 8002d90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d94:	609a      	str	r2, [r3, #8]
#endif
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00
 8002da4:	40023800 	.word	0x40023800
 8002da8:	24003010 	.word	0x24003010

08002dac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <MX_USART3_UART_Init+0x50>)
 8002db2:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <MX_USART3_UART_Init+0x54>)
 8002db4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_USART3_UART_Init+0x50>)
 8002db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_USART3_UART_Init+0x50>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <MX_USART3_UART_Init+0x50>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_USART3_UART_Init+0x50>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <MX_USART3_UART_Init+0x50>)
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_USART3_UART_Init+0x50>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <MX_USART3_UART_Init+0x50>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002de2:	4806      	ldr	r0, [pc, #24]	; (8002dfc <MX_USART3_UART_Init+0x50>)
 8002de4:	f7fe ffbe 	bl	8001d64 <HAL_UART_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <MX_USART3_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002dee:	2142      	movs	r1, #66	; 0x42
 8002df0:	4804      	ldr	r0, [pc, #16]	; (8002e04 <MX_USART3_UART_Init+0x58>)
 8002df2:	f7ff ff13 	bl	8002c1c <_Error_Handler>
  }

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000020c 	.word	0x2000020c
 8002e00:	40004800 	.word	0x40004800
 8002e04:	080049c8 	.word	0x080049c8

08002e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <HAL_UART_MspInit+0x58>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d11e      	bne.n	8002e58 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <HAL_UART_MspInit+0x5c>)
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_UART_MspInit+0x5c>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_UART_MspInit+0x5c>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e40:	2301      	movs	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e44:	2303      	movs	r3, #3
 8002e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e48:	2307      	movs	r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4619      	mov	r1, r3
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <HAL_UART_MspInit+0x60>)
 8002e54:	f7fe f9a2 	bl	800119c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40004800 	.word	0x40004800
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40020c00 	.word	0x40020c00

08002e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e72:	e003      	b.n	8002e7c <LoopCopyDataInit>

08002e74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e7a:	3104      	adds	r1, #4

08002e7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e7c:	480b      	ldr	r0, [pc, #44]	; (8002eac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e84:	d3f6      	bcc.n	8002e74 <CopyDataInit>
  ldr  r2, =_sbss
 8002e86:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e88:	e002      	b.n	8002e90 <LoopFillZerobss>

08002e8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e8c:	f842 3b04 	str.w	r3, [r2], #4

08002e90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e94:	d3f9      	bcc.n	8002e8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e96:	f7ff ff53 	bl	8002d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f000 f811 	bl	8002ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e9e:	f7ff fdd9 	bl	8002a54 <main>
  bx  lr    
 8002ea2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ea4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ea8:	08004c28 	.word	0x08004c28
  ldr  r0, =_sdata
 8002eac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002eb0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002eb4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002eb8:	20000250 	.word	0x20000250

08002ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ebc:	e7fe      	b.n	8002ebc <ADC_IRQHandler>
	...

08002ec0 <__libc_init_array>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	4e0d      	ldr	r6, [pc, #52]	; (8002ef8 <__libc_init_array+0x38>)
 8002ec4:	4c0d      	ldr	r4, [pc, #52]	; (8002efc <__libc_init_array+0x3c>)
 8002ec6:	1ba4      	subs	r4, r4, r6
 8002ec8:	10a4      	asrs	r4, r4, #2
 8002eca:	2500      	movs	r5, #0
 8002ecc:	42a5      	cmp	r5, r4
 8002ece:	d109      	bne.n	8002ee4 <__libc_init_array+0x24>
 8002ed0:	4e0b      	ldr	r6, [pc, #44]	; (8002f00 <__libc_init_array+0x40>)
 8002ed2:	4c0c      	ldr	r4, [pc, #48]	; (8002f04 <__libc_init_array+0x44>)
 8002ed4:	f001 fd64 	bl	80049a0 <_init>
 8002ed8:	1ba4      	subs	r4, r4, r6
 8002eda:	10a4      	asrs	r4, r4, #2
 8002edc:	2500      	movs	r5, #0
 8002ede:	42a5      	cmp	r5, r4
 8002ee0:	d105      	bne.n	8002eee <__libc_init_array+0x2e>
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ee8:	4798      	blx	r3
 8002eea:	3501      	adds	r5, #1
 8002eec:	e7ee      	b.n	8002ecc <__libc_init_array+0xc>
 8002eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef2:	4798      	blx	r3
 8002ef4:	3501      	adds	r5, #1
 8002ef6:	e7f2      	b.n	8002ede <__libc_init_array+0x1e>
 8002ef8:	08004c20 	.word	0x08004c20
 8002efc:	08004c20 	.word	0x08004c20
 8002f00:	08004c20 	.word	0x08004c20
 8002f04:	08004c24 	.word	0x08004c24

08002f08 <__cvt>:
 8002f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0c:	ec55 4b10 	vmov	r4, r5, d0
 8002f10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002f12:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002f16:	2d00      	cmp	r5, #0
 8002f18:	460e      	mov	r6, r1
 8002f1a:	4691      	mov	r9, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	bfb8      	it	lt
 8002f20:	4622      	movlt	r2, r4
 8002f22:	462b      	mov	r3, r5
 8002f24:	f027 0720 	bic.w	r7, r7, #32
 8002f28:	bfbb      	ittet	lt
 8002f2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002f2e:	461d      	movlt	r5, r3
 8002f30:	2300      	movge	r3, #0
 8002f32:	232d      	movlt	r3, #45	; 0x2d
 8002f34:	bfb8      	it	lt
 8002f36:	4614      	movlt	r4, r2
 8002f38:	2f46      	cmp	r7, #70	; 0x46
 8002f3a:	700b      	strb	r3, [r1, #0]
 8002f3c:	d004      	beq.n	8002f48 <__cvt+0x40>
 8002f3e:	2f45      	cmp	r7, #69	; 0x45
 8002f40:	d100      	bne.n	8002f44 <__cvt+0x3c>
 8002f42:	3601      	adds	r6, #1
 8002f44:	2102      	movs	r1, #2
 8002f46:	e000      	b.n	8002f4a <__cvt+0x42>
 8002f48:	2103      	movs	r1, #3
 8002f4a:	ab03      	add	r3, sp, #12
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	ab02      	add	r3, sp, #8
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4632      	mov	r2, r6
 8002f54:	4653      	mov	r3, sl
 8002f56:	ec45 4b10 	vmov	d0, r4, r5
 8002f5a:	f000 fbad 	bl	80036b8 <_dtoa_r>
 8002f5e:	2f47      	cmp	r7, #71	; 0x47
 8002f60:	4680      	mov	r8, r0
 8002f62:	d102      	bne.n	8002f6a <__cvt+0x62>
 8002f64:	f019 0f01 	tst.w	r9, #1
 8002f68:	d026      	beq.n	8002fb8 <__cvt+0xb0>
 8002f6a:	2f46      	cmp	r7, #70	; 0x46
 8002f6c:	eb08 0906 	add.w	r9, r8, r6
 8002f70:	d111      	bne.n	8002f96 <__cvt+0x8e>
 8002f72:	f898 3000 	ldrb.w	r3, [r8]
 8002f76:	2b30      	cmp	r3, #48	; 0x30
 8002f78:	d10a      	bne.n	8002f90 <__cvt+0x88>
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	4620      	mov	r0, r4
 8002f80:	4629      	mov	r1, r5
 8002f82:	f7fd fd49 	bl	8000a18 <__aeabi_dcmpeq>
 8002f86:	b918      	cbnz	r0, 8002f90 <__cvt+0x88>
 8002f88:	f1c6 0601 	rsb	r6, r6, #1
 8002f8c:	f8ca 6000 	str.w	r6, [sl]
 8002f90:	f8da 3000 	ldr.w	r3, [sl]
 8002f94:	4499      	add	r9, r3
 8002f96:	2200      	movs	r2, #0
 8002f98:	2300      	movs	r3, #0
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f7fd fd3b 	bl	8000a18 <__aeabi_dcmpeq>
 8002fa2:	b938      	cbnz	r0, 8002fb4 <__cvt+0xac>
 8002fa4:	2230      	movs	r2, #48	; 0x30
 8002fa6:	9b03      	ldr	r3, [sp, #12]
 8002fa8:	4599      	cmp	r9, r3
 8002faa:	d905      	bls.n	8002fb8 <__cvt+0xb0>
 8002fac:	1c59      	adds	r1, r3, #1
 8002fae:	9103      	str	r1, [sp, #12]
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e7f8      	b.n	8002fa6 <__cvt+0x9e>
 8002fb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8002fb8:	9b03      	ldr	r3, [sp, #12]
 8002fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fbc:	eba3 0308 	sub.w	r3, r3, r8
 8002fc0:	4640      	mov	r0, r8
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	b004      	add	sp, #16
 8002fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002fca <__exponent>:
 8002fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	bfb8      	it	lt
 8002fd2:	4249      	neglt	r1, r1
 8002fd4:	f803 2b02 	strb.w	r2, [r3], #2
 8002fd8:	bfb4      	ite	lt
 8002fda:	222d      	movlt	r2, #45	; 0x2d
 8002fdc:	222b      	movge	r2, #43	; 0x2b
 8002fde:	2909      	cmp	r1, #9
 8002fe0:	7042      	strb	r2, [r0, #1]
 8002fe2:	dd20      	ble.n	8003026 <__exponent+0x5c>
 8002fe4:	f10d 0207 	add.w	r2, sp, #7
 8002fe8:	4617      	mov	r7, r2
 8002fea:	260a      	movs	r6, #10
 8002fec:	fb91 f5f6 	sdiv	r5, r1, r6
 8002ff0:	fb06 1115 	mls	r1, r6, r5, r1
 8002ff4:	3130      	adds	r1, #48	; 0x30
 8002ff6:	2d09      	cmp	r5, #9
 8002ff8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002ffc:	f102 34ff 	add.w	r4, r2, #4294967295
 8003000:	4629      	mov	r1, r5
 8003002:	dc09      	bgt.n	8003018 <__exponent+0x4e>
 8003004:	3130      	adds	r1, #48	; 0x30
 8003006:	3a02      	subs	r2, #2
 8003008:	f804 1c01 	strb.w	r1, [r4, #-1]
 800300c:	42ba      	cmp	r2, r7
 800300e:	461c      	mov	r4, r3
 8003010:	d304      	bcc.n	800301c <__exponent+0x52>
 8003012:	1a20      	subs	r0, r4, r0
 8003014:	b003      	add	sp, #12
 8003016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003018:	4622      	mov	r2, r4
 800301a:	e7e7      	b.n	8002fec <__exponent+0x22>
 800301c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003020:	f803 1b01 	strb.w	r1, [r3], #1
 8003024:	e7f2      	b.n	800300c <__exponent+0x42>
 8003026:	2230      	movs	r2, #48	; 0x30
 8003028:	461c      	mov	r4, r3
 800302a:	4411      	add	r1, r2
 800302c:	f804 2b02 	strb.w	r2, [r4], #2
 8003030:	7059      	strb	r1, [r3, #1]
 8003032:	e7ee      	b.n	8003012 <__exponent+0x48>

08003034 <_printf_float>:
 8003034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003038:	b08d      	sub	sp, #52	; 0x34
 800303a:	460c      	mov	r4, r1
 800303c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003040:	4616      	mov	r6, r2
 8003042:	461f      	mov	r7, r3
 8003044:	4605      	mov	r5, r0
 8003046:	f001 f905 	bl	8004254 <_localeconv_r>
 800304a:	6803      	ldr	r3, [r0, #0]
 800304c:	9304      	str	r3, [sp, #16]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd f8ba 	bl	80001c8 <strlen>
 8003054:	2300      	movs	r3, #0
 8003056:	930a      	str	r3, [sp, #40]	; 0x28
 8003058:	f8d8 3000 	ldr.w	r3, [r8]
 800305c:	9005      	str	r0, [sp, #20]
 800305e:	3307      	adds	r3, #7
 8003060:	f023 0307 	bic.w	r3, r3, #7
 8003064:	f103 0208 	add.w	r2, r3, #8
 8003068:	f894 a018 	ldrb.w	sl, [r4, #24]
 800306c:	f8d4 b000 	ldr.w	fp, [r4]
 8003070:	f8c8 2000 	str.w	r2, [r8]
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800307c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003080:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003084:	9307      	str	r3, [sp, #28]
 8003086:	f8cd 8018 	str.w	r8, [sp, #24]
 800308a:	f04f 32ff 	mov.w	r2, #4294967295
 800308e:	4ba5      	ldr	r3, [pc, #660]	; (8003324 <_printf_float+0x2f0>)
 8003090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003094:	f7fd fcf2 	bl	8000a7c <__aeabi_dcmpun>
 8003098:	2800      	cmp	r0, #0
 800309a:	f040 81fb 	bne.w	8003494 <_printf_float+0x460>
 800309e:	f04f 32ff 	mov.w	r2, #4294967295
 80030a2:	4ba0      	ldr	r3, [pc, #640]	; (8003324 <_printf_float+0x2f0>)
 80030a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030a8:	f7fd fcca 	bl	8000a40 <__aeabi_dcmple>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	f040 81f1 	bne.w	8003494 <_printf_float+0x460>
 80030b2:	2200      	movs	r2, #0
 80030b4:	2300      	movs	r3, #0
 80030b6:	4640      	mov	r0, r8
 80030b8:	4649      	mov	r1, r9
 80030ba:	f7fd fcb7 	bl	8000a2c <__aeabi_dcmplt>
 80030be:	b110      	cbz	r0, 80030c6 <_printf_float+0x92>
 80030c0:	232d      	movs	r3, #45	; 0x2d
 80030c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030c6:	4b98      	ldr	r3, [pc, #608]	; (8003328 <_printf_float+0x2f4>)
 80030c8:	4a98      	ldr	r2, [pc, #608]	; (800332c <_printf_float+0x2f8>)
 80030ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80030ce:	bf8c      	ite	hi
 80030d0:	4690      	movhi	r8, r2
 80030d2:	4698      	movls	r8, r3
 80030d4:	2303      	movs	r3, #3
 80030d6:	f02b 0204 	bic.w	r2, fp, #4
 80030da:	6123      	str	r3, [r4, #16]
 80030dc:	6022      	str	r2, [r4, #0]
 80030de:	f04f 0900 	mov.w	r9, #0
 80030e2:	9700      	str	r7, [sp, #0]
 80030e4:	4633      	mov	r3, r6
 80030e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80030e8:	4621      	mov	r1, r4
 80030ea:	4628      	mov	r0, r5
 80030ec:	f000 f9e2 	bl	80034b4 <_printf_common>
 80030f0:	3001      	adds	r0, #1
 80030f2:	f040 8093 	bne.w	800321c <_printf_float+0x1e8>
 80030f6:	f04f 30ff 	mov.w	r0, #4294967295
 80030fa:	b00d      	add	sp, #52	; 0x34
 80030fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003100:	6861      	ldr	r1, [r4, #4]
 8003102:	1c4b      	adds	r3, r1, #1
 8003104:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003108:	d13f      	bne.n	800318a <_printf_float+0x156>
 800310a:	2306      	movs	r3, #6
 800310c:	6063      	str	r3, [r4, #4]
 800310e:	2300      	movs	r3, #0
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	ab0a      	add	r3, sp, #40	; 0x28
 8003114:	9302      	str	r3, [sp, #8]
 8003116:	ab09      	add	r3, sp, #36	; 0x24
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	ec49 8b10 	vmov	d0, r8, r9
 800311e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003122:	6022      	str	r2, [r4, #0]
 8003124:	f8cd a004 	str.w	sl, [sp, #4]
 8003128:	6861      	ldr	r1, [r4, #4]
 800312a:	4628      	mov	r0, r5
 800312c:	f7ff feec 	bl	8002f08 <__cvt>
 8003130:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003134:	2b47      	cmp	r3, #71	; 0x47
 8003136:	4680      	mov	r8, r0
 8003138:	d109      	bne.n	800314e <_printf_float+0x11a>
 800313a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800313c:	1cd8      	adds	r0, r3, #3
 800313e:	db02      	blt.n	8003146 <_printf_float+0x112>
 8003140:	6862      	ldr	r2, [r4, #4]
 8003142:	4293      	cmp	r3, r2
 8003144:	dd57      	ble.n	80031f6 <_printf_float+0x1c2>
 8003146:	f1aa 0a02 	sub.w	sl, sl, #2
 800314a:	fa5f fa8a 	uxtb.w	sl, sl
 800314e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003152:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003154:	d834      	bhi.n	80031c0 <_printf_float+0x18c>
 8003156:	3901      	subs	r1, #1
 8003158:	4652      	mov	r2, sl
 800315a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800315e:	9109      	str	r1, [sp, #36]	; 0x24
 8003160:	f7ff ff33 	bl	8002fca <__exponent>
 8003164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003166:	1883      	adds	r3, r0, r2
 8003168:	2a01      	cmp	r2, #1
 800316a:	4681      	mov	r9, r0
 800316c:	6123      	str	r3, [r4, #16]
 800316e:	dc02      	bgt.n	8003176 <_printf_float+0x142>
 8003170:	6822      	ldr	r2, [r4, #0]
 8003172:	07d1      	lsls	r1, r2, #31
 8003174:	d501      	bpl.n	800317a <_printf_float+0x146>
 8003176:	3301      	adds	r3, #1
 8003178:	6123      	str	r3, [r4, #16]
 800317a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0af      	beq.n	80030e2 <_printf_float+0xae>
 8003182:	232d      	movs	r3, #45	; 0x2d
 8003184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003188:	e7ab      	b.n	80030e2 <_printf_float+0xae>
 800318a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800318e:	d002      	beq.n	8003196 <_printf_float+0x162>
 8003190:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003194:	d1bb      	bne.n	800310e <_printf_float+0xda>
 8003196:	b189      	cbz	r1, 80031bc <_printf_float+0x188>
 8003198:	2300      	movs	r3, #0
 800319a:	9303      	str	r3, [sp, #12]
 800319c:	ab0a      	add	r3, sp, #40	; 0x28
 800319e:	9302      	str	r3, [sp, #8]
 80031a0:	ab09      	add	r3, sp, #36	; 0x24
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	ec49 8b10 	vmov	d0, r8, r9
 80031a8:	6022      	str	r2, [r4, #0]
 80031aa:	f8cd a004 	str.w	sl, [sp, #4]
 80031ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80031b2:	4628      	mov	r0, r5
 80031b4:	f7ff fea8 	bl	8002f08 <__cvt>
 80031b8:	4680      	mov	r8, r0
 80031ba:	e7be      	b.n	800313a <_printf_float+0x106>
 80031bc:	2301      	movs	r3, #1
 80031be:	e7a5      	b.n	800310c <_printf_float+0xd8>
 80031c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80031c4:	d119      	bne.n	80031fa <_printf_float+0x1c6>
 80031c6:	2900      	cmp	r1, #0
 80031c8:	6863      	ldr	r3, [r4, #4]
 80031ca:	dd0c      	ble.n	80031e6 <_printf_float+0x1b2>
 80031cc:	6121      	str	r1, [r4, #16]
 80031ce:	b913      	cbnz	r3, 80031d6 <_printf_float+0x1a2>
 80031d0:	6822      	ldr	r2, [r4, #0]
 80031d2:	07d2      	lsls	r2, r2, #31
 80031d4:	d502      	bpl.n	80031dc <_printf_float+0x1a8>
 80031d6:	3301      	adds	r3, #1
 80031d8:	440b      	add	r3, r1
 80031da:	6123      	str	r3, [r4, #16]
 80031dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031de:	65a3      	str	r3, [r4, #88]	; 0x58
 80031e0:	f04f 0900 	mov.w	r9, #0
 80031e4:	e7c9      	b.n	800317a <_printf_float+0x146>
 80031e6:	b913      	cbnz	r3, 80031ee <_printf_float+0x1ba>
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	07d0      	lsls	r0, r2, #31
 80031ec:	d501      	bpl.n	80031f2 <_printf_float+0x1be>
 80031ee:	3302      	adds	r3, #2
 80031f0:	e7f3      	b.n	80031da <_printf_float+0x1a6>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e7f1      	b.n	80031da <_printf_float+0x1a6>
 80031f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80031fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031fe:	4293      	cmp	r3, r2
 8003200:	db05      	blt.n	800320e <_printf_float+0x1da>
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	6123      	str	r3, [r4, #16]
 8003206:	07d1      	lsls	r1, r2, #31
 8003208:	d5e8      	bpl.n	80031dc <_printf_float+0x1a8>
 800320a:	3301      	adds	r3, #1
 800320c:	e7e5      	b.n	80031da <_printf_float+0x1a6>
 800320e:	2b00      	cmp	r3, #0
 8003210:	bfd4      	ite	le
 8003212:	f1c3 0302 	rsble	r3, r3, #2
 8003216:	2301      	movgt	r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	e7de      	b.n	80031da <_printf_float+0x1a6>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	055a      	lsls	r2, r3, #21
 8003220:	d407      	bmi.n	8003232 <_printf_float+0x1fe>
 8003222:	6923      	ldr	r3, [r4, #16]
 8003224:	4642      	mov	r2, r8
 8003226:	4631      	mov	r1, r6
 8003228:	4628      	mov	r0, r5
 800322a:	47b8      	blx	r7
 800322c:	3001      	adds	r0, #1
 800322e:	d12b      	bne.n	8003288 <_printf_float+0x254>
 8003230:	e761      	b.n	80030f6 <_printf_float+0xc2>
 8003232:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003236:	f240 80e2 	bls.w	80033fe <_printf_float+0x3ca>
 800323a:	2200      	movs	r2, #0
 800323c:	2300      	movs	r3, #0
 800323e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003242:	f7fd fbe9 	bl	8000a18 <__aeabi_dcmpeq>
 8003246:	2800      	cmp	r0, #0
 8003248:	d03c      	beq.n	80032c4 <_printf_float+0x290>
 800324a:	2301      	movs	r3, #1
 800324c:	4a38      	ldr	r2, [pc, #224]	; (8003330 <_printf_float+0x2fc>)
 800324e:	4631      	mov	r1, r6
 8003250:	4628      	mov	r0, r5
 8003252:	47b8      	blx	r7
 8003254:	3001      	adds	r0, #1
 8003256:	f43f af4e 	beq.w	80030f6 <_printf_float+0xc2>
 800325a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800325c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800325e:	429a      	cmp	r2, r3
 8003260:	db02      	blt.n	8003268 <_printf_float+0x234>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	07d8      	lsls	r0, r3, #31
 8003266:	d50f      	bpl.n	8003288 <_printf_float+0x254>
 8003268:	9b05      	ldr	r3, [sp, #20]
 800326a:	9a04      	ldr	r2, [sp, #16]
 800326c:	4631      	mov	r1, r6
 800326e:	4628      	mov	r0, r5
 8003270:	47b8      	blx	r7
 8003272:	3001      	adds	r0, #1
 8003274:	f43f af3f 	beq.w	80030f6 <_printf_float+0xc2>
 8003278:	f04f 0800 	mov.w	r8, #0
 800327c:	f104 091a 	add.w	r9, r4, #26
 8003280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003282:	3b01      	subs	r3, #1
 8003284:	4598      	cmp	r8, r3
 8003286:	db12      	blt.n	80032ae <_printf_float+0x27a>
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	079b      	lsls	r3, r3, #30
 800328c:	d509      	bpl.n	80032a2 <_printf_float+0x26e>
 800328e:	f04f 0800 	mov.w	r8, #0
 8003292:	f104 0919 	add.w	r9, r4, #25
 8003296:	68e3      	ldr	r3, [r4, #12]
 8003298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	4598      	cmp	r8, r3
 800329e:	f2c0 80ee 	blt.w	800347e <_printf_float+0x44a>
 80032a2:	68e0      	ldr	r0, [r4, #12]
 80032a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032a6:	4298      	cmp	r0, r3
 80032a8:	bfb8      	it	lt
 80032aa:	4618      	movlt	r0, r3
 80032ac:	e725      	b.n	80030fa <_printf_float+0xc6>
 80032ae:	2301      	movs	r3, #1
 80032b0:	464a      	mov	r2, r9
 80032b2:	4631      	mov	r1, r6
 80032b4:	4628      	mov	r0, r5
 80032b6:	47b8      	blx	r7
 80032b8:	3001      	adds	r0, #1
 80032ba:	f43f af1c 	beq.w	80030f6 <_printf_float+0xc2>
 80032be:	f108 0801 	add.w	r8, r8, #1
 80032c2:	e7dd      	b.n	8003280 <_printf_float+0x24c>
 80032c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	dc34      	bgt.n	8003334 <_printf_float+0x300>
 80032ca:	2301      	movs	r3, #1
 80032cc:	4a18      	ldr	r2, [pc, #96]	; (8003330 <_printf_float+0x2fc>)
 80032ce:	4631      	mov	r1, r6
 80032d0:	4628      	mov	r0, r5
 80032d2:	47b8      	blx	r7
 80032d4:	3001      	adds	r0, #1
 80032d6:	f43f af0e 	beq.w	80030f6 <_printf_float+0xc2>
 80032da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032dc:	b923      	cbnz	r3, 80032e8 <_printf_float+0x2b4>
 80032de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032e0:	b913      	cbnz	r3, 80032e8 <_printf_float+0x2b4>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	07d9      	lsls	r1, r3, #31
 80032e6:	d5cf      	bpl.n	8003288 <_printf_float+0x254>
 80032e8:	9b05      	ldr	r3, [sp, #20]
 80032ea:	9a04      	ldr	r2, [sp, #16]
 80032ec:	4631      	mov	r1, r6
 80032ee:	4628      	mov	r0, r5
 80032f0:	47b8      	blx	r7
 80032f2:	3001      	adds	r0, #1
 80032f4:	f43f aeff 	beq.w	80030f6 <_printf_float+0xc2>
 80032f8:	f04f 0900 	mov.w	r9, #0
 80032fc:	f104 0a1a 	add.w	sl, r4, #26
 8003300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003302:	425b      	negs	r3, r3
 8003304:	4599      	cmp	r9, r3
 8003306:	db01      	blt.n	800330c <_printf_float+0x2d8>
 8003308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800330a:	e78b      	b.n	8003224 <_printf_float+0x1f0>
 800330c:	2301      	movs	r3, #1
 800330e:	4652      	mov	r2, sl
 8003310:	4631      	mov	r1, r6
 8003312:	4628      	mov	r0, r5
 8003314:	47b8      	blx	r7
 8003316:	3001      	adds	r0, #1
 8003318:	f43f aeed 	beq.w	80030f6 <_printf_float+0xc2>
 800331c:	f109 0901 	add.w	r9, r9, #1
 8003320:	e7ee      	b.n	8003300 <_printf_float+0x2cc>
 8003322:	bf00      	nop
 8003324:	7fefffff 	.word	0x7fefffff
 8003328:	080049f0 	.word	0x080049f0
 800332c:	080049f4 	.word	0x080049f4
 8003330:	08004a00 	.word	0x08004a00
 8003334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003338:	429a      	cmp	r2, r3
 800333a:	bfa8      	it	ge
 800333c:	461a      	movge	r2, r3
 800333e:	2a00      	cmp	r2, #0
 8003340:	4691      	mov	r9, r2
 8003342:	dc38      	bgt.n	80033b6 <_printf_float+0x382>
 8003344:	f104 031a 	add.w	r3, r4, #26
 8003348:	f04f 0b00 	mov.w	fp, #0
 800334c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003350:	9306      	str	r3, [sp, #24]
 8003352:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003356:	ebaa 0309 	sub.w	r3, sl, r9
 800335a:	459b      	cmp	fp, r3
 800335c:	db33      	blt.n	80033c6 <_printf_float+0x392>
 800335e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003362:	429a      	cmp	r2, r3
 8003364:	db3a      	blt.n	80033dc <_printf_float+0x3a8>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	07da      	lsls	r2, r3, #31
 800336a:	d437      	bmi.n	80033dc <_printf_float+0x3a8>
 800336c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800336e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003370:	eba3 020a 	sub.w	r2, r3, sl
 8003374:	eba3 0901 	sub.w	r9, r3, r1
 8003378:	4591      	cmp	r9, r2
 800337a:	bfa8      	it	ge
 800337c:	4691      	movge	r9, r2
 800337e:	f1b9 0f00 	cmp.w	r9, #0
 8003382:	dc33      	bgt.n	80033ec <_printf_float+0x3b8>
 8003384:	f04f 0800 	mov.w	r8, #0
 8003388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800338c:	f104 0a1a 	add.w	sl, r4, #26
 8003390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	eba3 0309 	sub.w	r3, r3, r9
 800339a:	4598      	cmp	r8, r3
 800339c:	f6bf af74 	bge.w	8003288 <_printf_float+0x254>
 80033a0:	2301      	movs	r3, #1
 80033a2:	4652      	mov	r2, sl
 80033a4:	4631      	mov	r1, r6
 80033a6:	4628      	mov	r0, r5
 80033a8:	47b8      	blx	r7
 80033aa:	3001      	adds	r0, #1
 80033ac:	f43f aea3 	beq.w	80030f6 <_printf_float+0xc2>
 80033b0:	f108 0801 	add.w	r8, r8, #1
 80033b4:	e7ec      	b.n	8003390 <_printf_float+0x35c>
 80033b6:	4613      	mov	r3, r2
 80033b8:	4631      	mov	r1, r6
 80033ba:	4642      	mov	r2, r8
 80033bc:	4628      	mov	r0, r5
 80033be:	47b8      	blx	r7
 80033c0:	3001      	adds	r0, #1
 80033c2:	d1bf      	bne.n	8003344 <_printf_float+0x310>
 80033c4:	e697      	b.n	80030f6 <_printf_float+0xc2>
 80033c6:	2301      	movs	r3, #1
 80033c8:	9a06      	ldr	r2, [sp, #24]
 80033ca:	4631      	mov	r1, r6
 80033cc:	4628      	mov	r0, r5
 80033ce:	47b8      	blx	r7
 80033d0:	3001      	adds	r0, #1
 80033d2:	f43f ae90 	beq.w	80030f6 <_printf_float+0xc2>
 80033d6:	f10b 0b01 	add.w	fp, fp, #1
 80033da:	e7ba      	b.n	8003352 <_printf_float+0x31e>
 80033dc:	9b05      	ldr	r3, [sp, #20]
 80033de:	9a04      	ldr	r2, [sp, #16]
 80033e0:	4631      	mov	r1, r6
 80033e2:	4628      	mov	r0, r5
 80033e4:	47b8      	blx	r7
 80033e6:	3001      	adds	r0, #1
 80033e8:	d1c0      	bne.n	800336c <_printf_float+0x338>
 80033ea:	e684      	b.n	80030f6 <_printf_float+0xc2>
 80033ec:	464b      	mov	r3, r9
 80033ee:	eb08 020a 	add.w	r2, r8, sl
 80033f2:	4631      	mov	r1, r6
 80033f4:	4628      	mov	r0, r5
 80033f6:	47b8      	blx	r7
 80033f8:	3001      	adds	r0, #1
 80033fa:	d1c3      	bne.n	8003384 <_printf_float+0x350>
 80033fc:	e67b      	b.n	80030f6 <_printf_float+0xc2>
 80033fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003400:	2a01      	cmp	r2, #1
 8003402:	dc01      	bgt.n	8003408 <_printf_float+0x3d4>
 8003404:	07db      	lsls	r3, r3, #31
 8003406:	d537      	bpl.n	8003478 <_printf_float+0x444>
 8003408:	2301      	movs	r3, #1
 800340a:	4642      	mov	r2, r8
 800340c:	4631      	mov	r1, r6
 800340e:	4628      	mov	r0, r5
 8003410:	47b8      	blx	r7
 8003412:	3001      	adds	r0, #1
 8003414:	f43f ae6f 	beq.w	80030f6 <_printf_float+0xc2>
 8003418:	9b05      	ldr	r3, [sp, #20]
 800341a:	9a04      	ldr	r2, [sp, #16]
 800341c:	4631      	mov	r1, r6
 800341e:	4628      	mov	r0, r5
 8003420:	47b8      	blx	r7
 8003422:	3001      	adds	r0, #1
 8003424:	f43f ae67 	beq.w	80030f6 <_printf_float+0xc2>
 8003428:	2200      	movs	r2, #0
 800342a:	2300      	movs	r3, #0
 800342c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003430:	f7fd faf2 	bl	8000a18 <__aeabi_dcmpeq>
 8003434:	b158      	cbz	r0, 800344e <_printf_float+0x41a>
 8003436:	f04f 0800 	mov.w	r8, #0
 800343a:	f104 0a1a 	add.w	sl, r4, #26
 800343e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	4598      	cmp	r8, r3
 8003444:	db0d      	blt.n	8003462 <_printf_float+0x42e>
 8003446:	464b      	mov	r3, r9
 8003448:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800344c:	e6eb      	b.n	8003226 <_printf_float+0x1f2>
 800344e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003450:	f108 0201 	add.w	r2, r8, #1
 8003454:	3b01      	subs	r3, #1
 8003456:	4631      	mov	r1, r6
 8003458:	4628      	mov	r0, r5
 800345a:	47b8      	blx	r7
 800345c:	3001      	adds	r0, #1
 800345e:	d1f2      	bne.n	8003446 <_printf_float+0x412>
 8003460:	e649      	b.n	80030f6 <_printf_float+0xc2>
 8003462:	2301      	movs	r3, #1
 8003464:	4652      	mov	r2, sl
 8003466:	4631      	mov	r1, r6
 8003468:	4628      	mov	r0, r5
 800346a:	47b8      	blx	r7
 800346c:	3001      	adds	r0, #1
 800346e:	f43f ae42 	beq.w	80030f6 <_printf_float+0xc2>
 8003472:	f108 0801 	add.w	r8, r8, #1
 8003476:	e7e2      	b.n	800343e <_printf_float+0x40a>
 8003478:	2301      	movs	r3, #1
 800347a:	4642      	mov	r2, r8
 800347c:	e7eb      	b.n	8003456 <_printf_float+0x422>
 800347e:	2301      	movs	r3, #1
 8003480:	464a      	mov	r2, r9
 8003482:	4631      	mov	r1, r6
 8003484:	4628      	mov	r0, r5
 8003486:	47b8      	blx	r7
 8003488:	3001      	adds	r0, #1
 800348a:	f43f ae34 	beq.w	80030f6 <_printf_float+0xc2>
 800348e:	f108 0801 	add.w	r8, r8, #1
 8003492:	e700      	b.n	8003296 <_printf_float+0x262>
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	4640      	mov	r0, r8
 800349a:	4649      	mov	r1, r9
 800349c:	f7fd faee 	bl	8000a7c <__aeabi_dcmpun>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	f43f ae2d 	beq.w	8003100 <_printf_float+0xcc>
 80034a6:	4b01      	ldr	r3, [pc, #4]	; (80034ac <_printf_float+0x478>)
 80034a8:	4a01      	ldr	r2, [pc, #4]	; (80034b0 <_printf_float+0x47c>)
 80034aa:	e60e      	b.n	80030ca <_printf_float+0x96>
 80034ac:	080049f8 	.word	0x080049f8
 80034b0:	080049fc 	.word	0x080049fc

080034b4 <_printf_common>:
 80034b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b8:	4691      	mov	r9, r2
 80034ba:	461f      	mov	r7, r3
 80034bc:	688a      	ldr	r2, [r1, #8]
 80034be:	690b      	ldr	r3, [r1, #16]
 80034c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034c4:	4293      	cmp	r3, r2
 80034c6:	bfb8      	it	lt
 80034c8:	4613      	movlt	r3, r2
 80034ca:	f8c9 3000 	str.w	r3, [r9]
 80034ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034d2:	4606      	mov	r6, r0
 80034d4:	460c      	mov	r4, r1
 80034d6:	b112      	cbz	r2, 80034de <_printf_common+0x2a>
 80034d8:	3301      	adds	r3, #1
 80034da:	f8c9 3000 	str.w	r3, [r9]
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	0699      	lsls	r1, r3, #26
 80034e2:	bf42      	ittt	mi
 80034e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034e8:	3302      	addmi	r3, #2
 80034ea:	f8c9 3000 	strmi.w	r3, [r9]
 80034ee:	6825      	ldr	r5, [r4, #0]
 80034f0:	f015 0506 	ands.w	r5, r5, #6
 80034f4:	d107      	bne.n	8003506 <_printf_common+0x52>
 80034f6:	f104 0a19 	add.w	sl, r4, #25
 80034fa:	68e3      	ldr	r3, [r4, #12]
 80034fc:	f8d9 2000 	ldr.w	r2, [r9]
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	429d      	cmp	r5, r3
 8003504:	db29      	blt.n	800355a <_printf_common+0xa6>
 8003506:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	3300      	adds	r3, #0
 800350e:	bf18      	it	ne
 8003510:	2301      	movne	r3, #1
 8003512:	0692      	lsls	r2, r2, #26
 8003514:	d42e      	bmi.n	8003574 <_printf_common+0xc0>
 8003516:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800351a:	4639      	mov	r1, r7
 800351c:	4630      	mov	r0, r6
 800351e:	47c0      	blx	r8
 8003520:	3001      	adds	r0, #1
 8003522:	d021      	beq.n	8003568 <_printf_common+0xb4>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	68e5      	ldr	r5, [r4, #12]
 8003528:	f8d9 2000 	ldr.w	r2, [r9]
 800352c:	f003 0306 	and.w	r3, r3, #6
 8003530:	2b04      	cmp	r3, #4
 8003532:	bf08      	it	eq
 8003534:	1aad      	subeq	r5, r5, r2
 8003536:	68a3      	ldr	r3, [r4, #8]
 8003538:	6922      	ldr	r2, [r4, #16]
 800353a:	bf0c      	ite	eq
 800353c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003540:	2500      	movne	r5, #0
 8003542:	4293      	cmp	r3, r2
 8003544:	bfc4      	itt	gt
 8003546:	1a9b      	subgt	r3, r3, r2
 8003548:	18ed      	addgt	r5, r5, r3
 800354a:	f04f 0900 	mov.w	r9, #0
 800354e:	341a      	adds	r4, #26
 8003550:	454d      	cmp	r5, r9
 8003552:	d11b      	bne.n	800358c <_printf_common+0xd8>
 8003554:	2000      	movs	r0, #0
 8003556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355a:	2301      	movs	r3, #1
 800355c:	4652      	mov	r2, sl
 800355e:	4639      	mov	r1, r7
 8003560:	4630      	mov	r0, r6
 8003562:	47c0      	blx	r8
 8003564:	3001      	adds	r0, #1
 8003566:	d103      	bne.n	8003570 <_printf_common+0xbc>
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003570:	3501      	adds	r5, #1
 8003572:	e7c2      	b.n	80034fa <_printf_common+0x46>
 8003574:	18e1      	adds	r1, r4, r3
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	2030      	movs	r0, #48	; 0x30
 800357a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800357e:	4422      	add	r2, r4
 8003580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003588:	3302      	adds	r3, #2
 800358a:	e7c4      	b.n	8003516 <_printf_common+0x62>
 800358c:	2301      	movs	r3, #1
 800358e:	4622      	mov	r2, r4
 8003590:	4639      	mov	r1, r7
 8003592:	4630      	mov	r0, r6
 8003594:	47c0      	blx	r8
 8003596:	3001      	adds	r0, #1
 8003598:	d0e6      	beq.n	8003568 <_printf_common+0xb4>
 800359a:	f109 0901 	add.w	r9, r9, #1
 800359e:	e7d7      	b.n	8003550 <_printf_common+0x9c>

080035a0 <quorem>:
 80035a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a4:	6903      	ldr	r3, [r0, #16]
 80035a6:	690c      	ldr	r4, [r1, #16]
 80035a8:	429c      	cmp	r4, r3
 80035aa:	4680      	mov	r8, r0
 80035ac:	f300 8082 	bgt.w	80036b4 <quorem+0x114>
 80035b0:	3c01      	subs	r4, #1
 80035b2:	f101 0714 	add.w	r7, r1, #20
 80035b6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80035ba:	f100 0614 	add.w	r6, r0, #20
 80035be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80035c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80035c6:	eb06 030e 	add.w	r3, r6, lr
 80035ca:	3501      	adds	r5, #1
 80035cc:	eb07 090e 	add.w	r9, r7, lr
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	fbb0 f5f5 	udiv	r5, r0, r5
 80035d6:	b395      	cbz	r5, 800363e <quorem+0x9e>
 80035d8:	f04f 0a00 	mov.w	sl, #0
 80035dc:	4638      	mov	r0, r7
 80035de:	46b4      	mov	ip, r6
 80035e0:	46d3      	mov	fp, sl
 80035e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80035e6:	b293      	uxth	r3, r2
 80035e8:	fb05 a303 	mla	r3, r5, r3, sl
 80035ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	ebab 0303 	sub.w	r3, fp, r3
 80035f6:	0c12      	lsrs	r2, r2, #16
 80035f8:	f8bc b000 	ldrh.w	fp, [ip]
 80035fc:	fb05 a202 	mla	r2, r5, r2, sl
 8003600:	fa13 f38b 	uxtah	r3, r3, fp
 8003604:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003608:	fa1f fb82 	uxth.w	fp, r2
 800360c:	f8dc 2000 	ldr.w	r2, [ip]
 8003610:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003614:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003618:	b29b      	uxth	r3, r3
 800361a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800361e:	4581      	cmp	r9, r0
 8003620:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003624:	f84c 3b04 	str.w	r3, [ip], #4
 8003628:	d2db      	bcs.n	80035e2 <quorem+0x42>
 800362a:	f856 300e 	ldr.w	r3, [r6, lr]
 800362e:	b933      	cbnz	r3, 800363e <quorem+0x9e>
 8003630:	9b01      	ldr	r3, [sp, #4]
 8003632:	3b04      	subs	r3, #4
 8003634:	429e      	cmp	r6, r3
 8003636:	461a      	mov	r2, r3
 8003638:	d330      	bcc.n	800369c <quorem+0xfc>
 800363a:	f8c8 4010 	str.w	r4, [r8, #16]
 800363e:	4640      	mov	r0, r8
 8003640:	f001 f833 	bl	80046aa <__mcmp>
 8003644:	2800      	cmp	r0, #0
 8003646:	db25      	blt.n	8003694 <quorem+0xf4>
 8003648:	3501      	adds	r5, #1
 800364a:	4630      	mov	r0, r6
 800364c:	f04f 0e00 	mov.w	lr, #0
 8003650:	f857 2b04 	ldr.w	r2, [r7], #4
 8003654:	f8d0 c000 	ldr.w	ip, [r0]
 8003658:	b293      	uxth	r3, r2
 800365a:	ebae 0303 	sub.w	r3, lr, r3
 800365e:	0c12      	lsrs	r2, r2, #16
 8003660:	fa13 f38c 	uxtah	r3, r3, ip
 8003664:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003668:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800366c:	b29b      	uxth	r3, r3
 800366e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003672:	45b9      	cmp	r9, r7
 8003674:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003678:	f840 3b04 	str.w	r3, [r0], #4
 800367c:	d2e8      	bcs.n	8003650 <quorem+0xb0>
 800367e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003682:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003686:	b92a      	cbnz	r2, 8003694 <quorem+0xf4>
 8003688:	3b04      	subs	r3, #4
 800368a:	429e      	cmp	r6, r3
 800368c:	461a      	mov	r2, r3
 800368e:	d30b      	bcc.n	80036a8 <quorem+0x108>
 8003690:	f8c8 4010 	str.w	r4, [r8, #16]
 8003694:	4628      	mov	r0, r5
 8003696:	b003      	add	sp, #12
 8003698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	3b04      	subs	r3, #4
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	d1ca      	bne.n	800363a <quorem+0x9a>
 80036a4:	3c01      	subs	r4, #1
 80036a6:	e7c5      	b.n	8003634 <quorem+0x94>
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	3b04      	subs	r3, #4
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	d1ef      	bne.n	8003690 <quorem+0xf0>
 80036b0:	3c01      	subs	r4, #1
 80036b2:	e7ea      	b.n	800368a <quorem+0xea>
 80036b4:	2000      	movs	r0, #0
 80036b6:	e7ee      	b.n	8003696 <quorem+0xf6>

080036b8 <_dtoa_r>:
 80036b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036bc:	ec57 6b10 	vmov	r6, r7, d0
 80036c0:	b097      	sub	sp, #92	; 0x5c
 80036c2:	e9cd 6700 	strd	r6, r7, [sp]
 80036c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80036c8:	9107      	str	r1, [sp, #28]
 80036ca:	4604      	mov	r4, r0
 80036cc:	920a      	str	r2, [sp, #40]	; 0x28
 80036ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80036d0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80036d2:	b93e      	cbnz	r6, 80036e4 <_dtoa_r+0x2c>
 80036d4:	2010      	movs	r0, #16
 80036d6:	f000 fdcb 	bl	8004270 <malloc>
 80036da:	6260      	str	r0, [r4, #36]	; 0x24
 80036dc:	6046      	str	r6, [r0, #4]
 80036de:	6086      	str	r6, [r0, #8]
 80036e0:	6006      	str	r6, [r0, #0]
 80036e2:	60c6      	str	r6, [r0, #12]
 80036e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	b151      	cbz	r1, 8003700 <_dtoa_r+0x48>
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	604a      	str	r2, [r1, #4]
 80036ee:	2301      	movs	r3, #1
 80036f0:	4093      	lsls	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]
 80036f4:	4620      	mov	r0, r4
 80036f6:	f000 fe02 	bl	80042fe <_Bfree>
 80036fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	9b01      	ldr	r3, [sp, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	bfbf      	itttt	lt
 8003706:	2301      	movlt	r3, #1
 8003708:	602b      	strlt	r3, [r5, #0]
 800370a:	9b01      	ldrlt	r3, [sp, #4]
 800370c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003710:	bfb2      	itee	lt
 8003712:	9301      	strlt	r3, [sp, #4]
 8003714:	2300      	movge	r3, #0
 8003716:	602b      	strge	r3, [r5, #0]
 8003718:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800371c:	4ba8      	ldr	r3, [pc, #672]	; (80039c0 <_dtoa_r+0x308>)
 800371e:	ea33 0308 	bics.w	r3, r3, r8
 8003722:	d11b      	bne.n	800375c <_dtoa_r+0xa4>
 8003724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003726:	f242 730f 	movw	r3, #9999	; 0x270f
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	9b00      	ldr	r3, [sp, #0]
 800372e:	b923      	cbnz	r3, 800373a <_dtoa_r+0x82>
 8003730:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003734:	2800      	cmp	r0, #0
 8003736:	f000 8578 	beq.w	800422a <_dtoa_r+0xb72>
 800373a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800373c:	b953      	cbnz	r3, 8003754 <_dtoa_r+0x9c>
 800373e:	4ba1      	ldr	r3, [pc, #644]	; (80039c4 <_dtoa_r+0x30c>)
 8003740:	e021      	b.n	8003786 <_dtoa_r+0xce>
 8003742:	4ba1      	ldr	r3, [pc, #644]	; (80039c8 <_dtoa_r+0x310>)
 8003744:	9302      	str	r3, [sp, #8]
 8003746:	3308      	adds	r3, #8
 8003748:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	9802      	ldr	r0, [sp, #8]
 800374e:	b017      	add	sp, #92	; 0x5c
 8003750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003754:	4b9b      	ldr	r3, [pc, #620]	; (80039c4 <_dtoa_r+0x30c>)
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	3303      	adds	r3, #3
 800375a:	e7f5      	b.n	8003748 <_dtoa_r+0x90>
 800375c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003760:	2200      	movs	r2, #0
 8003762:	2300      	movs	r3, #0
 8003764:	4630      	mov	r0, r6
 8003766:	4639      	mov	r1, r7
 8003768:	f7fd f956 	bl	8000a18 <__aeabi_dcmpeq>
 800376c:	4681      	mov	r9, r0
 800376e:	b160      	cbz	r0, 800378a <_dtoa_r+0xd2>
 8003770:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003772:	2301      	movs	r3, #1
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8553 	beq.w	8004224 <_dtoa_r+0xb6c>
 800377e:	4b93      	ldr	r3, [pc, #588]	; (80039cc <_dtoa_r+0x314>)
 8003780:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	3b01      	subs	r3, #1
 8003786:	9302      	str	r3, [sp, #8]
 8003788:	e7e0      	b.n	800374c <_dtoa_r+0x94>
 800378a:	aa14      	add	r2, sp, #80	; 0x50
 800378c:	a915      	add	r1, sp, #84	; 0x54
 800378e:	ec47 6b10 	vmov	d0, r6, r7
 8003792:	4620      	mov	r0, r4
 8003794:	f001 f801 	bl	800479a <__d2b>
 8003798:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800379c:	4682      	mov	sl, r0
 800379e:	2d00      	cmp	r5, #0
 80037a0:	d07e      	beq.n	80038a0 <_dtoa_r+0x1e8>
 80037a2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80037a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80037aa:	4630      	mov	r0, r6
 80037ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80037b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80037b4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80037b8:	2200      	movs	r2, #0
 80037ba:	4b85      	ldr	r3, [pc, #532]	; (80039d0 <_dtoa_r+0x318>)
 80037bc:	f7fc fd10 	bl	80001e0 <__aeabi_dsub>
 80037c0:	a379      	add	r3, pc, #484	; (adr r3, 80039a8 <_dtoa_r+0x2f0>)
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f7fc febf 	bl	8000548 <__aeabi_dmul>
 80037ca:	a379      	add	r3, pc, #484	; (adr r3, 80039b0 <_dtoa_r+0x2f8>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f7fc fd08 	bl	80001e4 <__adddf3>
 80037d4:	4606      	mov	r6, r0
 80037d6:	4628      	mov	r0, r5
 80037d8:	460f      	mov	r7, r1
 80037da:	f7fc fe4f 	bl	800047c <__aeabi_i2d>
 80037de:	a376      	add	r3, pc, #472	; (adr r3, 80039b8 <_dtoa_r+0x300>)
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f7fc feb0 	bl	8000548 <__aeabi_dmul>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4630      	mov	r0, r6
 80037ee:	4639      	mov	r1, r7
 80037f0:	f7fc fcf8 	bl	80001e4 <__adddf3>
 80037f4:	4606      	mov	r6, r0
 80037f6:	460f      	mov	r7, r1
 80037f8:	f7fd f956 	bl	8000aa8 <__aeabi_d2iz>
 80037fc:	2200      	movs	r2, #0
 80037fe:	4683      	mov	fp, r0
 8003800:	2300      	movs	r3, #0
 8003802:	4630      	mov	r0, r6
 8003804:	4639      	mov	r1, r7
 8003806:	f7fd f911 	bl	8000a2c <__aeabi_dcmplt>
 800380a:	b158      	cbz	r0, 8003824 <_dtoa_r+0x16c>
 800380c:	4658      	mov	r0, fp
 800380e:	f7fc fe35 	bl	800047c <__aeabi_i2d>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4630      	mov	r0, r6
 8003818:	4639      	mov	r1, r7
 800381a:	f7fd f8fd 	bl	8000a18 <__aeabi_dcmpeq>
 800381e:	b908      	cbnz	r0, 8003824 <_dtoa_r+0x16c>
 8003820:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003824:	f1bb 0f16 	cmp.w	fp, #22
 8003828:	d859      	bhi.n	80038de <_dtoa_r+0x226>
 800382a:	496a      	ldr	r1, [pc, #424]	; (80039d4 <_dtoa_r+0x31c>)
 800382c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003838:	f7fd f916 	bl	8000a68 <__aeabi_dcmpgt>
 800383c:	2800      	cmp	r0, #0
 800383e:	d050      	beq.n	80038e2 <_dtoa_r+0x22a>
 8003840:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003844:	2300      	movs	r3, #0
 8003846:	930e      	str	r3, [sp, #56]	; 0x38
 8003848:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800384a:	1b5d      	subs	r5, r3, r5
 800384c:	1e6b      	subs	r3, r5, #1
 800384e:	9306      	str	r3, [sp, #24]
 8003850:	bf45      	ittet	mi
 8003852:	f1c5 0301 	rsbmi	r3, r5, #1
 8003856:	9305      	strmi	r3, [sp, #20]
 8003858:	2300      	movpl	r3, #0
 800385a:	2300      	movmi	r3, #0
 800385c:	bf4c      	ite	mi
 800385e:	9306      	strmi	r3, [sp, #24]
 8003860:	9305      	strpl	r3, [sp, #20]
 8003862:	f1bb 0f00 	cmp.w	fp, #0
 8003866:	db3e      	blt.n	80038e6 <_dtoa_r+0x22e>
 8003868:	9b06      	ldr	r3, [sp, #24]
 800386a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800386e:	445b      	add	r3, fp
 8003870:	9306      	str	r3, [sp, #24]
 8003872:	2300      	movs	r3, #0
 8003874:	9308      	str	r3, [sp, #32]
 8003876:	9b07      	ldr	r3, [sp, #28]
 8003878:	2b09      	cmp	r3, #9
 800387a:	f200 80af 	bhi.w	80039dc <_dtoa_r+0x324>
 800387e:	2b05      	cmp	r3, #5
 8003880:	bfc4      	itt	gt
 8003882:	3b04      	subgt	r3, #4
 8003884:	9307      	strgt	r3, [sp, #28]
 8003886:	9b07      	ldr	r3, [sp, #28]
 8003888:	f1a3 0302 	sub.w	r3, r3, #2
 800388c:	bfcc      	ite	gt
 800388e:	2600      	movgt	r6, #0
 8003890:	2601      	movle	r6, #1
 8003892:	2b03      	cmp	r3, #3
 8003894:	f200 80ae 	bhi.w	80039f4 <_dtoa_r+0x33c>
 8003898:	e8df f003 	tbb	[pc, r3]
 800389c:	772f8482 	.word	0x772f8482
 80038a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80038a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80038a4:	441d      	add	r5, r3
 80038a6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	dd11      	ble.n	80038d2 <_dtoa_r+0x21a>
 80038ae:	9a00      	ldr	r2, [sp, #0]
 80038b0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80038b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80038b8:	fa22 f000 	lsr.w	r0, r2, r0
 80038bc:	fa08 f303 	lsl.w	r3, r8, r3
 80038c0:	4318      	orrs	r0, r3
 80038c2:	f7fc fdcb 	bl	800045c <__aeabi_ui2d>
 80038c6:	2301      	movs	r3, #1
 80038c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80038cc:	3d01      	subs	r5, #1
 80038ce:	9312      	str	r3, [sp, #72]	; 0x48
 80038d0:	e772      	b.n	80037b8 <_dtoa_r+0x100>
 80038d2:	f1c3 0020 	rsb	r0, r3, #32
 80038d6:	9b00      	ldr	r3, [sp, #0]
 80038d8:	fa03 f000 	lsl.w	r0, r3, r0
 80038dc:	e7f1      	b.n	80038c2 <_dtoa_r+0x20a>
 80038de:	2301      	movs	r3, #1
 80038e0:	e7b1      	b.n	8003846 <_dtoa_r+0x18e>
 80038e2:	900e      	str	r0, [sp, #56]	; 0x38
 80038e4:	e7b0      	b.n	8003848 <_dtoa_r+0x190>
 80038e6:	9b05      	ldr	r3, [sp, #20]
 80038e8:	eba3 030b 	sub.w	r3, r3, fp
 80038ec:	9305      	str	r3, [sp, #20]
 80038ee:	f1cb 0300 	rsb	r3, fp, #0
 80038f2:	9308      	str	r3, [sp, #32]
 80038f4:	2300      	movs	r3, #0
 80038f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80038f8:	e7bd      	b.n	8003876 <_dtoa_r+0x1be>
 80038fa:	2301      	movs	r3, #1
 80038fc:	9309      	str	r3, [sp, #36]	; 0x24
 80038fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	dd7a      	ble.n	80039fa <_dtoa_r+0x342>
 8003904:	9304      	str	r3, [sp, #16]
 8003906:	9303      	str	r3, [sp, #12]
 8003908:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800390a:	2200      	movs	r2, #0
 800390c:	606a      	str	r2, [r5, #4]
 800390e:	2104      	movs	r1, #4
 8003910:	f101 0214 	add.w	r2, r1, #20
 8003914:	429a      	cmp	r2, r3
 8003916:	d975      	bls.n	8003a04 <_dtoa_r+0x34c>
 8003918:	6869      	ldr	r1, [r5, #4]
 800391a:	4620      	mov	r0, r4
 800391c:	f000 fcbb 	bl	8004296 <_Balloc>
 8003920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003922:	6028      	str	r0, [r5, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	9302      	str	r3, [sp, #8]
 8003928:	9b03      	ldr	r3, [sp, #12]
 800392a:	2b0e      	cmp	r3, #14
 800392c:	f200 80e5 	bhi.w	8003afa <_dtoa_r+0x442>
 8003930:	2e00      	cmp	r6, #0
 8003932:	f000 80e2 	beq.w	8003afa <_dtoa_r+0x442>
 8003936:	ed9d 7b00 	vldr	d7, [sp]
 800393a:	f1bb 0f00 	cmp.w	fp, #0
 800393e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003942:	dd74      	ble.n	8003a2e <_dtoa_r+0x376>
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <_dtoa_r+0x31c>)
 8003946:	f00b 030f 	and.w	r3, fp, #15
 800394a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800394e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003952:	06f0      	lsls	r0, r6, #27
 8003954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003958:	d559      	bpl.n	8003a0e <_dtoa_r+0x356>
 800395a:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <_dtoa_r+0x320>)
 800395c:	ec51 0b17 	vmov	r0, r1, d7
 8003960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003964:	f7fc ff1a 	bl	800079c <__aeabi_ddiv>
 8003968:	e9cd 0100 	strd	r0, r1, [sp]
 800396c:	f006 060f 	and.w	r6, r6, #15
 8003970:	2503      	movs	r5, #3
 8003972:	4f19      	ldr	r7, [pc, #100]	; (80039d8 <_dtoa_r+0x320>)
 8003974:	2e00      	cmp	r6, #0
 8003976:	d14c      	bne.n	8003a12 <_dtoa_r+0x35a>
 8003978:	4642      	mov	r2, r8
 800397a:	464b      	mov	r3, r9
 800397c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003980:	f7fc ff0c 	bl	800079c <__aeabi_ddiv>
 8003984:	e9cd 0100 	strd	r0, r1, [sp]
 8003988:	e06a      	b.n	8003a60 <_dtoa_r+0x3a8>
 800398a:	2301      	movs	r3, #1
 800398c:	9309      	str	r3, [sp, #36]	; 0x24
 800398e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003990:	445b      	add	r3, fp
 8003992:	9304      	str	r3, [sp, #16]
 8003994:	3301      	adds	r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	9303      	str	r3, [sp, #12]
 800399a:	bfb8      	it	lt
 800399c:	2301      	movlt	r3, #1
 800399e:	e7b3      	b.n	8003908 <_dtoa_r+0x250>
 80039a0:	2300      	movs	r3, #0
 80039a2:	e7ab      	b.n	80038fc <_dtoa_r+0x244>
 80039a4:	2300      	movs	r3, #0
 80039a6:	e7f1      	b.n	800398c <_dtoa_r+0x2d4>
 80039a8:	636f4361 	.word	0x636f4361
 80039ac:	3fd287a7 	.word	0x3fd287a7
 80039b0:	8b60c8b3 	.word	0x8b60c8b3
 80039b4:	3fc68a28 	.word	0x3fc68a28
 80039b8:	509f79fb 	.word	0x509f79fb
 80039bc:	3fd34413 	.word	0x3fd34413
 80039c0:	7ff00000 	.word	0x7ff00000
 80039c4:	08004a0b 	.word	0x08004a0b
 80039c8:	08004a02 	.word	0x08004a02
 80039cc:	08004a01 	.word	0x08004a01
 80039d0:	3ff80000 	.word	0x3ff80000
 80039d4:	08004a38 	.word	0x08004a38
 80039d8:	08004a10 	.word	0x08004a10
 80039dc:	2601      	movs	r6, #1
 80039de:	2300      	movs	r3, #0
 80039e0:	9307      	str	r3, [sp, #28]
 80039e2:	9609      	str	r6, [sp, #36]	; 0x24
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	9304      	str	r3, [sp, #16]
 80039ea:	9303      	str	r3, [sp, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2312      	movs	r3, #18
 80039f0:	920a      	str	r2, [sp, #40]	; 0x28
 80039f2:	e789      	b.n	8003908 <_dtoa_r+0x250>
 80039f4:	2301      	movs	r3, #1
 80039f6:	9309      	str	r3, [sp, #36]	; 0x24
 80039f8:	e7f4      	b.n	80039e4 <_dtoa_r+0x32c>
 80039fa:	2301      	movs	r3, #1
 80039fc:	9304      	str	r3, [sp, #16]
 80039fe:	9303      	str	r3, [sp, #12]
 8003a00:	461a      	mov	r2, r3
 8003a02:	e7f5      	b.n	80039f0 <_dtoa_r+0x338>
 8003a04:	686a      	ldr	r2, [r5, #4]
 8003a06:	3201      	adds	r2, #1
 8003a08:	606a      	str	r2, [r5, #4]
 8003a0a:	0049      	lsls	r1, r1, #1
 8003a0c:	e780      	b.n	8003910 <_dtoa_r+0x258>
 8003a0e:	2502      	movs	r5, #2
 8003a10:	e7af      	b.n	8003972 <_dtoa_r+0x2ba>
 8003a12:	07f1      	lsls	r1, r6, #31
 8003a14:	d508      	bpl.n	8003a28 <_dtoa_r+0x370>
 8003a16:	4640      	mov	r0, r8
 8003a18:	4649      	mov	r1, r9
 8003a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a1e:	f7fc fd93 	bl	8000548 <__aeabi_dmul>
 8003a22:	3501      	adds	r5, #1
 8003a24:	4680      	mov	r8, r0
 8003a26:	4689      	mov	r9, r1
 8003a28:	1076      	asrs	r6, r6, #1
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	e7a2      	b.n	8003974 <_dtoa_r+0x2bc>
 8003a2e:	f000 809d 	beq.w	8003b6c <_dtoa_r+0x4b4>
 8003a32:	f1cb 0600 	rsb	r6, fp, #0
 8003a36:	4b9f      	ldr	r3, [pc, #636]	; (8003cb4 <_dtoa_r+0x5fc>)
 8003a38:	4f9f      	ldr	r7, [pc, #636]	; (8003cb8 <_dtoa_r+0x600>)
 8003a3a:	f006 020f 	and.w	r2, r6, #15
 8003a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a4a:	f7fc fd7d 	bl	8000548 <__aeabi_dmul>
 8003a4e:	e9cd 0100 	strd	r0, r1, [sp]
 8003a52:	1136      	asrs	r6, r6, #4
 8003a54:	2300      	movs	r3, #0
 8003a56:	2502      	movs	r5, #2
 8003a58:	2e00      	cmp	r6, #0
 8003a5a:	d17c      	bne.n	8003b56 <_dtoa_r+0x49e>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d191      	bne.n	8003984 <_dtoa_r+0x2cc>
 8003a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8084 	beq.w	8003b70 <_dtoa_r+0x4b8>
 8003a68:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4b93      	ldr	r3, [pc, #588]	; (8003cbc <_dtoa_r+0x604>)
 8003a70:	4640      	mov	r0, r8
 8003a72:	4649      	mov	r1, r9
 8003a74:	f7fc ffda 	bl	8000a2c <__aeabi_dcmplt>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d079      	beq.n	8003b70 <_dtoa_r+0x4b8>
 8003a7c:	9b03      	ldr	r3, [sp, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d076      	beq.n	8003b70 <_dtoa_r+0x4b8>
 8003a82:	9b04      	ldr	r3, [sp, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	dd34      	ble.n	8003af2 <_dtoa_r+0x43a>
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4b8d      	ldr	r3, [pc, #564]	; (8003cc0 <_dtoa_r+0x608>)
 8003a8c:	4640      	mov	r0, r8
 8003a8e:	4649      	mov	r1, r9
 8003a90:	f7fc fd5a 	bl	8000548 <__aeabi_dmul>
 8003a94:	e9cd 0100 	strd	r0, r1, [sp]
 8003a98:	9e04      	ldr	r6, [sp, #16]
 8003a9a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003a9e:	3501      	adds	r5, #1
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f7fc fceb 	bl	800047c <__aeabi_i2d>
 8003aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003aaa:	f7fc fd4d 	bl	8000548 <__aeabi_dmul>
 8003aae:	2200      	movs	r2, #0
 8003ab0:	4b84      	ldr	r3, [pc, #528]	; (8003cc4 <_dtoa_r+0x60c>)
 8003ab2:	f7fc fb97 	bl	80001e4 <__adddf3>
 8003ab6:	4680      	mov	r8, r0
 8003ab8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003abc:	2e00      	cmp	r6, #0
 8003abe:	d15a      	bne.n	8003b76 <_dtoa_r+0x4be>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <_dtoa_r+0x610>)
 8003ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ac8:	f7fc fb8a 	bl	80001e0 <__aeabi_dsub>
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	e9cd 0100 	strd	r0, r1, [sp]
 8003ad4:	f7fc ffc8 	bl	8000a68 <__aeabi_dcmpgt>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	f040 829b 	bne.w	8004014 <_dtoa_r+0x95c>
 8003ade:	4642      	mov	r2, r8
 8003ae0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003ae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ae8:	f7fc ffa0 	bl	8000a2c <__aeabi_dcmplt>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	f040 828f 	bne.w	8004010 <_dtoa_r+0x958>
 8003af2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003af6:	e9cd 2300 	strd	r2, r3, [sp]
 8003afa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f2c0 8150 	blt.w	8003da2 <_dtoa_r+0x6ea>
 8003b02:	f1bb 0f0e 	cmp.w	fp, #14
 8003b06:	f300 814c 	bgt.w	8003da2 <_dtoa_r+0x6ea>
 8003b0a:	4b6a      	ldr	r3, [pc, #424]	; (8003cb4 <_dtoa_r+0x5fc>)
 8003b0c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003b10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f280 80da 	bge.w	8003cd0 <_dtoa_r+0x618>
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f300 80d6 	bgt.w	8003cd0 <_dtoa_r+0x618>
 8003b24:	f040 8273 	bne.w	800400e <_dtoa_r+0x956>
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4b67      	ldr	r3, [pc, #412]	; (8003cc8 <_dtoa_r+0x610>)
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	4649      	mov	r1, r9
 8003b30:	f7fc fd0a 	bl	8000548 <__aeabi_dmul>
 8003b34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b38:	f7fc ff8c 	bl	8000a54 <__aeabi_dcmpge>
 8003b3c:	9e03      	ldr	r6, [sp, #12]
 8003b3e:	4637      	mov	r7, r6
 8003b40:	2800      	cmp	r0, #0
 8003b42:	f040 824a 	bne.w	8003fda <_dtoa_r+0x922>
 8003b46:	9b02      	ldr	r3, [sp, #8]
 8003b48:	9a02      	ldr	r2, [sp, #8]
 8003b4a:	1c5d      	adds	r5, r3, #1
 8003b4c:	2331      	movs	r3, #49	; 0x31
 8003b4e:	7013      	strb	r3, [r2, #0]
 8003b50:	f10b 0b01 	add.w	fp, fp, #1
 8003b54:	e245      	b.n	8003fe2 <_dtoa_r+0x92a>
 8003b56:	07f2      	lsls	r2, r6, #31
 8003b58:	d505      	bpl.n	8003b66 <_dtoa_r+0x4ae>
 8003b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b5e:	f7fc fcf3 	bl	8000548 <__aeabi_dmul>
 8003b62:	3501      	adds	r5, #1
 8003b64:	2301      	movs	r3, #1
 8003b66:	1076      	asrs	r6, r6, #1
 8003b68:	3708      	adds	r7, #8
 8003b6a:	e775      	b.n	8003a58 <_dtoa_r+0x3a0>
 8003b6c:	2502      	movs	r5, #2
 8003b6e:	e777      	b.n	8003a60 <_dtoa_r+0x3a8>
 8003b70:	465f      	mov	r7, fp
 8003b72:	9e03      	ldr	r6, [sp, #12]
 8003b74:	e794      	b.n	8003aa0 <_dtoa_r+0x3e8>
 8003b76:	9a02      	ldr	r2, [sp, #8]
 8003b78:	4b4e      	ldr	r3, [pc, #312]	; (8003cb4 <_dtoa_r+0x5fc>)
 8003b7a:	4432      	add	r2, r6
 8003b7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8003b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b80:	1e71      	subs	r1, r6, #1
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	d048      	beq.n	8003c18 <_dtoa_r+0x560>
 8003b86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	2000      	movs	r0, #0
 8003b90:	494e      	ldr	r1, [pc, #312]	; (8003ccc <_dtoa_r+0x614>)
 8003b92:	f7fc fe03 	bl	800079c <__aeabi_ddiv>
 8003b96:	4642      	mov	r2, r8
 8003b98:	464b      	mov	r3, r9
 8003b9a:	f7fc fb21 	bl	80001e0 <__aeabi_dsub>
 8003b9e:	9d02      	ldr	r5, [sp, #8]
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	4689      	mov	r9, r1
 8003ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ba8:	f7fc ff7e 	bl	8000aa8 <__aeabi_d2iz>
 8003bac:	4606      	mov	r6, r0
 8003bae:	f7fc fc65 	bl	800047c <__aeabi_i2d>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bba:	f7fc fb11 	bl	80001e0 <__aeabi_dsub>
 8003bbe:	3630      	adds	r6, #48	; 0x30
 8003bc0:	f805 6b01 	strb.w	r6, [r5], #1
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8003bcc:	f7fc ff2e 	bl	8000a2c <__aeabi_dcmplt>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d165      	bne.n	8003ca0 <_dtoa_r+0x5e8>
 8003bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bd8:	2000      	movs	r0, #0
 8003bda:	4938      	ldr	r1, [pc, #224]	; (8003cbc <_dtoa_r+0x604>)
 8003bdc:	f7fc fb00 	bl	80001e0 <__aeabi_dsub>
 8003be0:	4642      	mov	r2, r8
 8003be2:	464b      	mov	r3, r9
 8003be4:	f7fc ff22 	bl	8000a2c <__aeabi_dcmplt>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	f040 80ba 	bne.w	8003d62 <_dtoa_r+0x6aa>
 8003bee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003bf0:	429d      	cmp	r5, r3
 8003bf2:	f43f af7e 	beq.w	8003af2 <_dtoa_r+0x43a>
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <_dtoa_r+0x608>)
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	f7fc fca3 	bl	8000548 <__aeabi_dmul>
 8003c02:	2200      	movs	r2, #0
 8003c04:	4680      	mov	r8, r0
 8003c06:	4689      	mov	r9, r1
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <_dtoa_r+0x608>)
 8003c0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c0e:	f7fc fc9b 	bl	8000548 <__aeabi_dmul>
 8003c12:	e9cd 0100 	strd	r0, r1, [sp]
 8003c16:	e7c5      	b.n	8003ba4 <_dtoa_r+0x4ec>
 8003c18:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c24:	f7fc fc90 	bl	8000548 <__aeabi_dmul>
 8003c28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c2c:	9d02      	ldr	r5, [sp, #8]
 8003c2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c32:	f7fc ff39 	bl	8000aa8 <__aeabi_d2iz>
 8003c36:	4606      	mov	r6, r0
 8003c38:	f7fc fc20 	bl	800047c <__aeabi_i2d>
 8003c3c:	3630      	adds	r6, #48	; 0x30
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c46:	f7fc facb 	bl	80001e0 <__aeabi_dsub>
 8003c4a:	f805 6b01 	strb.w	r6, [r5], #1
 8003c4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c50:	42ab      	cmp	r3, r5
 8003c52:	4680      	mov	r8, r0
 8003c54:	4689      	mov	r9, r1
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	d125      	bne.n	8003ca8 <_dtoa_r+0x5f0>
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <_dtoa_r+0x614>)
 8003c5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c62:	f7fc fabf 	bl	80001e4 <__adddf3>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	f7fc fefb 	bl	8000a68 <__aeabi_dcmpgt>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d175      	bne.n	8003d62 <_dtoa_r+0x6aa>
 8003c76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	4913      	ldr	r1, [pc, #76]	; (8003ccc <_dtoa_r+0x614>)
 8003c7e:	f7fc faaf 	bl	80001e0 <__aeabi_dsub>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fc fecf 	bl	8000a2c <__aeabi_dcmplt>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	f43f af2f 	beq.w	8003af2 <_dtoa_r+0x43a>
 8003c94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003c98:	2b30      	cmp	r3, #48	; 0x30
 8003c9a:	f105 32ff 	add.w	r2, r5, #4294967295
 8003c9e:	d001      	beq.n	8003ca4 <_dtoa_r+0x5ec>
 8003ca0:	46bb      	mov	fp, r7
 8003ca2:	e04d      	b.n	8003d40 <_dtoa_r+0x688>
 8003ca4:	4615      	mov	r5, r2
 8003ca6:	e7f5      	b.n	8003c94 <_dtoa_r+0x5dc>
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <_dtoa_r+0x608>)
 8003caa:	f7fc fc4d 	bl	8000548 <__aeabi_dmul>
 8003cae:	e9cd 0100 	strd	r0, r1, [sp]
 8003cb2:	e7bc      	b.n	8003c2e <_dtoa_r+0x576>
 8003cb4:	08004a38 	.word	0x08004a38
 8003cb8:	08004a10 	.word	0x08004a10
 8003cbc:	3ff00000 	.word	0x3ff00000
 8003cc0:	40240000 	.word	0x40240000
 8003cc4:	401c0000 	.word	0x401c0000
 8003cc8:	40140000 	.word	0x40140000
 8003ccc:	3fe00000 	.word	0x3fe00000
 8003cd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003cd4:	9d02      	ldr	r5, [sp, #8]
 8003cd6:	4642      	mov	r2, r8
 8003cd8:	464b      	mov	r3, r9
 8003cda:	4630      	mov	r0, r6
 8003cdc:	4639      	mov	r1, r7
 8003cde:	f7fc fd5d 	bl	800079c <__aeabi_ddiv>
 8003ce2:	f7fc fee1 	bl	8000aa8 <__aeabi_d2iz>
 8003ce6:	9000      	str	r0, [sp, #0]
 8003ce8:	f7fc fbc8 	bl	800047c <__aeabi_i2d>
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	f7fc fc2a 	bl	8000548 <__aeabi_dmul>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	4639      	mov	r1, r7
 8003cfc:	f7fc fa70 	bl	80001e0 <__aeabi_dsub>
 8003d00:	9e00      	ldr	r6, [sp, #0]
 8003d02:	9f03      	ldr	r7, [sp, #12]
 8003d04:	3630      	adds	r6, #48	; 0x30
 8003d06:	f805 6b01 	strb.w	r6, [r5], #1
 8003d0a:	9e02      	ldr	r6, [sp, #8]
 8003d0c:	1bae      	subs	r6, r5, r6
 8003d0e:	42b7      	cmp	r7, r6
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	d138      	bne.n	8003d88 <_dtoa_r+0x6d0>
 8003d16:	f7fc fa65 	bl	80001e4 <__adddf3>
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	460f      	mov	r7, r1
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4640      	mov	r0, r8
 8003d24:	4649      	mov	r1, r9
 8003d26:	f7fc fe81 	bl	8000a2c <__aeabi_dcmplt>
 8003d2a:	b9c8      	cbnz	r0, 8003d60 <_dtoa_r+0x6a8>
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	463b      	mov	r3, r7
 8003d30:	4640      	mov	r0, r8
 8003d32:	4649      	mov	r1, r9
 8003d34:	f7fc fe70 	bl	8000a18 <__aeabi_dcmpeq>
 8003d38:	b110      	cbz	r0, 8003d40 <_dtoa_r+0x688>
 8003d3a:	9b00      	ldr	r3, [sp, #0]
 8003d3c:	07db      	lsls	r3, r3, #31
 8003d3e:	d40f      	bmi.n	8003d60 <_dtoa_r+0x6a8>
 8003d40:	4651      	mov	r1, sl
 8003d42:	4620      	mov	r0, r4
 8003d44:	f000 fadb 	bl	80042fe <_Bfree>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d4c:	702b      	strb	r3, [r5, #0]
 8003d4e:	f10b 0301 	add.w	r3, fp, #1
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f43f acf8 	beq.w	800374c <_dtoa_r+0x94>
 8003d5c:	601d      	str	r5, [r3, #0]
 8003d5e:	e4f5      	b.n	800374c <_dtoa_r+0x94>
 8003d60:	465f      	mov	r7, fp
 8003d62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003d66:	2a39      	cmp	r2, #57	; 0x39
 8003d68:	f105 33ff 	add.w	r3, r5, #4294967295
 8003d6c:	d106      	bne.n	8003d7c <_dtoa_r+0x6c4>
 8003d6e:	9a02      	ldr	r2, [sp, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d107      	bne.n	8003d84 <_dtoa_r+0x6cc>
 8003d74:	2330      	movs	r3, #48	; 0x30
 8003d76:	7013      	strb	r3, [r2, #0]
 8003d78:	3701      	adds	r7, #1
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	3201      	adds	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	e78d      	b.n	8003ca0 <_dtoa_r+0x5e8>
 8003d84:	461d      	mov	r5, r3
 8003d86:	e7ec      	b.n	8003d62 <_dtoa_r+0x6aa>
 8003d88:	2200      	movs	r2, #0
 8003d8a:	4ba4      	ldr	r3, [pc, #656]	; (800401c <_dtoa_r+0x964>)
 8003d8c:	f7fc fbdc 	bl	8000548 <__aeabi_dmul>
 8003d90:	2200      	movs	r2, #0
 8003d92:	2300      	movs	r3, #0
 8003d94:	4606      	mov	r6, r0
 8003d96:	460f      	mov	r7, r1
 8003d98:	f7fc fe3e 	bl	8000a18 <__aeabi_dcmpeq>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d09a      	beq.n	8003cd6 <_dtoa_r+0x61e>
 8003da0:	e7ce      	b.n	8003d40 <_dtoa_r+0x688>
 8003da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	f000 80cd 	beq.w	8003f44 <_dtoa_r+0x88c>
 8003daa:	9a07      	ldr	r2, [sp, #28]
 8003dac:	2a01      	cmp	r2, #1
 8003dae:	f300 80af 	bgt.w	8003f10 <_dtoa_r+0x858>
 8003db2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003db4:	2a00      	cmp	r2, #0
 8003db6:	f000 80a7 	beq.w	8003f08 <_dtoa_r+0x850>
 8003dba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003dbe:	9e08      	ldr	r6, [sp, #32]
 8003dc0:	9d05      	ldr	r5, [sp, #20]
 8003dc2:	9a05      	ldr	r2, [sp, #20]
 8003dc4:	441a      	add	r2, r3
 8003dc6:	9205      	str	r2, [sp, #20]
 8003dc8:	9a06      	ldr	r2, [sp, #24]
 8003dca:	2101      	movs	r1, #1
 8003dcc:	441a      	add	r2, r3
 8003dce:	4620      	mov	r0, r4
 8003dd0:	9206      	str	r2, [sp, #24]
 8003dd2:	f000 fb34 	bl	800443e <__i2b>
 8003dd6:	4607      	mov	r7, r0
 8003dd8:	2d00      	cmp	r5, #0
 8003dda:	dd0c      	ble.n	8003df6 <_dtoa_r+0x73e>
 8003ddc:	9b06      	ldr	r3, [sp, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	dd09      	ble.n	8003df6 <_dtoa_r+0x73e>
 8003de2:	42ab      	cmp	r3, r5
 8003de4:	9a05      	ldr	r2, [sp, #20]
 8003de6:	bfa8      	it	ge
 8003de8:	462b      	movge	r3, r5
 8003dea:	1ad2      	subs	r2, r2, r3
 8003dec:	9205      	str	r2, [sp, #20]
 8003dee:	9a06      	ldr	r2, [sp, #24]
 8003df0:	1aed      	subs	r5, r5, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	9306      	str	r3, [sp, #24]
 8003df6:	9b08      	ldr	r3, [sp, #32]
 8003df8:	b1f3      	cbz	r3, 8003e38 <_dtoa_r+0x780>
 8003dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a5 	beq.w	8003f4c <_dtoa_r+0x894>
 8003e02:	2e00      	cmp	r6, #0
 8003e04:	dd10      	ble.n	8003e28 <_dtoa_r+0x770>
 8003e06:	4639      	mov	r1, r7
 8003e08:	4632      	mov	r2, r6
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 fbae 	bl	800456c <__pow5mult>
 8003e10:	4652      	mov	r2, sl
 8003e12:	4601      	mov	r1, r0
 8003e14:	4607      	mov	r7, r0
 8003e16:	4620      	mov	r0, r4
 8003e18:	f000 fb1a 	bl	8004450 <__multiply>
 8003e1c:	4651      	mov	r1, sl
 8003e1e:	4680      	mov	r8, r0
 8003e20:	4620      	mov	r0, r4
 8003e22:	f000 fa6c 	bl	80042fe <_Bfree>
 8003e26:	46c2      	mov	sl, r8
 8003e28:	9b08      	ldr	r3, [sp, #32]
 8003e2a:	1b9a      	subs	r2, r3, r6
 8003e2c:	d004      	beq.n	8003e38 <_dtoa_r+0x780>
 8003e2e:	4651      	mov	r1, sl
 8003e30:	4620      	mov	r0, r4
 8003e32:	f000 fb9b 	bl	800456c <__pow5mult>
 8003e36:	4682      	mov	sl, r0
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f000 faff 	bl	800443e <__i2b>
 8003e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	4606      	mov	r6, r0
 8003e46:	f340 8083 	ble.w	8003f50 <_dtoa_r+0x898>
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4601      	mov	r1, r0
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f000 fb8c 	bl	800456c <__pow5mult>
 8003e54:	9b07      	ldr	r3, [sp, #28]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	4606      	mov	r6, r0
 8003e5a:	dd7c      	ble.n	8003f56 <_dtoa_r+0x89e>
 8003e5c:	f04f 0800 	mov.w	r8, #0
 8003e60:	6933      	ldr	r3, [r6, #16]
 8003e62:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003e66:	6918      	ldr	r0, [r3, #16]
 8003e68:	f000 fa9b 	bl	80043a2 <__hi0bits>
 8003e6c:	f1c0 0020 	rsb	r0, r0, #32
 8003e70:	9b06      	ldr	r3, [sp, #24]
 8003e72:	4418      	add	r0, r3
 8003e74:	f010 001f 	ands.w	r0, r0, #31
 8003e78:	f000 8096 	beq.w	8003fa8 <_dtoa_r+0x8f0>
 8003e7c:	f1c0 0320 	rsb	r3, r0, #32
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	f340 8087 	ble.w	8003f94 <_dtoa_r+0x8dc>
 8003e86:	9b05      	ldr	r3, [sp, #20]
 8003e88:	f1c0 001c 	rsb	r0, r0, #28
 8003e8c:	4403      	add	r3, r0
 8003e8e:	9305      	str	r3, [sp, #20]
 8003e90:	9b06      	ldr	r3, [sp, #24]
 8003e92:	4405      	add	r5, r0
 8003e94:	4403      	add	r3, r0
 8003e96:	9306      	str	r3, [sp, #24]
 8003e98:	9b05      	ldr	r3, [sp, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dd05      	ble.n	8003eaa <_dtoa_r+0x7f2>
 8003e9e:	4651      	mov	r1, sl
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f000 fbb0 	bl	8004608 <__lshift>
 8003ea8:	4682      	mov	sl, r0
 8003eaa:	9b06      	ldr	r3, [sp, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	dd05      	ble.n	8003ebc <_dtoa_r+0x804>
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 fba7 	bl	8004608 <__lshift>
 8003eba:	4606      	mov	r6, r0
 8003ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d074      	beq.n	8003fac <_dtoa_r+0x8f4>
 8003ec2:	4631      	mov	r1, r6
 8003ec4:	4650      	mov	r0, sl
 8003ec6:	f000 fbf0 	bl	80046aa <__mcmp>
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	da6e      	bge.n	8003fac <_dtoa_r+0x8f4>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	220a      	movs	r2, #10
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	f000 fa29 	bl	800432c <__multadd>
 8003eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003edc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ee0:	4682      	mov	sl, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 81a8 	beq.w	8004238 <_dtoa_r+0xb80>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	4639      	mov	r1, r7
 8003eec:	220a      	movs	r2, #10
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 fa1c 	bl	800432c <__multadd>
 8003ef4:	9b04      	ldr	r3, [sp, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	4607      	mov	r7, r0
 8003efa:	f300 80c8 	bgt.w	800408e <_dtoa_r+0x9d6>
 8003efe:	9b07      	ldr	r3, [sp, #28]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	f340 80c4 	ble.w	800408e <_dtoa_r+0x9d6>
 8003f06:	e059      	b.n	8003fbc <_dtoa_r+0x904>
 8003f08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003f0e:	e756      	b.n	8003dbe <_dtoa_r+0x706>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1e5e      	subs	r6, r3, #1
 8003f14:	9b08      	ldr	r3, [sp, #32]
 8003f16:	42b3      	cmp	r3, r6
 8003f18:	bfbf      	itttt	lt
 8003f1a:	9b08      	ldrlt	r3, [sp, #32]
 8003f1c:	9608      	strlt	r6, [sp, #32]
 8003f1e:	1af2      	sublt	r2, r6, r3
 8003f20:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8003f22:	bfb6      	itet	lt
 8003f24:	189b      	addlt	r3, r3, r2
 8003f26:	1b9e      	subge	r6, r3, r6
 8003f28:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003f2a:	9b03      	ldr	r3, [sp, #12]
 8003f2c:	bfb8      	it	lt
 8003f2e:	2600      	movlt	r6, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bfb9      	ittee	lt
 8003f34:	9b05      	ldrlt	r3, [sp, #20]
 8003f36:	9a03      	ldrlt	r2, [sp, #12]
 8003f38:	9d05      	ldrge	r5, [sp, #20]
 8003f3a:	9b03      	ldrge	r3, [sp, #12]
 8003f3c:	bfbc      	itt	lt
 8003f3e:	1a9d      	sublt	r5, r3, r2
 8003f40:	2300      	movlt	r3, #0
 8003f42:	e73e      	b.n	8003dc2 <_dtoa_r+0x70a>
 8003f44:	9e08      	ldr	r6, [sp, #32]
 8003f46:	9d05      	ldr	r5, [sp, #20]
 8003f48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003f4a:	e745      	b.n	8003dd8 <_dtoa_r+0x720>
 8003f4c:	9a08      	ldr	r2, [sp, #32]
 8003f4e:	e76e      	b.n	8003e2e <_dtoa_r+0x776>
 8003f50:	9b07      	ldr	r3, [sp, #28]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	dc19      	bgt.n	8003f8a <_dtoa_r+0x8d2>
 8003f56:	9b00      	ldr	r3, [sp, #0]
 8003f58:	b9bb      	cbnz	r3, 8003f8a <_dtoa_r+0x8d2>
 8003f5a:	9b01      	ldr	r3, [sp, #4]
 8003f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f60:	b99b      	cbnz	r3, 8003f8a <_dtoa_r+0x8d2>
 8003f62:	9b01      	ldr	r3, [sp, #4]
 8003f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f68:	0d1b      	lsrs	r3, r3, #20
 8003f6a:	051b      	lsls	r3, r3, #20
 8003f6c:	b183      	cbz	r3, 8003f90 <_dtoa_r+0x8d8>
 8003f6e:	9b05      	ldr	r3, [sp, #20]
 8003f70:	3301      	adds	r3, #1
 8003f72:	9305      	str	r3, [sp, #20]
 8003f74:	9b06      	ldr	r3, [sp, #24]
 8003f76:	3301      	adds	r3, #1
 8003f78:	9306      	str	r3, [sp, #24]
 8003f7a:	f04f 0801 	mov.w	r8, #1
 8003f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f47f af6d 	bne.w	8003e60 <_dtoa_r+0x7a8>
 8003f86:	2001      	movs	r0, #1
 8003f88:	e772      	b.n	8003e70 <_dtoa_r+0x7b8>
 8003f8a:	f04f 0800 	mov.w	r8, #0
 8003f8e:	e7f6      	b.n	8003f7e <_dtoa_r+0x8c6>
 8003f90:	4698      	mov	r8, r3
 8003f92:	e7f4      	b.n	8003f7e <_dtoa_r+0x8c6>
 8003f94:	d080      	beq.n	8003e98 <_dtoa_r+0x7e0>
 8003f96:	9a05      	ldr	r2, [sp, #20]
 8003f98:	331c      	adds	r3, #28
 8003f9a:	441a      	add	r2, r3
 8003f9c:	9205      	str	r2, [sp, #20]
 8003f9e:	9a06      	ldr	r2, [sp, #24]
 8003fa0:	441a      	add	r2, r3
 8003fa2:	441d      	add	r5, r3
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	e776      	b.n	8003e96 <_dtoa_r+0x7de>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	e7f4      	b.n	8003f96 <_dtoa_r+0x8de>
 8003fac:	9b03      	ldr	r3, [sp, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	dc36      	bgt.n	8004020 <_dtoa_r+0x968>
 8003fb2:	9b07      	ldr	r3, [sp, #28]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	dd33      	ble.n	8004020 <_dtoa_r+0x968>
 8003fb8:	9b03      	ldr	r3, [sp, #12]
 8003fba:	9304      	str	r3, [sp, #16]
 8003fbc:	9b04      	ldr	r3, [sp, #16]
 8003fbe:	b963      	cbnz	r3, 8003fda <_dtoa_r+0x922>
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 f9b1 	bl	800432c <__multadd>
 8003fca:	4601      	mov	r1, r0
 8003fcc:	4606      	mov	r6, r0
 8003fce:	4650      	mov	r0, sl
 8003fd0:	f000 fb6b 	bl	80046aa <__mcmp>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	f73f adb6 	bgt.w	8003b46 <_dtoa_r+0x48e>
 8003fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fdc:	9d02      	ldr	r5, [sp, #8]
 8003fde:	ea6f 0b03 	mvn.w	fp, r3
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9303      	str	r3, [sp, #12]
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f000 f988 	bl	80042fe <_Bfree>
 8003fee:	2f00      	cmp	r7, #0
 8003ff0:	f43f aea6 	beq.w	8003d40 <_dtoa_r+0x688>
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	b12b      	cbz	r3, 8004004 <_dtoa_r+0x94c>
 8003ff8:	42bb      	cmp	r3, r7
 8003ffa:	d003      	beq.n	8004004 <_dtoa_r+0x94c>
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4620      	mov	r0, r4
 8004000:	f000 f97d 	bl	80042fe <_Bfree>
 8004004:	4639      	mov	r1, r7
 8004006:	4620      	mov	r0, r4
 8004008:	f000 f979 	bl	80042fe <_Bfree>
 800400c:	e698      	b.n	8003d40 <_dtoa_r+0x688>
 800400e:	2600      	movs	r6, #0
 8004010:	4637      	mov	r7, r6
 8004012:	e7e2      	b.n	8003fda <_dtoa_r+0x922>
 8004014:	46bb      	mov	fp, r7
 8004016:	4637      	mov	r7, r6
 8004018:	e595      	b.n	8003b46 <_dtoa_r+0x48e>
 800401a:	bf00      	nop
 800401c:	40240000 	.word	0x40240000
 8004020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004022:	bb93      	cbnz	r3, 800408a <_dtoa_r+0x9d2>
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	9304      	str	r3, [sp, #16]
 8004028:	9d02      	ldr	r5, [sp, #8]
 800402a:	4631      	mov	r1, r6
 800402c:	4650      	mov	r0, sl
 800402e:	f7ff fab7 	bl	80035a0 <quorem>
 8004032:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004036:	f805 9b01 	strb.w	r9, [r5], #1
 800403a:	9b02      	ldr	r3, [sp, #8]
 800403c:	9a04      	ldr	r2, [sp, #16]
 800403e:	1aeb      	subs	r3, r5, r3
 8004040:	429a      	cmp	r2, r3
 8004042:	f300 80dc 	bgt.w	80041fe <_dtoa_r+0xb46>
 8004046:	9b02      	ldr	r3, [sp, #8]
 8004048:	2a01      	cmp	r2, #1
 800404a:	bfac      	ite	ge
 800404c:	189b      	addge	r3, r3, r2
 800404e:	3301      	addlt	r3, #1
 8004050:	4698      	mov	r8, r3
 8004052:	2300      	movs	r3, #0
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	4651      	mov	r1, sl
 8004058:	2201      	movs	r2, #1
 800405a:	4620      	mov	r0, r4
 800405c:	f000 fad4 	bl	8004608 <__lshift>
 8004060:	4631      	mov	r1, r6
 8004062:	4682      	mov	sl, r0
 8004064:	f000 fb21 	bl	80046aa <__mcmp>
 8004068:	2800      	cmp	r0, #0
 800406a:	f300 808d 	bgt.w	8004188 <_dtoa_r+0xad0>
 800406e:	d103      	bne.n	8004078 <_dtoa_r+0x9c0>
 8004070:	f019 0f01 	tst.w	r9, #1
 8004074:	f040 8088 	bne.w	8004188 <_dtoa_r+0xad0>
 8004078:	4645      	mov	r5, r8
 800407a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800407e:	2b30      	cmp	r3, #48	; 0x30
 8004080:	f105 32ff 	add.w	r2, r5, #4294967295
 8004084:	d1af      	bne.n	8003fe6 <_dtoa_r+0x92e>
 8004086:	4615      	mov	r5, r2
 8004088:	e7f7      	b.n	800407a <_dtoa_r+0x9c2>
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	9304      	str	r3, [sp, #16]
 800408e:	2d00      	cmp	r5, #0
 8004090:	dd05      	ble.n	800409e <_dtoa_r+0x9e6>
 8004092:	4639      	mov	r1, r7
 8004094:	462a      	mov	r2, r5
 8004096:	4620      	mov	r0, r4
 8004098:	f000 fab6 	bl	8004608 <__lshift>
 800409c:	4607      	mov	r7, r0
 800409e:	f1b8 0f00 	cmp.w	r8, #0
 80040a2:	d04c      	beq.n	800413e <_dtoa_r+0xa86>
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 f8f5 	bl	8004296 <_Balloc>
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	3202      	adds	r2, #2
 80040b0:	4605      	mov	r5, r0
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	f107 010c 	add.w	r1, r7, #12
 80040b8:	300c      	adds	r0, #12
 80040ba:	f000 f8e1 	bl	8004280 <memcpy>
 80040be:	2201      	movs	r2, #1
 80040c0:	4629      	mov	r1, r5
 80040c2:	4620      	mov	r0, r4
 80040c4:	f000 faa0 	bl	8004608 <__lshift>
 80040c8:	9b00      	ldr	r3, [sp, #0]
 80040ca:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80040ce:	9703      	str	r7, [sp, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	4607      	mov	r7, r0
 80040d6:	9305      	str	r3, [sp, #20]
 80040d8:	4631      	mov	r1, r6
 80040da:	4650      	mov	r0, sl
 80040dc:	f7ff fa60 	bl	80035a0 <quorem>
 80040e0:	9903      	ldr	r1, [sp, #12]
 80040e2:	4605      	mov	r5, r0
 80040e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80040e8:	4650      	mov	r0, sl
 80040ea:	f000 fade 	bl	80046aa <__mcmp>
 80040ee:	463a      	mov	r2, r7
 80040f0:	9000      	str	r0, [sp, #0]
 80040f2:	4631      	mov	r1, r6
 80040f4:	4620      	mov	r0, r4
 80040f6:	f000 faf2 	bl	80046de <__mdiff>
 80040fa:	68c3      	ldr	r3, [r0, #12]
 80040fc:	4602      	mov	r2, r0
 80040fe:	bb03      	cbnz	r3, 8004142 <_dtoa_r+0xa8a>
 8004100:	4601      	mov	r1, r0
 8004102:	9006      	str	r0, [sp, #24]
 8004104:	4650      	mov	r0, sl
 8004106:	f000 fad0 	bl	80046aa <__mcmp>
 800410a:	9a06      	ldr	r2, [sp, #24]
 800410c:	4603      	mov	r3, r0
 800410e:	4611      	mov	r1, r2
 8004110:	4620      	mov	r0, r4
 8004112:	9306      	str	r3, [sp, #24]
 8004114:	f000 f8f3 	bl	80042fe <_Bfree>
 8004118:	9b06      	ldr	r3, [sp, #24]
 800411a:	b9a3      	cbnz	r3, 8004146 <_dtoa_r+0xa8e>
 800411c:	9a07      	ldr	r2, [sp, #28]
 800411e:	b992      	cbnz	r2, 8004146 <_dtoa_r+0xa8e>
 8004120:	9a05      	ldr	r2, [sp, #20]
 8004122:	b982      	cbnz	r2, 8004146 <_dtoa_r+0xa8e>
 8004124:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004128:	d029      	beq.n	800417e <_dtoa_r+0xac6>
 800412a:	9b00      	ldr	r3, [sp, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	dd01      	ble.n	8004134 <_dtoa_r+0xa7c>
 8004130:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004134:	f108 0501 	add.w	r5, r8, #1
 8004138:	f888 9000 	strb.w	r9, [r8]
 800413c:	e753      	b.n	8003fe6 <_dtoa_r+0x92e>
 800413e:	4638      	mov	r0, r7
 8004140:	e7c2      	b.n	80040c8 <_dtoa_r+0xa10>
 8004142:	2301      	movs	r3, #1
 8004144:	e7e3      	b.n	800410e <_dtoa_r+0xa56>
 8004146:	9a00      	ldr	r2, [sp, #0]
 8004148:	2a00      	cmp	r2, #0
 800414a:	db04      	blt.n	8004156 <_dtoa_r+0xa9e>
 800414c:	d125      	bne.n	800419a <_dtoa_r+0xae2>
 800414e:	9a07      	ldr	r2, [sp, #28]
 8004150:	bb1a      	cbnz	r2, 800419a <_dtoa_r+0xae2>
 8004152:	9a05      	ldr	r2, [sp, #20]
 8004154:	bb0a      	cbnz	r2, 800419a <_dtoa_r+0xae2>
 8004156:	2b00      	cmp	r3, #0
 8004158:	ddec      	ble.n	8004134 <_dtoa_r+0xa7c>
 800415a:	4651      	mov	r1, sl
 800415c:	2201      	movs	r2, #1
 800415e:	4620      	mov	r0, r4
 8004160:	f000 fa52 	bl	8004608 <__lshift>
 8004164:	4631      	mov	r1, r6
 8004166:	4682      	mov	sl, r0
 8004168:	f000 fa9f 	bl	80046aa <__mcmp>
 800416c:	2800      	cmp	r0, #0
 800416e:	dc03      	bgt.n	8004178 <_dtoa_r+0xac0>
 8004170:	d1e0      	bne.n	8004134 <_dtoa_r+0xa7c>
 8004172:	f019 0f01 	tst.w	r9, #1
 8004176:	d0dd      	beq.n	8004134 <_dtoa_r+0xa7c>
 8004178:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800417c:	d1d8      	bne.n	8004130 <_dtoa_r+0xa78>
 800417e:	2339      	movs	r3, #57	; 0x39
 8004180:	f888 3000 	strb.w	r3, [r8]
 8004184:	f108 0801 	add.w	r8, r8, #1
 8004188:	4645      	mov	r5, r8
 800418a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800418e:	2b39      	cmp	r3, #57	; 0x39
 8004190:	f105 32ff 	add.w	r2, r5, #4294967295
 8004194:	d03b      	beq.n	800420e <_dtoa_r+0xb56>
 8004196:	3301      	adds	r3, #1
 8004198:	e040      	b.n	800421c <_dtoa_r+0xb64>
 800419a:	2b00      	cmp	r3, #0
 800419c:	f108 0501 	add.w	r5, r8, #1
 80041a0:	dd05      	ble.n	80041ae <_dtoa_r+0xaf6>
 80041a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80041a6:	d0ea      	beq.n	800417e <_dtoa_r+0xac6>
 80041a8:	f109 0901 	add.w	r9, r9, #1
 80041ac:	e7c4      	b.n	8004138 <_dtoa_r+0xa80>
 80041ae:	9b02      	ldr	r3, [sp, #8]
 80041b0:	9a04      	ldr	r2, [sp, #16]
 80041b2:	f805 9c01 	strb.w	r9, [r5, #-1]
 80041b6:	1aeb      	subs	r3, r5, r3
 80041b8:	4293      	cmp	r3, r2
 80041ba:	46a8      	mov	r8, r5
 80041bc:	f43f af4b 	beq.w	8004056 <_dtoa_r+0x99e>
 80041c0:	4651      	mov	r1, sl
 80041c2:	2300      	movs	r3, #0
 80041c4:	220a      	movs	r2, #10
 80041c6:	4620      	mov	r0, r4
 80041c8:	f000 f8b0 	bl	800432c <__multadd>
 80041cc:	9b03      	ldr	r3, [sp, #12]
 80041ce:	9903      	ldr	r1, [sp, #12]
 80041d0:	42bb      	cmp	r3, r7
 80041d2:	4682      	mov	sl, r0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	f04f 020a 	mov.w	r2, #10
 80041dc:	4620      	mov	r0, r4
 80041de:	d104      	bne.n	80041ea <_dtoa_r+0xb32>
 80041e0:	f000 f8a4 	bl	800432c <__multadd>
 80041e4:	9003      	str	r0, [sp, #12]
 80041e6:	4607      	mov	r7, r0
 80041e8:	e776      	b.n	80040d8 <_dtoa_r+0xa20>
 80041ea:	f000 f89f 	bl	800432c <__multadd>
 80041ee:	2300      	movs	r3, #0
 80041f0:	9003      	str	r0, [sp, #12]
 80041f2:	220a      	movs	r2, #10
 80041f4:	4639      	mov	r1, r7
 80041f6:	4620      	mov	r0, r4
 80041f8:	f000 f898 	bl	800432c <__multadd>
 80041fc:	e7f3      	b.n	80041e6 <_dtoa_r+0xb2e>
 80041fe:	4651      	mov	r1, sl
 8004200:	2300      	movs	r3, #0
 8004202:	220a      	movs	r2, #10
 8004204:	4620      	mov	r0, r4
 8004206:	f000 f891 	bl	800432c <__multadd>
 800420a:	4682      	mov	sl, r0
 800420c:	e70d      	b.n	800402a <_dtoa_r+0x972>
 800420e:	9b02      	ldr	r3, [sp, #8]
 8004210:	4293      	cmp	r3, r2
 8004212:	d105      	bne.n	8004220 <_dtoa_r+0xb68>
 8004214:	9a02      	ldr	r2, [sp, #8]
 8004216:	f10b 0b01 	add.w	fp, fp, #1
 800421a:	2331      	movs	r3, #49	; 0x31
 800421c:	7013      	strb	r3, [r2, #0]
 800421e:	e6e2      	b.n	8003fe6 <_dtoa_r+0x92e>
 8004220:	4615      	mov	r5, r2
 8004222:	e7b2      	b.n	800418a <_dtoa_r+0xad2>
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <_dtoa_r+0xb94>)
 8004226:	f7ff baae 	b.w	8003786 <_dtoa_r+0xce>
 800422a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f aa88 	bne.w	8003742 <_dtoa_r+0x8a>
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <_dtoa_r+0xb98>)
 8004234:	f7ff baa7 	b.w	8003786 <_dtoa_r+0xce>
 8004238:	9b04      	ldr	r3, [sp, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f73f aef4 	bgt.w	8004028 <_dtoa_r+0x970>
 8004240:	9b07      	ldr	r3, [sp, #28]
 8004242:	2b02      	cmp	r3, #2
 8004244:	f77f aef0 	ble.w	8004028 <_dtoa_r+0x970>
 8004248:	e6b8      	b.n	8003fbc <_dtoa_r+0x904>
 800424a:	bf00      	nop
 800424c:	08004a00 	.word	0x08004a00
 8004250:	08004a02 	.word	0x08004a02

08004254 <_localeconv_r>:
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <_localeconv_r+0x14>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6a18      	ldr	r0, [r3, #32]
 800425a:	4b04      	ldr	r3, [pc, #16]	; (800426c <_localeconv_r+0x18>)
 800425c:	2800      	cmp	r0, #0
 800425e:	bf08      	it	eq
 8004260:	4618      	moveq	r0, r3
 8004262:	30f0      	adds	r0, #240	; 0xf0
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	2000000c 	.word	0x2000000c
 800426c:	20000070 	.word	0x20000070

08004270 <malloc>:
 8004270:	4b02      	ldr	r3, [pc, #8]	; (800427c <malloc+0xc>)
 8004272:	4601      	mov	r1, r0
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	f000 baed 	b.w	8004854 <_malloc_r>
 800427a:	bf00      	nop
 800427c:	2000000c 	.word	0x2000000c

08004280 <memcpy>:
 8004280:	b510      	push	{r4, lr}
 8004282:	1e43      	subs	r3, r0, #1
 8004284:	440a      	add	r2, r1
 8004286:	4291      	cmp	r1, r2
 8004288:	d100      	bne.n	800428c <memcpy+0xc>
 800428a:	bd10      	pop	{r4, pc}
 800428c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004290:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004294:	e7f7      	b.n	8004286 <memcpy+0x6>

08004296 <_Balloc>:
 8004296:	b570      	push	{r4, r5, r6, lr}
 8004298:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800429a:	4604      	mov	r4, r0
 800429c:	460e      	mov	r6, r1
 800429e:	b93d      	cbnz	r5, 80042b0 <_Balloc+0x1a>
 80042a0:	2010      	movs	r0, #16
 80042a2:	f7ff ffe5 	bl	8004270 <malloc>
 80042a6:	6260      	str	r0, [r4, #36]	; 0x24
 80042a8:	6045      	str	r5, [r0, #4]
 80042aa:	6085      	str	r5, [r0, #8]
 80042ac:	6005      	str	r5, [r0, #0]
 80042ae:	60c5      	str	r5, [r0, #12]
 80042b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80042b2:	68eb      	ldr	r3, [r5, #12]
 80042b4:	b183      	cbz	r3, 80042d8 <_Balloc+0x42>
 80042b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80042be:	b9b8      	cbnz	r0, 80042f0 <_Balloc+0x5a>
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f506 	lsl.w	r5, r1, r6
 80042c6:	1d6a      	adds	r2, r5, #5
 80042c8:	0092      	lsls	r2, r2, #2
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 fab4 	bl	8004838 <_calloc_r>
 80042d0:	b160      	cbz	r0, 80042ec <_Balloc+0x56>
 80042d2:	6046      	str	r6, [r0, #4]
 80042d4:	6085      	str	r5, [r0, #8]
 80042d6:	e00e      	b.n	80042f6 <_Balloc+0x60>
 80042d8:	2221      	movs	r2, #33	; 0x21
 80042da:	2104      	movs	r1, #4
 80042dc:	4620      	mov	r0, r4
 80042de:	f000 faab 	bl	8004838 <_calloc_r>
 80042e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042e4:	60e8      	str	r0, [r5, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e4      	bne.n	80042b6 <_Balloc+0x20>
 80042ec:	2000      	movs	r0, #0
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	6802      	ldr	r2, [r0, #0]
 80042f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80042f6:	2300      	movs	r3, #0
 80042f8:	6103      	str	r3, [r0, #16]
 80042fa:	60c3      	str	r3, [r0, #12]
 80042fc:	bd70      	pop	{r4, r5, r6, pc}

080042fe <_Bfree>:
 80042fe:	b570      	push	{r4, r5, r6, lr}
 8004300:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004302:	4606      	mov	r6, r0
 8004304:	460d      	mov	r5, r1
 8004306:	b93c      	cbnz	r4, 8004318 <_Bfree+0x1a>
 8004308:	2010      	movs	r0, #16
 800430a:	f7ff ffb1 	bl	8004270 <malloc>
 800430e:	6270      	str	r0, [r6, #36]	; 0x24
 8004310:	6044      	str	r4, [r0, #4]
 8004312:	6084      	str	r4, [r0, #8]
 8004314:	6004      	str	r4, [r0, #0]
 8004316:	60c4      	str	r4, [r0, #12]
 8004318:	b13d      	cbz	r5, 800432a <_Bfree+0x2c>
 800431a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800431c:	686a      	ldr	r2, [r5, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004324:	6029      	str	r1, [r5, #0]
 8004326:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800432a:	bd70      	pop	{r4, r5, r6, pc}

0800432c <__multadd>:
 800432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004330:	690d      	ldr	r5, [r1, #16]
 8004332:	461f      	mov	r7, r3
 8004334:	4606      	mov	r6, r0
 8004336:	460c      	mov	r4, r1
 8004338:	f101 0e14 	add.w	lr, r1, #20
 800433c:	2300      	movs	r3, #0
 800433e:	f8de 0000 	ldr.w	r0, [lr]
 8004342:	b281      	uxth	r1, r0
 8004344:	fb02 7101 	mla	r1, r2, r1, r7
 8004348:	0c0f      	lsrs	r7, r1, #16
 800434a:	0c00      	lsrs	r0, r0, #16
 800434c:	fb02 7000 	mla	r0, r2, r0, r7
 8004350:	b289      	uxth	r1, r1
 8004352:	3301      	adds	r3, #1
 8004354:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004358:	429d      	cmp	r5, r3
 800435a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800435e:	f84e 1b04 	str.w	r1, [lr], #4
 8004362:	dcec      	bgt.n	800433e <__multadd+0x12>
 8004364:	b1d7      	cbz	r7, 800439c <__multadd+0x70>
 8004366:	68a3      	ldr	r3, [r4, #8]
 8004368:	429d      	cmp	r5, r3
 800436a:	db12      	blt.n	8004392 <__multadd+0x66>
 800436c:	6861      	ldr	r1, [r4, #4]
 800436e:	4630      	mov	r0, r6
 8004370:	3101      	adds	r1, #1
 8004372:	f7ff ff90 	bl	8004296 <_Balloc>
 8004376:	6922      	ldr	r2, [r4, #16]
 8004378:	3202      	adds	r2, #2
 800437a:	f104 010c 	add.w	r1, r4, #12
 800437e:	4680      	mov	r8, r0
 8004380:	0092      	lsls	r2, r2, #2
 8004382:	300c      	adds	r0, #12
 8004384:	f7ff ff7c 	bl	8004280 <memcpy>
 8004388:	4621      	mov	r1, r4
 800438a:	4630      	mov	r0, r6
 800438c:	f7ff ffb7 	bl	80042fe <_Bfree>
 8004390:	4644      	mov	r4, r8
 8004392:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004396:	3501      	adds	r5, #1
 8004398:	615f      	str	r7, [r3, #20]
 800439a:	6125      	str	r5, [r4, #16]
 800439c:	4620      	mov	r0, r4
 800439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080043a2 <__hi0bits>:
 80043a2:	0c02      	lsrs	r2, r0, #16
 80043a4:	0412      	lsls	r2, r2, #16
 80043a6:	4603      	mov	r3, r0
 80043a8:	b9b2      	cbnz	r2, 80043d8 <__hi0bits+0x36>
 80043aa:	0403      	lsls	r3, r0, #16
 80043ac:	2010      	movs	r0, #16
 80043ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80043b2:	bf04      	itt	eq
 80043b4:	021b      	lsleq	r3, r3, #8
 80043b6:	3008      	addeq	r0, #8
 80043b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80043bc:	bf04      	itt	eq
 80043be:	011b      	lsleq	r3, r3, #4
 80043c0:	3004      	addeq	r0, #4
 80043c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80043c6:	bf04      	itt	eq
 80043c8:	009b      	lsleq	r3, r3, #2
 80043ca:	3002      	addeq	r0, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db06      	blt.n	80043de <__hi0bits+0x3c>
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	d503      	bpl.n	80043dc <__hi0bits+0x3a>
 80043d4:	3001      	adds	r0, #1
 80043d6:	4770      	bx	lr
 80043d8:	2000      	movs	r0, #0
 80043da:	e7e8      	b.n	80043ae <__hi0bits+0xc>
 80043dc:	2020      	movs	r0, #32
 80043de:	4770      	bx	lr

080043e0 <__lo0bits>:
 80043e0:	6803      	ldr	r3, [r0, #0]
 80043e2:	f013 0207 	ands.w	r2, r3, #7
 80043e6:	4601      	mov	r1, r0
 80043e8:	d00b      	beq.n	8004402 <__lo0bits+0x22>
 80043ea:	07da      	lsls	r2, r3, #31
 80043ec:	d423      	bmi.n	8004436 <__lo0bits+0x56>
 80043ee:	0798      	lsls	r0, r3, #30
 80043f0:	bf49      	itett	mi
 80043f2:	085b      	lsrmi	r3, r3, #1
 80043f4:	089b      	lsrpl	r3, r3, #2
 80043f6:	2001      	movmi	r0, #1
 80043f8:	600b      	strmi	r3, [r1, #0]
 80043fa:	bf5c      	itt	pl
 80043fc:	600b      	strpl	r3, [r1, #0]
 80043fe:	2002      	movpl	r0, #2
 8004400:	4770      	bx	lr
 8004402:	b298      	uxth	r0, r3
 8004404:	b9a8      	cbnz	r0, 8004432 <__lo0bits+0x52>
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	2010      	movs	r0, #16
 800440a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800440e:	bf04      	itt	eq
 8004410:	0a1b      	lsreq	r3, r3, #8
 8004412:	3008      	addeq	r0, #8
 8004414:	071a      	lsls	r2, r3, #28
 8004416:	bf04      	itt	eq
 8004418:	091b      	lsreq	r3, r3, #4
 800441a:	3004      	addeq	r0, #4
 800441c:	079a      	lsls	r2, r3, #30
 800441e:	bf04      	itt	eq
 8004420:	089b      	lsreq	r3, r3, #2
 8004422:	3002      	addeq	r0, #2
 8004424:	07da      	lsls	r2, r3, #31
 8004426:	d402      	bmi.n	800442e <__lo0bits+0x4e>
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	d006      	beq.n	800443a <__lo0bits+0x5a>
 800442c:	3001      	adds	r0, #1
 800442e:	600b      	str	r3, [r1, #0]
 8004430:	4770      	bx	lr
 8004432:	4610      	mov	r0, r2
 8004434:	e7e9      	b.n	800440a <__lo0bits+0x2a>
 8004436:	2000      	movs	r0, #0
 8004438:	4770      	bx	lr
 800443a:	2020      	movs	r0, #32
 800443c:	4770      	bx	lr

0800443e <__i2b>:
 800443e:	b510      	push	{r4, lr}
 8004440:	460c      	mov	r4, r1
 8004442:	2101      	movs	r1, #1
 8004444:	f7ff ff27 	bl	8004296 <_Balloc>
 8004448:	2201      	movs	r2, #1
 800444a:	6144      	str	r4, [r0, #20]
 800444c:	6102      	str	r2, [r0, #16]
 800444e:	bd10      	pop	{r4, pc}

08004450 <__multiply>:
 8004450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004454:	4614      	mov	r4, r2
 8004456:	690a      	ldr	r2, [r1, #16]
 8004458:	6923      	ldr	r3, [r4, #16]
 800445a:	429a      	cmp	r2, r3
 800445c:	bfb8      	it	lt
 800445e:	460b      	movlt	r3, r1
 8004460:	4689      	mov	r9, r1
 8004462:	bfbc      	itt	lt
 8004464:	46a1      	movlt	r9, r4
 8004466:	461c      	movlt	r4, r3
 8004468:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800446c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004470:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004474:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004478:	eb07 060a 	add.w	r6, r7, sl
 800447c:	429e      	cmp	r6, r3
 800447e:	bfc8      	it	gt
 8004480:	3101      	addgt	r1, #1
 8004482:	f7ff ff08 	bl	8004296 <_Balloc>
 8004486:	f100 0514 	add.w	r5, r0, #20
 800448a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800448e:	462b      	mov	r3, r5
 8004490:	2200      	movs	r2, #0
 8004492:	4543      	cmp	r3, r8
 8004494:	d316      	bcc.n	80044c4 <__multiply+0x74>
 8004496:	f104 0214 	add.w	r2, r4, #20
 800449a:	f109 0114 	add.w	r1, r9, #20
 800449e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80044a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	9c01      	ldr	r4, [sp, #4]
 80044aa:	4294      	cmp	r4, r2
 80044ac:	4613      	mov	r3, r2
 80044ae:	d80c      	bhi.n	80044ca <__multiply+0x7a>
 80044b0:	2e00      	cmp	r6, #0
 80044b2:	dd03      	ble.n	80044bc <__multiply+0x6c>
 80044b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d054      	beq.n	8004566 <__multiply+0x116>
 80044bc:	6106      	str	r6, [r0, #16]
 80044be:	b003      	add	sp, #12
 80044c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c4:	f843 2b04 	str.w	r2, [r3], #4
 80044c8:	e7e3      	b.n	8004492 <__multiply+0x42>
 80044ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80044ce:	3204      	adds	r2, #4
 80044d0:	f1ba 0f00 	cmp.w	sl, #0
 80044d4:	d020      	beq.n	8004518 <__multiply+0xc8>
 80044d6:	46ae      	mov	lr, r5
 80044d8:	4689      	mov	r9, r1
 80044da:	f04f 0c00 	mov.w	ip, #0
 80044de:	f859 4b04 	ldr.w	r4, [r9], #4
 80044e2:	f8be b000 	ldrh.w	fp, [lr]
 80044e6:	b2a3      	uxth	r3, r4
 80044e8:	fb0a b303 	mla	r3, sl, r3, fp
 80044ec:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80044f0:	f8de 4000 	ldr.w	r4, [lr]
 80044f4:	4463      	add	r3, ip
 80044f6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80044fa:	fb0a c40b 	mla	r4, sl, fp, ip
 80044fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004502:	b29b      	uxth	r3, r3
 8004504:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004508:	454f      	cmp	r7, r9
 800450a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800450e:	f84e 3b04 	str.w	r3, [lr], #4
 8004512:	d8e4      	bhi.n	80044de <__multiply+0x8e>
 8004514:	f8ce c000 	str.w	ip, [lr]
 8004518:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800451c:	f1b9 0f00 	cmp.w	r9, #0
 8004520:	d01f      	beq.n	8004562 <__multiply+0x112>
 8004522:	682b      	ldr	r3, [r5, #0]
 8004524:	46ae      	mov	lr, r5
 8004526:	468c      	mov	ip, r1
 8004528:	f04f 0a00 	mov.w	sl, #0
 800452c:	f8bc 4000 	ldrh.w	r4, [ip]
 8004530:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004534:	fb09 b404 	mla	r4, r9, r4, fp
 8004538:	44a2      	add	sl, r4
 800453a:	b29b      	uxth	r3, r3
 800453c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004540:	f84e 3b04 	str.w	r3, [lr], #4
 8004544:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004548:	f8be 4000 	ldrh.w	r4, [lr]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	fb09 4303 	mla	r3, r9, r3, r4
 8004552:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004556:	4567      	cmp	r7, ip
 8004558:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800455c:	d8e6      	bhi.n	800452c <__multiply+0xdc>
 800455e:	f8ce 3000 	str.w	r3, [lr]
 8004562:	3504      	adds	r5, #4
 8004564:	e7a0      	b.n	80044a8 <__multiply+0x58>
 8004566:	3e01      	subs	r6, #1
 8004568:	e7a2      	b.n	80044b0 <__multiply+0x60>
	...

0800456c <__pow5mult>:
 800456c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004570:	4615      	mov	r5, r2
 8004572:	f012 0203 	ands.w	r2, r2, #3
 8004576:	4606      	mov	r6, r0
 8004578:	460f      	mov	r7, r1
 800457a:	d007      	beq.n	800458c <__pow5mult+0x20>
 800457c:	3a01      	subs	r2, #1
 800457e:	4c21      	ldr	r4, [pc, #132]	; (8004604 <__pow5mult+0x98>)
 8004580:	2300      	movs	r3, #0
 8004582:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004586:	f7ff fed1 	bl	800432c <__multadd>
 800458a:	4607      	mov	r7, r0
 800458c:	10ad      	asrs	r5, r5, #2
 800458e:	d035      	beq.n	80045fc <__pow5mult+0x90>
 8004590:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004592:	b93c      	cbnz	r4, 80045a4 <__pow5mult+0x38>
 8004594:	2010      	movs	r0, #16
 8004596:	f7ff fe6b 	bl	8004270 <malloc>
 800459a:	6270      	str	r0, [r6, #36]	; 0x24
 800459c:	6044      	str	r4, [r0, #4]
 800459e:	6084      	str	r4, [r0, #8]
 80045a0:	6004      	str	r4, [r0, #0]
 80045a2:	60c4      	str	r4, [r0, #12]
 80045a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80045a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80045ac:	b94c      	cbnz	r4, 80045c2 <__pow5mult+0x56>
 80045ae:	f240 2171 	movw	r1, #625	; 0x271
 80045b2:	4630      	mov	r0, r6
 80045b4:	f7ff ff43 	bl	800443e <__i2b>
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80045be:	4604      	mov	r4, r0
 80045c0:	6003      	str	r3, [r0, #0]
 80045c2:	f04f 0800 	mov.w	r8, #0
 80045c6:	07eb      	lsls	r3, r5, #31
 80045c8:	d50a      	bpl.n	80045e0 <__pow5mult+0x74>
 80045ca:	4639      	mov	r1, r7
 80045cc:	4622      	mov	r2, r4
 80045ce:	4630      	mov	r0, r6
 80045d0:	f7ff ff3e 	bl	8004450 <__multiply>
 80045d4:	4639      	mov	r1, r7
 80045d6:	4681      	mov	r9, r0
 80045d8:	4630      	mov	r0, r6
 80045da:	f7ff fe90 	bl	80042fe <_Bfree>
 80045de:	464f      	mov	r7, r9
 80045e0:	106d      	asrs	r5, r5, #1
 80045e2:	d00b      	beq.n	80045fc <__pow5mult+0x90>
 80045e4:	6820      	ldr	r0, [r4, #0]
 80045e6:	b938      	cbnz	r0, 80045f8 <__pow5mult+0x8c>
 80045e8:	4622      	mov	r2, r4
 80045ea:	4621      	mov	r1, r4
 80045ec:	4630      	mov	r0, r6
 80045ee:	f7ff ff2f 	bl	8004450 <__multiply>
 80045f2:	6020      	str	r0, [r4, #0]
 80045f4:	f8c0 8000 	str.w	r8, [r0]
 80045f8:	4604      	mov	r4, r0
 80045fa:	e7e4      	b.n	80045c6 <__pow5mult+0x5a>
 80045fc:	4638      	mov	r0, r7
 80045fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004602:	bf00      	nop
 8004604:	08004b00 	.word	0x08004b00

08004608 <__lshift>:
 8004608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	460c      	mov	r4, r1
 800460e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	6849      	ldr	r1, [r1, #4]
 8004616:	eb0a 0903 	add.w	r9, sl, r3
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	4607      	mov	r7, r0
 800461e:	4616      	mov	r6, r2
 8004620:	f109 0501 	add.w	r5, r9, #1
 8004624:	42ab      	cmp	r3, r5
 8004626:	db31      	blt.n	800468c <__lshift+0x84>
 8004628:	4638      	mov	r0, r7
 800462a:	f7ff fe34 	bl	8004296 <_Balloc>
 800462e:	2200      	movs	r2, #0
 8004630:	4680      	mov	r8, r0
 8004632:	f100 0314 	add.w	r3, r0, #20
 8004636:	4611      	mov	r1, r2
 8004638:	4552      	cmp	r2, sl
 800463a:	db2a      	blt.n	8004692 <__lshift+0x8a>
 800463c:	6920      	ldr	r0, [r4, #16]
 800463e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004642:	f104 0114 	add.w	r1, r4, #20
 8004646:	f016 021f 	ands.w	r2, r6, #31
 800464a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800464e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004652:	d022      	beq.n	800469a <__lshift+0x92>
 8004654:	f1c2 0c20 	rsb	ip, r2, #32
 8004658:	2000      	movs	r0, #0
 800465a:	680e      	ldr	r6, [r1, #0]
 800465c:	4096      	lsls	r6, r2
 800465e:	4330      	orrs	r0, r6
 8004660:	f843 0b04 	str.w	r0, [r3], #4
 8004664:	f851 0b04 	ldr.w	r0, [r1], #4
 8004668:	458e      	cmp	lr, r1
 800466a:	fa20 f00c 	lsr.w	r0, r0, ip
 800466e:	d8f4      	bhi.n	800465a <__lshift+0x52>
 8004670:	6018      	str	r0, [r3, #0]
 8004672:	b108      	cbz	r0, 8004678 <__lshift+0x70>
 8004674:	f109 0502 	add.w	r5, r9, #2
 8004678:	3d01      	subs	r5, #1
 800467a:	4638      	mov	r0, r7
 800467c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004680:	4621      	mov	r1, r4
 8004682:	f7ff fe3c 	bl	80042fe <_Bfree>
 8004686:	4640      	mov	r0, r8
 8004688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468c:	3101      	adds	r1, #1
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	e7c8      	b.n	8004624 <__lshift+0x1c>
 8004692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004696:	3201      	adds	r2, #1
 8004698:	e7ce      	b.n	8004638 <__lshift+0x30>
 800469a:	3b04      	subs	r3, #4
 800469c:	f851 2b04 	ldr.w	r2, [r1], #4
 80046a0:	f843 2f04 	str.w	r2, [r3, #4]!
 80046a4:	458e      	cmp	lr, r1
 80046a6:	d8f9      	bhi.n	800469c <__lshift+0x94>
 80046a8:	e7e6      	b.n	8004678 <__lshift+0x70>

080046aa <__mcmp>:
 80046aa:	6903      	ldr	r3, [r0, #16]
 80046ac:	690a      	ldr	r2, [r1, #16]
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	b530      	push	{r4, r5, lr}
 80046b2:	d10c      	bne.n	80046ce <__mcmp+0x24>
 80046b4:	0092      	lsls	r2, r2, #2
 80046b6:	3014      	adds	r0, #20
 80046b8:	3114      	adds	r1, #20
 80046ba:	1884      	adds	r4, r0, r2
 80046bc:	4411      	add	r1, r2
 80046be:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80046c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80046c6:	4295      	cmp	r5, r2
 80046c8:	d003      	beq.n	80046d2 <__mcmp+0x28>
 80046ca:	d305      	bcc.n	80046d8 <__mcmp+0x2e>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	bd30      	pop	{r4, r5, pc}
 80046d2:	42a0      	cmp	r0, r4
 80046d4:	d3f3      	bcc.n	80046be <__mcmp+0x14>
 80046d6:	e7fa      	b.n	80046ce <__mcmp+0x24>
 80046d8:	f04f 33ff 	mov.w	r3, #4294967295
 80046dc:	e7f7      	b.n	80046ce <__mcmp+0x24>

080046de <__mdiff>:
 80046de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e2:	460d      	mov	r5, r1
 80046e4:	4607      	mov	r7, r0
 80046e6:	4611      	mov	r1, r2
 80046e8:	4628      	mov	r0, r5
 80046ea:	4614      	mov	r4, r2
 80046ec:	f7ff ffdd 	bl	80046aa <__mcmp>
 80046f0:	1e06      	subs	r6, r0, #0
 80046f2:	d108      	bne.n	8004706 <__mdiff+0x28>
 80046f4:	4631      	mov	r1, r6
 80046f6:	4638      	mov	r0, r7
 80046f8:	f7ff fdcd 	bl	8004296 <_Balloc>
 80046fc:	2301      	movs	r3, #1
 80046fe:	6103      	str	r3, [r0, #16]
 8004700:	6146      	str	r6, [r0, #20]
 8004702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004706:	bfa4      	itt	ge
 8004708:	4623      	movge	r3, r4
 800470a:	462c      	movge	r4, r5
 800470c:	4638      	mov	r0, r7
 800470e:	6861      	ldr	r1, [r4, #4]
 8004710:	bfa6      	itte	ge
 8004712:	461d      	movge	r5, r3
 8004714:	2600      	movge	r6, #0
 8004716:	2601      	movlt	r6, #1
 8004718:	f7ff fdbd 	bl	8004296 <_Balloc>
 800471c:	692b      	ldr	r3, [r5, #16]
 800471e:	60c6      	str	r6, [r0, #12]
 8004720:	6926      	ldr	r6, [r4, #16]
 8004722:	f105 0914 	add.w	r9, r5, #20
 8004726:	f104 0214 	add.w	r2, r4, #20
 800472a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800472e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004732:	f100 0514 	add.w	r5, r0, #20
 8004736:	f04f 0c00 	mov.w	ip, #0
 800473a:	f852 ab04 	ldr.w	sl, [r2], #4
 800473e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004742:	fa1c f18a 	uxtah	r1, ip, sl
 8004746:	b2a3      	uxth	r3, r4
 8004748:	1ac9      	subs	r1, r1, r3
 800474a:	0c23      	lsrs	r3, r4, #16
 800474c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004750:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004754:	b289      	uxth	r1, r1
 8004756:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800475a:	45c8      	cmp	r8, r9
 800475c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004760:	4696      	mov	lr, r2
 8004762:	f845 3b04 	str.w	r3, [r5], #4
 8004766:	d8e8      	bhi.n	800473a <__mdiff+0x5c>
 8004768:	45be      	cmp	lr, r7
 800476a:	d305      	bcc.n	8004778 <__mdiff+0x9a>
 800476c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004770:	b18b      	cbz	r3, 8004796 <__mdiff+0xb8>
 8004772:	6106      	str	r6, [r0, #16]
 8004774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004778:	f85e 1b04 	ldr.w	r1, [lr], #4
 800477c:	fa1c f381 	uxtah	r3, ip, r1
 8004780:	141a      	asrs	r2, r3, #16
 8004782:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004786:	b29b      	uxth	r3, r3
 8004788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800478c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004790:	f845 3b04 	str.w	r3, [r5], #4
 8004794:	e7e8      	b.n	8004768 <__mdiff+0x8a>
 8004796:	3e01      	subs	r6, #1
 8004798:	e7e8      	b.n	800476c <__mdiff+0x8e>

0800479a <__d2b>:
 800479a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800479e:	460e      	mov	r6, r1
 80047a0:	2101      	movs	r1, #1
 80047a2:	ec59 8b10 	vmov	r8, r9, d0
 80047a6:	4615      	mov	r5, r2
 80047a8:	f7ff fd75 	bl	8004296 <_Balloc>
 80047ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80047b0:	4607      	mov	r7, r0
 80047b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047b6:	bb34      	cbnz	r4, 8004806 <__d2b+0x6c>
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	f1b8 0f00 	cmp.w	r8, #0
 80047be:	d027      	beq.n	8004810 <__d2b+0x76>
 80047c0:	a802      	add	r0, sp, #8
 80047c2:	f840 8d08 	str.w	r8, [r0, #-8]!
 80047c6:	f7ff fe0b 	bl	80043e0 <__lo0bits>
 80047ca:	9900      	ldr	r1, [sp, #0]
 80047cc:	b1f0      	cbz	r0, 800480c <__d2b+0x72>
 80047ce:	9a01      	ldr	r2, [sp, #4]
 80047d0:	f1c0 0320 	rsb	r3, r0, #32
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	430b      	orrs	r3, r1
 80047da:	40c2      	lsrs	r2, r0
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	9201      	str	r2, [sp, #4]
 80047e0:	9b01      	ldr	r3, [sp, #4]
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf14      	ite	ne
 80047e8:	2102      	movne	r1, #2
 80047ea:	2101      	moveq	r1, #1
 80047ec:	6139      	str	r1, [r7, #16]
 80047ee:	b1c4      	cbz	r4, 8004822 <__d2b+0x88>
 80047f0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80047f4:	4404      	add	r4, r0
 80047f6:	6034      	str	r4, [r6, #0]
 80047f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80047fc:	6028      	str	r0, [r5, #0]
 80047fe:	4638      	mov	r0, r7
 8004800:	b003      	add	sp, #12
 8004802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800480a:	e7d5      	b.n	80047b8 <__d2b+0x1e>
 800480c:	6179      	str	r1, [r7, #20]
 800480e:	e7e7      	b.n	80047e0 <__d2b+0x46>
 8004810:	a801      	add	r0, sp, #4
 8004812:	f7ff fde5 	bl	80043e0 <__lo0bits>
 8004816:	9b01      	ldr	r3, [sp, #4]
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	2101      	movs	r1, #1
 800481c:	6139      	str	r1, [r7, #16]
 800481e:	3020      	adds	r0, #32
 8004820:	e7e5      	b.n	80047ee <__d2b+0x54>
 8004822:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004826:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800482a:	6030      	str	r0, [r6, #0]
 800482c:	6918      	ldr	r0, [r3, #16]
 800482e:	f7ff fdb8 	bl	80043a2 <__hi0bits>
 8004832:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004836:	e7e1      	b.n	80047fc <__d2b+0x62>

08004838 <_calloc_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	fb02 f401 	mul.w	r4, r2, r1
 800483e:	4621      	mov	r1, r4
 8004840:	f000 f808 	bl	8004854 <_malloc_r>
 8004844:	4605      	mov	r5, r0
 8004846:	b118      	cbz	r0, 8004850 <_calloc_r+0x18>
 8004848:	4622      	mov	r2, r4
 800484a:	2100      	movs	r1, #0
 800484c:	f000 f882 	bl	8004954 <memset>
 8004850:	4628      	mov	r0, r5
 8004852:	bd38      	pop	{r3, r4, r5, pc}

08004854 <_malloc_r>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	1ccd      	adds	r5, r1, #3
 8004858:	f025 0503 	bic.w	r5, r5, #3
 800485c:	3508      	adds	r5, #8
 800485e:	2d0c      	cmp	r5, #12
 8004860:	bf38      	it	cc
 8004862:	250c      	movcc	r5, #12
 8004864:	2d00      	cmp	r5, #0
 8004866:	4606      	mov	r6, r0
 8004868:	db01      	blt.n	800486e <_malloc_r+0x1a>
 800486a:	42a9      	cmp	r1, r5
 800486c:	d903      	bls.n	8004876 <_malloc_r+0x22>
 800486e:	230c      	movs	r3, #12
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	2000      	movs	r0, #0
 8004874:	bd70      	pop	{r4, r5, r6, pc}
 8004876:	f000 f875 	bl	8004964 <__malloc_lock>
 800487a:	4a23      	ldr	r2, [pc, #140]	; (8004908 <_malloc_r+0xb4>)
 800487c:	6814      	ldr	r4, [r2, #0]
 800487e:	4621      	mov	r1, r4
 8004880:	b991      	cbnz	r1, 80048a8 <_malloc_r+0x54>
 8004882:	4c22      	ldr	r4, [pc, #136]	; (800490c <_malloc_r+0xb8>)
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	b91b      	cbnz	r3, 8004890 <_malloc_r+0x3c>
 8004888:	4630      	mov	r0, r6
 800488a:	f000 f841 	bl	8004910 <_sbrk_r>
 800488e:	6020      	str	r0, [r4, #0]
 8004890:	4629      	mov	r1, r5
 8004892:	4630      	mov	r0, r6
 8004894:	f000 f83c 	bl	8004910 <_sbrk_r>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d126      	bne.n	80048ea <_malloc_r+0x96>
 800489c:	230c      	movs	r3, #12
 800489e:	6033      	str	r3, [r6, #0]
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 f860 	bl	8004966 <__malloc_unlock>
 80048a6:	e7e4      	b.n	8004872 <_malloc_r+0x1e>
 80048a8:	680b      	ldr	r3, [r1, #0]
 80048aa:	1b5b      	subs	r3, r3, r5
 80048ac:	d41a      	bmi.n	80048e4 <_malloc_r+0x90>
 80048ae:	2b0b      	cmp	r3, #11
 80048b0:	d90f      	bls.n	80048d2 <_malloc_r+0x7e>
 80048b2:	600b      	str	r3, [r1, #0]
 80048b4:	50cd      	str	r5, [r1, r3]
 80048b6:	18cc      	adds	r4, r1, r3
 80048b8:	4630      	mov	r0, r6
 80048ba:	f000 f854 	bl	8004966 <__malloc_unlock>
 80048be:	f104 000b 	add.w	r0, r4, #11
 80048c2:	1d23      	adds	r3, r4, #4
 80048c4:	f020 0007 	bic.w	r0, r0, #7
 80048c8:	1ac3      	subs	r3, r0, r3
 80048ca:	d01b      	beq.n	8004904 <_malloc_r+0xb0>
 80048cc:	425a      	negs	r2, r3
 80048ce:	50e2      	str	r2, [r4, r3]
 80048d0:	bd70      	pop	{r4, r5, r6, pc}
 80048d2:	428c      	cmp	r4, r1
 80048d4:	bf0d      	iteet	eq
 80048d6:	6863      	ldreq	r3, [r4, #4]
 80048d8:	684b      	ldrne	r3, [r1, #4]
 80048da:	6063      	strne	r3, [r4, #4]
 80048dc:	6013      	streq	r3, [r2, #0]
 80048de:	bf18      	it	ne
 80048e0:	460c      	movne	r4, r1
 80048e2:	e7e9      	b.n	80048b8 <_malloc_r+0x64>
 80048e4:	460c      	mov	r4, r1
 80048e6:	6849      	ldr	r1, [r1, #4]
 80048e8:	e7ca      	b.n	8004880 <_malloc_r+0x2c>
 80048ea:	1cc4      	adds	r4, r0, #3
 80048ec:	f024 0403 	bic.w	r4, r4, #3
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d005      	beq.n	8004900 <_malloc_r+0xac>
 80048f4:	1a21      	subs	r1, r4, r0
 80048f6:	4630      	mov	r0, r6
 80048f8:	f000 f80a 	bl	8004910 <_sbrk_r>
 80048fc:	3001      	adds	r0, #1
 80048fe:	d0cd      	beq.n	800489c <_malloc_r+0x48>
 8004900:	6025      	str	r5, [r4, #0]
 8004902:	e7d9      	b.n	80048b8 <_malloc_r+0x64>
 8004904:	bd70      	pop	{r4, r5, r6, pc}
 8004906:	bf00      	nop
 8004908:	200001f8 	.word	0x200001f8
 800490c:	200001fc 	.word	0x200001fc

08004910 <_sbrk_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4c06      	ldr	r4, [pc, #24]	; (800492c <_sbrk_r+0x1c>)
 8004914:	2300      	movs	r3, #0
 8004916:	4605      	mov	r5, r0
 8004918:	4608      	mov	r0, r1
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	f000 f832 	bl	8004984 <_sbrk>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d102      	bne.n	800492a <_sbrk_r+0x1a>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	b103      	cbz	r3, 800492a <_sbrk_r+0x1a>
 8004928:	602b      	str	r3, [r5, #0]
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	2000024c 	.word	0x2000024c

08004930 <__ascii_mbtowc>:
 8004930:	b082      	sub	sp, #8
 8004932:	b901      	cbnz	r1, 8004936 <__ascii_mbtowc+0x6>
 8004934:	a901      	add	r1, sp, #4
 8004936:	b142      	cbz	r2, 800494a <__ascii_mbtowc+0x1a>
 8004938:	b14b      	cbz	r3, 800494e <__ascii_mbtowc+0x1e>
 800493a:	7813      	ldrb	r3, [r2, #0]
 800493c:	600b      	str	r3, [r1, #0]
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	1c10      	adds	r0, r2, #0
 8004942:	bf18      	it	ne
 8004944:	2001      	movne	r0, #1
 8004946:	b002      	add	sp, #8
 8004948:	4770      	bx	lr
 800494a:	4610      	mov	r0, r2
 800494c:	e7fb      	b.n	8004946 <__ascii_mbtowc+0x16>
 800494e:	f06f 0001 	mvn.w	r0, #1
 8004952:	e7f8      	b.n	8004946 <__ascii_mbtowc+0x16>

08004954 <memset>:
 8004954:	4402      	add	r2, r0
 8004956:	4603      	mov	r3, r0
 8004958:	4293      	cmp	r3, r2
 800495a:	d100      	bne.n	800495e <memset+0xa>
 800495c:	4770      	bx	lr
 800495e:	f803 1b01 	strb.w	r1, [r3], #1
 8004962:	e7f9      	b.n	8004958 <memset+0x4>

08004964 <__malloc_lock>:
 8004964:	4770      	bx	lr

08004966 <__malloc_unlock>:
 8004966:	4770      	bx	lr

08004968 <__ascii_wctomb>:
 8004968:	b149      	cbz	r1, 800497e <__ascii_wctomb+0x16>
 800496a:	2aff      	cmp	r2, #255	; 0xff
 800496c:	bf85      	ittet	hi
 800496e:	238a      	movhi	r3, #138	; 0x8a
 8004970:	6003      	strhi	r3, [r0, #0]
 8004972:	700a      	strbls	r2, [r1, #0]
 8004974:	f04f 30ff 	movhi.w	r0, #4294967295
 8004978:	bf98      	it	ls
 800497a:	2001      	movls	r0, #1
 800497c:	4770      	bx	lr
 800497e:	4608      	mov	r0, r1
 8004980:	4770      	bx	lr
	...

08004984 <_sbrk>:
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <_sbrk+0x14>)
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	4602      	mov	r2, r0
 800498a:	b909      	cbnz	r1, 8004990 <_sbrk+0xc>
 800498c:	4903      	ldr	r1, [pc, #12]	; (800499c <_sbrk+0x18>)
 800498e:	6019      	str	r1, [r3, #0]
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	4402      	add	r2, r0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	4770      	bx	lr
 8004998:	20000200 	.word	0x20000200
 800499c:	20000250 	.word	0x20000250

080049a0 <_init>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr

080049ac <_fini>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	bf00      	nop
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr
