
2-1. UART Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08004528  08004528  00014528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08004798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000070  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000024c  2000024c  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b78d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000018bf  00000000  00000000  0002b999  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005f8  00000000  00000000  0002d258  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000540  00000000  00000000  0002d850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000030ac  00000000  00000000  0002dd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002250  00000000  00000000  00030e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003308c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001f00  00000000  00000000  00033108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004510 	.word	0x08004510

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08004510 	.word	0x08004510

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_uldivmod>:
 8000af8:	b953      	cbnz	r3, 8000b10 <__aeabi_uldivmod+0x18>
 8000afa:	b94a      	cbnz	r2, 8000b10 <__aeabi_uldivmod+0x18>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bf08      	it	eq
 8000b00:	2800      	cmpeq	r0, #0
 8000b02:	bf1c      	itt	ne
 8000b04:	f04f 31ff 	movne.w	r1, #4294967295
 8000b08:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0c:	f000 b97a 	b.w	8000e04 <__aeabi_idiv0>
 8000b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b18:	f000 f806 	bl	8000b28 <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4770      	bx	lr

08000b28 <__udivmoddi4>:
 8000b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	460d      	mov	r5, r1
 8000b30:	4604      	mov	r4, r0
 8000b32:	9e08      	ldr	r6, [sp, #32]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d151      	bne.n	8000bdc <__udivmoddi4+0xb4>
 8000b38:	428a      	cmp	r2, r1
 8000b3a:	4617      	mov	r7, r2
 8000b3c:	d96d      	bls.n	8000c1a <__udivmoddi4+0xf2>
 8000b3e:	fab2 fe82 	clz	lr, r2
 8000b42:	f1be 0f00 	cmp.w	lr, #0
 8000b46:	d00b      	beq.n	8000b60 <__udivmoddi4+0x38>
 8000b48:	f1ce 0c20 	rsb	ip, lr, #32
 8000b4c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b54:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b58:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b5c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b60:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b64:	0c25      	lsrs	r5, r4, #16
 8000b66:	fbbc f8fa 	udiv	r8, ip, sl
 8000b6a:	fa1f f987 	uxth.w	r9, r7
 8000b6e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b72:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b76:	fb08 f309 	mul.w	r3, r8, r9
 8000b7a:	42ab      	cmp	r3, r5
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x6c>
 8000b7e:	19ed      	adds	r5, r5, r7
 8000b80:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b84:	f080 8123 	bcs.w	8000dce <__udivmoddi4+0x2a6>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	f240 8120 	bls.w	8000dce <__udivmoddi4+0x2a6>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	443d      	add	r5, r7
 8000b94:	1aed      	subs	r5, r5, r3
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b9c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ba0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba4:	fb00 f909 	mul.w	r9, r0, r9
 8000ba8:	45a1      	cmp	r9, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x98>
 8000bac:	19e4      	adds	r4, r4, r7
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 810a 	bcs.w	8000dca <__udivmoddi4+0x2a2>
 8000bb6:	45a1      	cmp	r9, r4
 8000bb8:	f240 8107 	bls.w	8000dca <__udivmoddi4+0x2a2>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	eba4 0409 	sub.w	r4, r4, r9
 8000bc4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d061      	beq.n	8000c92 <__udivmoddi4+0x16a>
 8000bce:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	6034      	str	r4, [r6, #0]
 8000bd6:	6073      	str	r3, [r6, #4]
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0xc8>
 8000be0:	2e00      	cmp	r6, #0
 8000be2:	d054      	beq.n	8000c8e <__udivmoddi4+0x166>
 8000be4:	2100      	movs	r1, #0
 8000be6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bea:	4608      	mov	r0, r1
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	fab3 f183 	clz	r1, r3
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	f040 808e 	bne.w	8000d16 <__udivmoddi4+0x1ee>
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xdc>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80fa 	bhi.w	8000df8 <__udivmoddi4+0x2d0>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb65 0503 	sbc.w	r5, r5, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	46ac      	mov	ip, r5
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d03f      	beq.n	8000c92 <__udivmoddi4+0x16a>
 8000c12:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b912      	cbnz	r2, 8000c22 <__udivmoddi4+0xfa>
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c22:	fab7 fe87 	clz	lr, r7
 8000c26:	f1be 0f00 	cmp.w	lr, #0
 8000c2a:	d134      	bne.n	8000c96 <__udivmoddi4+0x16e>
 8000c2c:	1beb      	subs	r3, r5, r7
 8000c2e:	0c3a      	lsrs	r2, r7, #16
 8000c30:	fa1f fc87 	uxth.w	ip, r7
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c3a:	0c25      	lsrs	r5, r4, #16
 8000c3c:	fb02 3318 	mls	r3, r2, r8, r3
 8000c40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c44:	fb0c f308 	mul.w	r3, ip, r8
 8000c48:	42ab      	cmp	r3, r5
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0x134>
 8000c4c:	19ed      	adds	r5, r5, r7
 8000c4e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x132>
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	f200 80d1 	bhi.w	8000dfc <__udivmoddi4+0x2d4>
 8000c5a:	4680      	mov	r8, r0
 8000c5c:	1aed      	subs	r5, r5, r3
 8000c5e:	b2a3      	uxth	r3, r4
 8000c60:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c64:	fb02 5510 	mls	r5, r2, r0, r5
 8000c68:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c6c:	fb0c fc00 	mul.w	ip, ip, r0
 8000c70:	45a4      	cmp	ip, r4
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x15c>
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x15a>
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	f200 80b8 	bhi.w	8000df2 <__udivmoddi4+0x2ca>
 8000c82:	4618      	mov	r0, r3
 8000c84:	eba4 040c 	sub.w	r4, r4, ip
 8000c88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c8c:	e79d      	b.n	8000bca <__udivmoddi4+0xa2>
 8000c8e:	4631      	mov	r1, r6
 8000c90:	4630      	mov	r0, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1ce 0420 	rsb	r4, lr, #32
 8000c9a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c9e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ca2:	fa20 f804 	lsr.w	r8, r0, r4
 8000ca6:	0c3a      	lsrs	r2, r7, #16
 8000ca8:	fa25 f404 	lsr.w	r4, r5, r4
 8000cac:	ea48 0803 	orr.w	r8, r8, r3
 8000cb0:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cb4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cb8:	fb02 4411 	mls	r4, r2, r1, r4
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cc4:	fb01 f30c 	mul.w	r3, r1, ip
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x1bc>
 8000cd0:	19ed      	adds	r5, r5, r7
 8000cd2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cd6:	f080 808a 	bcs.w	8000dee <__udivmoddi4+0x2c6>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	f240 8087 	bls.w	8000dee <__udivmoddi4+0x2c6>
 8000ce0:	3902      	subs	r1, #2
 8000ce2:	443d      	add	r5, r7
 8000ce4:	1aeb      	subs	r3, r5, r3
 8000ce6:	fa1f f588 	uxth.w	r5, r8
 8000cea:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cee:	fb02 3310 	mls	r3, r2, r0, r3
 8000cf2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cf6:	fb00 f30c 	mul.w	r3, r0, ip
 8000cfa:	42ab      	cmp	r3, r5
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1e6>
 8000cfe:	19ed      	adds	r5, r5, r7
 8000d00:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d04:	d26f      	bcs.n	8000de6 <__udivmoddi4+0x2be>
 8000d06:	42ab      	cmp	r3, r5
 8000d08:	d96d      	bls.n	8000de6 <__udivmoddi4+0x2be>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	443d      	add	r5, r7
 8000d0e:	1aeb      	subs	r3, r5, r3
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	e78f      	b.n	8000c36 <__udivmoddi4+0x10e>
 8000d16:	f1c1 0720 	rsb	r7, r1, #32
 8000d1a:	fa22 f807 	lsr.w	r8, r2, r7
 8000d1e:	408b      	lsls	r3, r1
 8000d20:	fa05 f401 	lsl.w	r4, r5, r1
 8000d24:	ea48 0303 	orr.w	r3, r8, r3
 8000d28:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d36:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d3e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d42:	fa1f f883 	uxth.w	r8, r3
 8000d46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d4a:	fb09 f408 	mul.w	r4, r9, r8
 8000d4e:	42ac      	cmp	r4, r5
 8000d50:	fa02 f201 	lsl.w	r2, r2, r1
 8000d54:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x244>
 8000d5a:	18ed      	adds	r5, r5, r3
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d243      	bcs.n	8000dea <__udivmoddi4+0x2c2>
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	d941      	bls.n	8000dea <__udivmoddi4+0x2c2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	441d      	add	r5, r3
 8000d6c:	1b2d      	subs	r5, r5, r4
 8000d6e:	fa1f fe8e 	uxth.w	lr, lr
 8000d72:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d76:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45a0      	cmp	r8, r4
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x26e>
 8000d86:	18e4      	adds	r4, r4, r3
 8000d88:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d8c:	d229      	bcs.n	8000de2 <__udivmoddi4+0x2ba>
 8000d8e:	45a0      	cmp	r8, r4
 8000d90:	d927      	bls.n	8000de2 <__udivmoddi4+0x2ba>
 8000d92:	3802      	subs	r0, #2
 8000d94:	441c      	add	r4, r3
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba4 0408 	sub.w	r4, r4, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	464d      	mov	r5, r9
 8000da8:	d315      	bcc.n	8000dd6 <__udivmoddi4+0x2ae>
 8000daa:	d012      	beq.n	8000dd2 <__udivmoddi4+0x2aa>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x29c>
 8000dae:	ebba 030e 	subs.w	r3, sl, lr
 8000db2:	eb64 0405 	sbc.w	r4, r4, r5
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40cb      	lsrs	r3, r1
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	40cc      	lsrs	r4, r1
 8000dc0:	6037      	str	r7, [r6, #0]
 8000dc2:	6074      	str	r4, [r6, #4]
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e6f8      	b.n	8000bc0 <__udivmoddi4+0x98>
 8000dce:	4690      	mov	r8, r2
 8000dd0:	e6e0      	b.n	8000b94 <__udivmoddi4+0x6c>
 8000dd2:	45c2      	cmp	sl, r8
 8000dd4:	d2ea      	bcs.n	8000dac <__udivmoddi4+0x284>
 8000dd6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dda:	eb69 0503 	sbc.w	r5, r9, r3
 8000dde:	3801      	subs	r0, #1
 8000de0:	e7e4      	b.n	8000dac <__udivmoddi4+0x284>
 8000de2:	4628      	mov	r0, r5
 8000de4:	e7d7      	b.n	8000d96 <__udivmoddi4+0x26e>
 8000de6:	4640      	mov	r0, r8
 8000de8:	e791      	b.n	8000d0e <__udivmoddi4+0x1e6>
 8000dea:	4681      	mov	r9, r0
 8000dec:	e7be      	b.n	8000d6c <__udivmoddi4+0x244>
 8000dee:	4601      	mov	r1, r0
 8000df0:	e778      	b.n	8000ce4 <__udivmoddi4+0x1bc>
 8000df2:	3802      	subs	r0, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	e745      	b.n	8000c84 <__udivmoddi4+0x15c>
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xe6>
 8000dfc:	f1a8 0802 	sub.w	r8, r8, #2
 8000e00:	443d      	add	r5, r7
 8000e02:	e72b      	b.n	8000c5c <__udivmoddi4+0x134>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f90b 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f001 fcb4 	bl	80027a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f915 	bl	800109a <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f8eb 	bl	8001062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000004 	.word	0x20000004
 8000ea8:	20000000 	.word	0x20000000

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	20000204 	.word	0x20000204

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000204 	.word	0x20000204

08000eec <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	da0b      	bge.n	8000f7c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	490d      	ldr	r1, [pc, #52]	; (8000f9c <NVIC_SetPriority+0x4c>)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	3b04      	subs	r3, #4
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7a:	e009      	b.n	8000f90 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <NVIC_SetPriority+0x50>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fea:	2101      	movs	r1, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	1e59      	subs	r1, r3, #1
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff90 	bl	8000f50 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff49 	bl	8000eec <NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff5e 	bl	8000f34 <NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff90 	bl	8000fa4 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5f 	bl	8000f50 <NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffb0 	bl	8001008 <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d106      	bne.n	80010d0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80010ce:	e005      	b.n	80010dc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010d0:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 0304 	bic.w	r3, r3, #4
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010f0:	f000 f802 	bl	80010f8 <HAL_SYSTICK_Callback>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e16b      	b.n	80013fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 815a 	bne.w	80013f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x4a>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b12      	cmp	r3, #18
 8001150:	d123      	bne.n	800119a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	69b9      	ldr	r1, [r7, #24]
 8001196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0203 	and.w	r2, r3, #3
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d00b      	beq.n	80011ee <HAL_GPIO_Init+0xe6>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e2:	2b11      	cmp	r3, #17
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80b4 	beq.w	80013f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4a5f      	ldr	r2, [pc, #380]	; (8001410 <HAL_GPIO_Init+0x308>)
 8001294:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <HAL_GPIO_Init+0x308>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b5c      	ldr	r3, [pc, #368]	; (8001410 <HAL_GPIO_Init+0x308>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012aa:	4a5a      	ldr	r2, [pc, #360]	; (8001414 <HAL_GPIO_Init+0x30c>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_GPIO_Init+0x310>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d02b      	beq.n	800132e <HAL_GPIO_Init+0x226>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a50      	ldr	r2, [pc, #320]	; (800141c <HAL_GPIO_Init+0x314>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d025      	beq.n	800132a <HAL_GPIO_Init+0x222>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x318>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d01f      	beq.n	8001326 <HAL_GPIO_Init+0x21e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x31c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0x21a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x320>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x216>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x324>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x212>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x328>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x20e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_GPIO_Init+0x32c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x20a>
 800130e:	2307      	movs	r3, #7
 8001310:	e00e      	b.n	8001330 <HAL_GPIO_Init+0x228>
 8001312:	2308      	movs	r3, #8
 8001314:	e00c      	b.n	8001330 <HAL_GPIO_Init+0x228>
 8001316:	2306      	movs	r3, #6
 8001318:	e00a      	b.n	8001330 <HAL_GPIO_Init+0x228>
 800131a:	2305      	movs	r3, #5
 800131c:	e008      	b.n	8001330 <HAL_GPIO_Init+0x228>
 800131e:	2304      	movs	r3, #4
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x228>
 8001322:	2303      	movs	r3, #3
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x228>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x228>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x228>
 800132e:	2300      	movs	r3, #0
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001340:	4934      	ldr	r1, [pc, #208]	; (8001414 <HAL_GPIO_Init+0x30c>)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <HAL_GPIO_Init+0x330>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001372:	4a31      	ldr	r2, [pc, #196]	; (8001438 <HAL_GPIO_Init+0x330>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_GPIO_Init+0x330>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <HAL_GPIO_Init+0x330>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <HAL_GPIO_Init+0x330>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <HAL_GPIO_Init+0x330>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_GPIO_Init+0x330>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_GPIO_Init+0x330>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3301      	adds	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	f67f ae90 	bls.w	8001124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001404:	bf00      	nop
 8001406:	3724      	adds	r7, #36	; 0x24
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40021800 	.word	0x40021800
 8001434:	40021c00 	.word	0x40021c00
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e22d      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d075      	beq.n	800157a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	4ba3      	ldr	r3, [pc, #652]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4ba0      	ldr	r3, [pc, #640]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b9d      	ldr	r3, [pc, #628]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b99      	ldr	r3, [pc, #612]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05b      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d157      	bne.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e208      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x74>
 80014d6:	4a91      	ldr	r2, [pc, #580]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	4b90      	ldr	r3, [pc, #576]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4a8b      	ldr	r2, [pc, #556]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	4b8a      	ldr	r3, [pc, #552]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4a88      	ldr	r2, [pc, #544]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	4b87      	ldr	r3, [pc, #540]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 8001508:	4a84      	ldr	r2, [pc, #528]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800150a:	4b84      	ldr	r3, [pc, #528]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4a81      	ldr	r2, [pc, #516]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001516:	4b81      	ldr	r3, [pc, #516]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fcd4 	bl	8000ed4 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fcd0 	bl	8000ed4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1cd      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b76      	ldr	r3, [pc, #472]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xc0>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fcc0 	bl	8000ed4 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fcbc 	bl	8000ed4 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1b9      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b6c      	ldr	r3, [pc, #432]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0xe8>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	4b65      	ldr	r3, [pc, #404]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b62      	ldr	r3, [pc, #392]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b5f      	ldr	r3, [pc, #380]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b5c      	ldr	r3, [pc, #368]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e18d      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4956      	ldr	r1, [pc, #344]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	4b55      	ldr	r3, [pc, #340]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b4f      	ldr	r3, [pc, #316]	; (8001720 <HAL_RCC_OscConfig+0x2b0>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fc75 	bl	8000ed4 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fc71 	bl	8000ed4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e16e      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b46      	ldr	r3, [pc, #280]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4943      	ldr	r1, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800160e:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b3f      	ldr	r3, [pc, #252]	; (8001720 <HAL_RCC_OscConfig+0x2b0>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fc54 	bl	8000ed4 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fc50 	bl	8000ed4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e14d      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d030      	beq.n	80016bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d016      	beq.n	8001690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b30      	ldr	r3, [pc, #192]	; (8001724 <HAL_RCC_OscConfig+0x2b4>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fc34 	bl	8000ed4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fc30 	bl	8000ed4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e12d      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x200>
 800168e:	e015      	b.n	80016bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_RCC_OscConfig+0x2b4>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fc1d 	bl	8000ed4 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fc19 	bl	8000ed4 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e116      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80016b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a0 	beq.w	800180a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10f      	bne.n	80016fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_OscConfig+0x2b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d121      	bne.n	800174a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_RCC_OscConfig+0x2b8>)
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <HAL_RCC_OscConfig+0x2b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff fbdf 	bl	8000ed4 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	e011      	b.n	800173e <HAL_RCC_OscConfig+0x2ce>
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	42470000 	.word	0x42470000
 8001724:	42470e80 	.word	0x42470e80
 8001728:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172c:	f7ff fbd2 	bl	8000ed4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0cf      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173e:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d106      	bne.n	8001760 <HAL_RCC_OscConfig+0x2f0>
 8001752:	4a66      	ldr	r2, [pc, #408]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001754:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6713      	str	r3, [r2, #112]	; 0x70
 800175e:	e01c      	b.n	800179a <HAL_RCC_OscConfig+0x32a>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x312>
 8001768:	4a60      	ldr	r2, [pc, #384]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 800176a:	4b60      	ldr	r3, [pc, #384]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	4a5d      	ldr	r2, [pc, #372]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0x32a>
 8001782:	4a5a      	ldr	r2, [pc, #360]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6713      	str	r3, [r2, #112]	; 0x70
 800178e:	4a57      	ldr	r2, [pc, #348]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001790:	4b56      	ldr	r3, [pc, #344]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d015      	beq.n	80017ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff fb97 	bl	8000ed4 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff fb93 	bl	8000ed4 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e08e      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0ee      	beq.n	80017aa <HAL_RCC_OscConfig+0x33a>
 80017cc:	e014      	b.n	80017f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fb81 	bl	8000ed4 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff fb7d 	bl	8000ed4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e078      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	4b3f      	ldr	r3, [pc, #252]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1ee      	bne.n	80017d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d105      	bne.n	800180a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fe:	4a3b      	ldr	r2, [pc, #236]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001800:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d064      	beq.n	80018dc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001812:	4b36      	ldr	r3, [pc, #216]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d05c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d141      	bne.n	80018aa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <HAL_RCC_OscConfig+0x480>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fb52 	bl	8000ed4 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fb4e 	bl	8000ed4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e04b      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001852:	4926      	ldr	r1, [pc, #152]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	019b      	lsls	r3, r3, #6
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	3b01      	subs	r3, #1
 800186e:	041b      	lsls	r3, r3, #16
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	061b      	lsls	r3, r3, #24
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_RCC_OscConfig+0x480>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb27 	bl	8000ed4 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fb23 	bl	8000ed4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e020      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x41a>
 80018a8:	e018      	b.n	80018dc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_RCC_OscConfig+0x480>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb10 	bl	8000ed4 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fb0c 	bl	8000ed4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e009      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_RCC_OscConfig+0x47c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x448>
 80018d6:	e001      	b.n	80018dc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40007000 	.word	0x40007000
 80018ec:	40023800 	.word	0x40023800
 80018f0:	42470060 	.word	0x42470060

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0ca      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 020f 	and.w	r2, r3, #15
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d20c      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b62      	ldr	r3, [pc, #392]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 020f 	and.w	r2, r3, #15
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b6      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4a58      	ldr	r2, [pc, #352]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	4b58      	ldr	r3, [pc, #352]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4a52      	ldr	r2, [pc, #328]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	4b52      	ldr	r3, [pc, #328]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800196a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	494f      	ldr	r1, [pc, #316]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	4b4f      	ldr	r3, [pc, #316]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d044      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b46      	ldr	r3, [pc, #280]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d119      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e07d      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06d      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e065      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4936      	ldr	r1, [pc, #216]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 0203 	bic.w	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff fa76 	bl	8000ed4 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff fa72 	bl	8000ed4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e04d      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 020f 	and.w	r2, r3, #15
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d90c      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 020f 	and.w	r2, r3, #15
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e030      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4918      	ldr	r1, [pc, #96]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a66:	4911      	ldr	r1, [pc, #68]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7a:	f000 f81d 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4601      	mov	r1, r0
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff f9d8 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	08004548 	.word	0x08004548
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001abc:	b08f      	sub	sp, #60	; 0x3c
 8001abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d007      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x34>
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d008      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f040 80b2 	bne.w	8001c4a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae6:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001aea:	e0b1      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aec:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001af0:	e0ae      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af2:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d04e      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b08:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	f04f 0400 	mov.w	r4, #0
 8001b12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	ea01 0103 	and.w	r1, r1, r3
 8001b1e:	ea02 0204 	and.w	r2, r2, r4
 8001b22:	460b      	mov	r3, r1
 8001b24:	4614      	mov	r4, r2
 8001b26:	0160      	lsls	r0, r4, #5
 8001b28:	6278      	str	r0, [r7, #36]	; 0x24
 8001b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001b30:	6278      	str	r0, [r7, #36]	; 0x24
 8001b32:	015b      	lsls	r3, r3, #5
 8001b34:	623b      	str	r3, [r7, #32]
 8001b36:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001b3a:	1a5b      	subs	r3, r3, r1
 8001b3c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b40:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001b44:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001b48:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001b4c:	ebb8 0803 	subs.w	r8, r8, r3
 8001b50:	eb69 0904 	sbc.w	r9, r9, r4
 8001b54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b6c:	eb18 0801 	adds.w	r8, r8, r1
 8001b70:	eb49 0902 	adc.w	r9, r9, r2
 8001b74:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b8c:	4640      	mov	r0, r8
 8001b8e:	4649      	mov	r1, r9
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	f04f 0400 	mov.w	r4, #0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4623      	mov	r3, r4
 8001b9a:	f7fe ffad 	bl	8000af8 <__aeabi_uldivmod>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460c      	mov	r4, r1
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba4:	e043      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	099b      	lsrs	r3, r3, #6
 8001bac:	f04f 0400 	mov.w	r4, #0
 8001bb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	ea01 0103 	and.w	r1, r1, r3
 8001bbc:	ea02 0204 	and.w	r2, r2, r4
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4614      	mov	r4, r2
 8001bc4:	0160      	lsls	r0, r4, #5
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	015b      	lsls	r3, r3, #5
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bd8:	1a5b      	subs	r3, r3, r1
 8001bda:	eb64 0402 	sbc.w	r4, r4, r2
 8001bde:	01a6      	lsls	r6, r4, #6
 8001be0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001be4:	019d      	lsls	r5, r3, #6
 8001be6:	1aed      	subs	r5, r5, r3
 8001be8:	eb66 0604 	sbc.w	r6, r6, r4
 8001bec:	00f3      	lsls	r3, r6, #3
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	00eb      	lsls	r3, r5, #3
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001c00:	186d      	adds	r5, r5, r1
 8001c02:	eb46 0602 	adc.w	r6, r6, r2
 8001c06:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001c0a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001c0e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001c12:	4655      	mov	r5, sl
 8001c14:	465e      	mov	r6, fp
 8001c16:	4628      	mov	r0, r5
 8001c18:	4631      	mov	r1, r6
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	f04f 0400 	mov.w	r4, #0
 8001c20:	461a      	mov	r2, r3
 8001c22:	4623      	mov	r3, r4
 8001c24:	f7fe ff68 	bl	8000af8 <__aeabi_uldivmod>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c48:	e002      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	373c      	adds	r7, #60	; 0x3c
 8001c56:	46bd      	mov	sp, r7
 8001c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	00f42400 	.word	0x00f42400
 8001c64:	007a1200 	.word	0x007a1200

08001c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008

08001c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c84:	f7ff fff0 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001c88:	4601      	mov	r1, r0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0a9b      	lsrs	r3, r3, #10
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	08004558 	.word	0x08004558

08001ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cac:	f7ff ffdc 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	0b5b      	lsrs	r3, r3, #13
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4a03      	ldr	r2, [pc, #12]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	08004558 	.word	0x08004558

08001cd0 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e03f      	b.n	8001d62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fe3c 	bl	8002974 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	68d2      	ldr	r2, [r2, #12]
 8001d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d12:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f9b1 	bl	800207c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	6912      	ldr	r2, [r2, #16]
 8001d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	6952      	ldr	r2, [r2, #20]
 8001d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d38:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	68d2      	ldr	r2, [r2, #12]
 8001d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d48:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b088      	sub	sp, #32
 8001d6e:	af02      	add	r7, sp, #8
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	f040 8082 	bne.w	8001e90 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_UART_Transmit+0x2e>
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e07a      	b.n	8001e92 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_UART_Transmit+0x40>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e073      	b.n	8001e92 <HAL_UART_Transmit+0x128>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2221      	movs	r2, #33	; 0x21
 8001dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f888 	bl	8000ed4 <HAL_GetTick>
 8001dc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	88fa      	ldrh	r2, [r7, #6]
 8001dca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	88fa      	ldrh	r2, [r7, #6]
 8001dd0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001dd2:	e041      	b.n	8001e58 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dea:	d121      	bne.n	8001e30 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2200      	movs	r2, #0
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f8f5 	bl	8001fe6 <UART_WaitOnFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e045      	b.n	8001e92 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	8812      	ldrh	r2, [r2, #0]
 8001e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e16:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d103      	bne.n	8001e28 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3302      	adds	r3, #2
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	e017      	b.n	8001e58 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	e013      	b.n	8001e58 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2200      	movs	r2, #0
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f8d3 	bl	8001fe6 <UART_WaitOnFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e023      	b.n	8001e92 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1c59      	adds	r1, r3, #1
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1b8      	bne.n	8001dd4 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2140      	movs	r1, #64	; 0x40
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f8ba 	bl	8001fe6 <UART_WaitOnFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e00a      	b.n	8001e92 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b088      	sub	sp, #32
 8001e9e:	af02      	add	r7, sp, #8
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	f040 8090 	bne.w	8001fdc <HAL_UART_Receive+0x142>
  { 
    if((pData == NULL ) || (Size == 0)) 
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_UART_Receive+0x2e>
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e088      	b.n	8001fde <HAL_UART_Receive+0x144>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_Receive+0x40>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e081      	b.n	8001fde <HAL_UART_Receive+0x144>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2222      	movs	r2, #34	; 0x22
 8001eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ef0:	f7fe fff0 	bl	8000ed4 <HAL_GetTick>
 8001ef4:	6178      	str	r0, [r7, #20]
        
    huart->RxXferSize = Size; 
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	88fa      	ldrh	r2, [r7, #6]
 8001efa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8001f02:	e05c      	b.n	8001fbe <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1a:	d12b      	bne.n	8001f74 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2200      	movs	r2, #0
 8001f24:	2120      	movs	r1, #32
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f85d 	bl	8001fe6 <UART_WaitOnFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_UART_Receive+0x9c>
        { 
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e053      	b.n	8001fde <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*) pData;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3302      	adds	r3, #2
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	e030      	b.n	8001fbe <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	e024      	b.n	8001fbe <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f831 	bl	8001fe6 <UART_WaitOnFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_UART_Receive+0xf4>
        { 
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e027      	b.n	8001fde <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d108      	bne.n	8001fa8 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	6852      	ldr	r2, [r2, #4]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e00a      	b.n	8001fbe <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	6852      	ldr	r2, [r2, #4]
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d19d      	bne.n	8001f04 <HAL_UART_Receive+0x6a>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;   
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001ff6:	e02c      	b.n	8002052 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d028      	beq.n	8002052 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <UART_WaitOnFlagUntilTimeout+0x30>
 8002006:	f7fe ff65 	bl	8000ed4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	429a      	cmp	r2, r3
 8002014:	d91d      	bls.n	8002052 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	68d2      	ldr	r2, [r2, #12]
 8002020:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002024:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	6952      	ldr	r2, [r2, #20]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e00f      	b.n	8002072 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	bf0c      	ite	eq
 8002062:	2301      	moveq	r3, #1
 8002064:	2300      	movne	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	429a      	cmp	r2, r3
 800206e:	d0c3      	beq.n	8001ff8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002096:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80020b8:	f023 030c 	bic.w	r3, r3, #12
 80020bc:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210c:	f040 80e4 	bne.w	80022d8 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4aab      	ldr	r2, [pc, #684]	; (80023c4 <UART_SetConfig+0x348>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <UART_SetConfig+0xa8>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4aaa      	ldr	r2, [pc, #680]	; (80023c8 <UART_SetConfig+0x34c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d16c      	bne.n	80021fe <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681c      	ldr	r4, [r3, #0]
 8002128:	f7ff fdbe 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 800212c:	4602      	mov	r2, r0
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	009a      	lsls	r2, r3, #2
 8002136:	441a      	add	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4aa2      	ldr	r2, [pc, #648]	; (80023cc <UART_SetConfig+0x350>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	011d      	lsls	r5, r3, #4
 800214c:	f7ff fdac 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 8002150:	4602      	mov	r2, r0
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009a      	lsls	r2, r3, #2
 800215a:	441a      	add	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fbb2 f6f3 	udiv	r6, r2, r3
 8002166:	f7ff fd9f 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 800216a:	4602      	mov	r2, r0
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	009a      	lsls	r2, r3, #2
 8002174:	441a      	add	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	4a92      	ldr	r2, [pc, #584]	; (80023cc <UART_SetConfig+0x350>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2264      	movs	r2, #100	; 0x64
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	1af3      	subs	r3, r6, r3
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	3332      	adds	r3, #50	; 0x32
 8002194:	4a8d      	ldr	r2, [pc, #564]	; (80023cc <UART_SetConfig+0x350>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021a2:	441d      	add	r5, r3
 80021a4:	f7ff fd80 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009a      	lsls	r2, r3, #2
 80021b2:	441a      	add	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80021be:	f7ff fd73 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009a      	lsls	r2, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	4a7c      	ldr	r2, [pc, #496]	; (80023cc <UART_SetConfig+0x350>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2264      	movs	r2, #100	; 0x64
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	1af3      	subs	r3, r6, r3
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	3332      	adds	r3, #50	; 0x32
 80021ec:	4a77      	ldr	r2, [pc, #476]	; (80023cc <UART_SetConfig+0x350>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	442b      	add	r3, r5
 80021fa:	60a3      	str	r3, [r4, #8]
 80021fc:	e154      	b.n	80024a8 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681c      	ldr	r4, [r3, #0]
 8002202:	f7ff fd3d 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8002206:	4602      	mov	r2, r0
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	009a      	lsls	r2, r3, #2
 8002210:	441a      	add	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	4a6b      	ldr	r2, [pc, #428]	; (80023cc <UART_SetConfig+0x350>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	011d      	lsls	r5, r3, #4
 8002226:	f7ff fd2b 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 800222a:	4602      	mov	r2, r0
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009a      	lsls	r2, r3, #2
 8002234:	441a      	add	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002240:	f7ff fd1e 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8002244:	4602      	mov	r2, r0
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009a      	lsls	r2, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4a5c      	ldr	r2, [pc, #368]	; (80023cc <UART_SetConfig+0x350>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	2264      	movs	r2, #100	; 0x64
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	1af3      	subs	r3, r6, r3
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	3332      	adds	r3, #50	; 0x32
 800226e:	4a57      	ldr	r2, [pc, #348]	; (80023cc <UART_SetConfig+0x350>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800227c:	441d      	add	r5, r3
 800227e:	f7ff fcff 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8002282:	4602      	mov	r2, r0
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	009a      	lsls	r2, r3, #2
 800228c:	441a      	add	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fbb2 f6f3 	udiv	r6, r2, r3
 8002298:	f7ff fcf2 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 800229c:	4602      	mov	r2, r0
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	009a      	lsls	r2, r3, #2
 80022a6:	441a      	add	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4a46      	ldr	r2, [pc, #280]	; (80023cc <UART_SetConfig+0x350>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	2264      	movs	r2, #100	; 0x64
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	1af3      	subs	r3, r6, r3
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	3332      	adds	r3, #50	; 0x32
 80022c6:	4a41      	ldr	r2, [pc, #260]	; (80023cc <UART_SetConfig+0x350>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	442b      	add	r3, r5
 80022d4:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80022d6:	e0e7      	b.n	80024a8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a39      	ldr	r2, [pc, #228]	; (80023c4 <UART_SetConfig+0x348>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <UART_SetConfig+0x270>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a38      	ldr	r2, [pc, #224]	; (80023c8 <UART_SetConfig+0x34c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d171      	bne.n	80023d0 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681c      	ldr	r4, [r3, #0]
 80022f0:	f7ff fcda 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	009a      	lsls	r2, r3, #2
 80022fe:	441a      	add	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4a30      	ldr	r2, [pc, #192]	; (80023cc <UART_SetConfig+0x350>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	011d      	lsls	r5, r3, #4
 8002314:	f7ff fcc8 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 8002318:	4602      	mov	r2, r0
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	009a      	lsls	r2, r3, #2
 8002322:	441a      	add	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fbb2 f6f3 	udiv	r6, r2, r3
 800232e:	f7ff fcbb 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 8002332:	4602      	mov	r2, r0
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	009a      	lsls	r2, r3, #2
 800233c:	441a      	add	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	4a20      	ldr	r2, [pc, #128]	; (80023cc <UART_SetConfig+0x350>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2264      	movs	r2, #100	; 0x64
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	1af3      	subs	r3, r6, r3
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	3332      	adds	r3, #50	; 0x32
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <UART_SetConfig+0x350>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002368:	441d      	add	r5, r3
 800236a:	f7ff fc9d 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 800236e:	4602      	mov	r2, r0
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	009a      	lsls	r2, r3, #2
 8002378:	441a      	add	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fbb2 f6f3 	udiv	r6, r2, r3
 8002384:	f7ff fc90 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 8002388:	4602      	mov	r2, r0
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	009a      	lsls	r2, r3, #2
 8002392:	441a      	add	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <UART_SetConfig+0x350>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	2264      	movs	r2, #100	; 0x64
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	1af3      	subs	r3, r6, r3
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	3332      	adds	r3, #50	; 0x32
 80023b2:	4a06      	ldr	r2, [pc, #24]	; (80023cc <UART_SetConfig+0x350>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	442b      	add	r3, r5
 80023c0:	60a3      	str	r3, [r4, #8]
 80023c2:	e071      	b.n	80024a8 <UART_SetConfig+0x42c>
 80023c4:	40011000 	.word	0x40011000
 80023c8:	40011400 	.word	0x40011400
 80023cc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681c      	ldr	r4, [r3, #0]
 80023d4:	f7ff fc54 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	009a      	lsls	r2, r3, #2
 80023e2:	441a      	add	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4a30      	ldr	r2, [pc, #192]	; (80024b0 <UART_SetConfig+0x434>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	011d      	lsls	r5, r3, #4
 80023f8:	f7ff fc42 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	441a      	add	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002412:	f7ff fc35 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8002416:	4602      	mov	r2, r0
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	009a      	lsls	r2, r3, #2
 8002420:	441a      	add	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <UART_SetConfig+0x434>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2264      	movs	r2, #100	; 0x64
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	1af3      	subs	r3, r6, r3
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	3332      	adds	r3, #50	; 0x32
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <UART_SetConfig+0x434>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244c:	441d      	add	r5, r3
 800244e:	f7ff fc17 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8002452:	4602      	mov	r2, r0
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009a      	lsls	r2, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb2 f6f3 	udiv	r6, r2, r3
 8002468:	f7ff fc0a 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 800246c:	4602      	mov	r2, r0
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	009a      	lsls	r2, r3, #2
 8002476:	441a      	add	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <UART_SetConfig+0x434>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	2264      	movs	r2, #100	; 0x64
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	1af3      	subs	r3, r6, r3
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	3332      	adds	r3, #50	; 0x32
 8002496:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <UART_SetConfig+0x434>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	442b      	add	r3, r5
 80024a4:	60a3      	str	r3, [r4, #8]
}
 80024a6:	e7ff      	b.n	80024a8 <UART_SetConfig+0x42c>
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b0:	51eb851f 	.word	0x51eb851f

080024b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4a54      	ldr	r2, [pc, #336]	; (8002610 <MX_GPIO_Init+0x15c>)
 80024c0:	4b53      	ldr	r3, [pc, #332]	; (8002610 <MX_GPIO_Init+0x15c>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	f043 0310 	orr.w	r3, r3, #16
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <MX_GPIO_Init+0x15c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4a4d      	ldr	r2, [pc, #308]	; (8002610 <MX_GPIO_Init+0x15c>)
 80024dc:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <MX_GPIO_Init+0x15c>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <MX_GPIO_Init+0x15c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4a46      	ldr	r2, [pc, #280]	; (8002610 <MX_GPIO_Init+0x15c>)
 80024f8:	4b45      	ldr	r3, [pc, #276]	; (8002610 <MX_GPIO_Init+0x15c>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b43      	ldr	r3, [pc, #268]	; (8002610 <MX_GPIO_Init+0x15c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	4a3f      	ldr	r2, [pc, #252]	; (8002610 <MX_GPIO_Init+0x15c>)
 8002514:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <MX_GPIO_Init+0x15c>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b3c      	ldr	r3, [pc, #240]	; (8002610 <MX_GPIO_Init+0x15c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	4a38      	ldr	r2, [pc, #224]	; (8002610 <MX_GPIO_Init+0x15c>)
 8002530:	4b37      	ldr	r3, [pc, #220]	; (8002610 <MX_GPIO_Init+0x15c>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b35      	ldr	r3, [pc, #212]	; (8002610 <MX_GPIO_Init+0x15c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8002546:	2200      	movs	r2, #0
 8002548:	2121      	movs	r1, #33	; 0x21
 800254a:	4832      	ldr	r0, [pc, #200]	; (8002614 <MX_GPIO_Init+0x160>)
 800254c:	f7fe ff76 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002550:	2200      	movs	r2, #0
 8002552:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002556:	4830      	ldr	r0, [pc, #192]	; (8002618 <MX_GPIO_Init+0x164>)
 8002558:	f7fe ff70 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	482e      	ldr	r0, [pc, #184]	; (800261c <MX_GPIO_Init+0x168>)
 8002562:	f7fe ff6b 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002566:	2308      	movs	r3, #8
 8002568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	4829      	ldr	r0, [pc, #164]	; (8002620 <MX_GPIO_Init+0x16c>)
 800257a:	f7fe fdc5 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800257e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	4822      	ldr	r0, [pc, #136]	; (800261c <MX_GPIO_Init+0x168>)
 8002594:	f7fe fdb8 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8002598:	2321      	movs	r3, #33	; 0x21
 800259a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259c:	2301      	movs	r3, #1
 800259e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	4819      	ldr	r0, [pc, #100]	; (8002614 <MX_GPIO_Init+0x160>)
 80025b0:	f7fe fdaa 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80025b4:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80025b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	4813      	ldr	r0, [pc, #76]	; (8002618 <MX_GPIO_Init+0x164>)
 80025ca:	f7fe fd9d 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80025ce:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80025d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	480c      	ldr	r0, [pc, #48]	; (8002618 <MX_GPIO_Init+0x164>)
 80025e8:	f7fe fd8e 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025ec:	2340      	movs	r3, #64	; 0x40
 80025ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4806      	ldr	r0, [pc, #24]	; (800261c <MX_GPIO_Init+0x168>)
 8002604:	f7fe fd80 	bl	8001108 <HAL_GPIO_Init>

}
 8002608:	bf00      	nop
 800260a:	3728      	adds	r7, #40	; 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	40020400 	.word	0x40020400
 8002618:	40020c00 	.word	0x40020c00
 800261c:	40020800 	.word	0x40020800
 8002620:	40021000 	.word	0x40021000

08002624 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800262a:	f7fe fbed 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262e:	f000 f83f 	bl	80026b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002632:	f7ff ff3f 	bl	80024b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002636:	f000 f96f 	bl	8002918 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800263a:	2201      	movs	r2, #1
 800263c:	2140      	movs	r1, #64	; 0x40
 800263e:	4818      	ldr	r0, [pc, #96]	; (80026a0 <main+0x7c>)
 8002640:	f7fe fefc 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002644:	2201      	movs	r2, #1
 8002646:	2101      	movs	r1, #1
 8002648:	4816      	ldr	r0, [pc, #88]	; (80026a4 <main+0x80>)
 800264a:	f7fe fef7 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800264e:	2201      	movs	r2, #1
 8002650:	2120      	movs	r1, #32
 8002652:	4814      	ldr	r0, [pc, #80]	; (80026a4 <main+0x80>)
 8002654:	f7fe fef2 	bl	800143c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800265e:	4812      	ldr	r0, [pc, #72]	; (80026a8 <main+0x84>)
 8002660:	f7fe feec 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800266a:	480f      	ldr	r0, [pc, #60]	; (80026a8 <main+0x84>)
 800266c:	f7fe fee6 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002676:	480c      	ldr	r0, [pc, #48]	; (80026a8 <main+0x84>)
 8002678:	f7fe fee0 	bl	800143c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t a = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	  if(HAL_UART_Receive(&huart3, &a, 1, 10) == HAL_OK)
 8002680:	1df9      	adds	r1, r7, #7
 8002682:	230a      	movs	r3, #10
 8002684:	2201      	movs	r2, #1
 8002686:	4809      	ldr	r0, [pc, #36]	; (80026ac <main+0x88>)
 8002688:	f7ff fc07 	bl	8001e9a <HAL_UART_Receive>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f6      	bne.n	8002680 <main+0x5c>
	  {
		  HAL_UART_Transmit(&huart3, &a, 1, 10);
 8002692:	1df9      	adds	r1, r7, #7
 8002694:	230a      	movs	r3, #10
 8002696:	2201      	movs	r2, #1
 8002698:	4804      	ldr	r0, [pc, #16]	; (80026ac <main+0x88>)
 800269a:	f7ff fb66 	bl	8001d6a <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&huart3, &a, 1, 10) == HAL_OK)
 800269e:	e7ef      	b.n	8002680 <main+0x5c>
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40020c00 	.word	0x40020c00
 80026ac:	20000208 	.word	0x20000208

080026b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b094      	sub	sp, #80	; 0x50
 80026b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4a34      	ldr	r2, [pc, #208]	; (800278c <SystemClock_Config+0xdc>)
 80026bc:	4b33      	ldr	r3, [pc, #204]	; (800278c <SystemClock_Config+0xdc>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b31      	ldr	r3, [pc, #196]	; (800278c <SystemClock_Config+0xdc>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	4a2e      	ldr	r2, [pc, #184]	; (8002790 <SystemClock_Config+0xe0>)
 80026d8:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <SystemClock_Config+0xe0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <SystemClock_Config+0xe0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f8:	2302      	movs	r3, #2
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002702:	2304      	movs	r3, #4
 8002704:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002706:	23a8      	movs	r3, #168	; 0xa8
 8002708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800270a:	2302      	movs	r3, #2
 800270c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800270e:	2304      	movs	r3, #4
 8002710:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002712:	f107 0320 	add.w	r3, r7, #32
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe feaa 	bl	8001470 <HAL_RCC_OscConfig>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002722:	219c      	movs	r1, #156	; 0x9c
 8002724:	481b      	ldr	r0, [pc, #108]	; (8002794 <SystemClock_Config+0xe4>)
 8002726:	f000 f839 	bl	800279c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272a:	230f      	movs	r3, #15
 800272c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800272e:	2302      	movs	r3, #2
 8002730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800273a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800273c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	2105      	movs	r1, #5
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f8d3 	bl	80018f4 <HAL_RCC_ClockConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <SystemClock_Config+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002754:	21aa      	movs	r1, #170	; 0xaa
 8002756:	480f      	ldr	r0, [pc, #60]	; (8002794 <SystemClock_Config+0xe4>)
 8002758:	f000 f820 	bl	800279c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800275c:	f7ff fa84 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <SystemClock_Config+0xe8>)
 8002764:	fba3 2302 	umull	r2, r3, r3, r2
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fc95 	bl	800109a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002770:	2004      	movs	r0, #4
 8002772:	f7fe fc9f 	bl	80010b4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	f04f 30ff 	mov.w	r0, #4294967295
 800277e:	f7fe fc70 	bl	8001062 <HAL_NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3750      	adds	r7, #80	; 0x50
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000
 8002794:	08004528 	.word	0x08004528
 8002798:	10624dd3 	.word	0x10624dd3

0800279c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80027a6:	e7fe      	b.n	80027a6 <_Error_Handler+0xa>

080027a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	4a25      	ldr	r2, [pc, #148]	; (8002848 <HAL_MspInit+0xa0>)
 80027b4:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_MspInit+0xa0>)
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_MspInit+0xa0>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <HAL_MspInit+0xa0>)
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_MspInit+0xa0>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_MspInit+0xa0>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e6:	2003      	movs	r0, #3
 80027e8:	f7fe fc30 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2100      	movs	r1, #0
 80027f0:	f06f 000b 	mvn.w	r0, #11
 80027f4:	f7fe fc35 	bl	8001062 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	f06f 000a 	mvn.w	r0, #10
 8002800:	f7fe fc2f 	bl	8001062 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	f06f 0009 	mvn.w	r0, #9
 800280c:	f7fe fc29 	bl	8001062 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002810:	2200      	movs	r2, #0
 8002812:	2100      	movs	r1, #0
 8002814:	f06f 0004 	mvn.w	r0, #4
 8002818:	f7fe fc23 	bl	8001062 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2100      	movs	r1, #0
 8002820:	f06f 0003 	mvn.w	r0, #3
 8002824:	f7fe fc1d 	bl	8001062 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	f06f 0001 	mvn.w	r0, #1
 8002830:	f7fe fc17 	bl	8001062 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f7fe fc11 	bl	8001062 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40023800 	.word	0x40023800

0800284c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <HardFault_Handler+0x4>

08002860 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <MemManage_Handler+0x4>

08002866 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286a:	e7fe      	b.n	800286a <BusFault_Handler+0x4>

0800286c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <UsageFault_Handler+0x4>

08002872 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a0:	f7fe fb04 	bl	8000eac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80028a4:	f7fe fc22 	bl	80010ec <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}

080028ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b0:	4a16      	ldr	r2, [pc, #88]	; (800290c <SystemInit+0x60>)
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <SystemInit+0x60>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <SystemInit+0x64>)
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <SystemInit+0x64>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <SystemInit+0x64>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028d2:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <SystemInit+0x64>)
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <SystemInit+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <SystemInit+0x64>)
 80028e4:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <SystemInit+0x68>)
 80028e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028e8:	4a09      	ldr	r2, [pc, #36]	; (8002910 <SystemInit+0x64>)
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <SystemInit+0x64>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <SystemInit+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <SystemInit+0x60>)
 80028fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002900:	609a      	str	r2, [r3, #8]
#endif
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00
 8002910:	40023800 	.word	0x40023800
 8002914:	24003010 	.word	0x24003010

08002918 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <MX_USART3_UART_Init+0x50>)
 800291e:	4a13      	ldr	r2, [pc, #76]	; (800296c <MX_USART3_UART_Init+0x54>)
 8002920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <MX_USART3_UART_Init+0x50>)
 8002924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <MX_USART3_UART_Init+0x50>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <MX_USART3_UART_Init+0x50>)
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <MX_USART3_UART_Init+0x50>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <MX_USART3_UART_Init+0x50>)
 800293e:	220c      	movs	r2, #12
 8002940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <MX_USART3_UART_Init+0x50>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002948:	4b07      	ldr	r3, [pc, #28]	; (8002968 <MX_USART3_UART_Init+0x50>)
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800294e:	4806      	ldr	r0, [pc, #24]	; (8002968 <MX_USART3_UART_Init+0x50>)
 8002950:	f7ff f9be 	bl	8001cd0 <HAL_UART_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <MX_USART3_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800295a:	2142      	movs	r1, #66	; 0x42
 800295c:	4804      	ldr	r0, [pc, #16]	; (8002970 <MX_USART3_UART_Init+0x58>)
 800295e:	f7ff ff1d 	bl	800279c <_Error_Handler>
  }

}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000208 	.word	0x20000208
 800296c:	40004800 	.word	0x40004800
 8002970:	08004538 	.word	0x08004538

08002974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <HAL_UART_MspInit+0x58>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d11e      	bne.n	80029c4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HAL_UART_MspInit+0x5c>)
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_UART_MspInit+0x5c>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_UART_MspInit+0x5c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
  
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029b4:	2307      	movs	r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b8:	f107 030c 	add.w	r3, r7, #12
 80029bc:	4619      	mov	r1, r3
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <HAL_UART_MspInit+0x60>)
 80029c0:	f7fe fba2 	bl	8001108 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029c4:	bf00      	nop
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40004800 	.word	0x40004800
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020c00 	.word	0x40020c00

080029d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029de:	e003      	b.n	80029e8 <LoopCopyDataInit>

080029e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029e6:	3104      	adds	r1, #4

080029e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029e8:	480b      	ldr	r0, [pc, #44]	; (8002a18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029f0:	d3f6      	bcc.n	80029e0 <CopyDataInit>
  ldr  r2, =_sbss
 80029f2:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029f4:	e002      	b.n	80029fc <LoopFillZerobss>

080029f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029f8:	f842 3b04 	str.w	r3, [r2], #4

080029fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a00:	d3f9      	bcc.n	80029f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a02:	f7ff ff53 	bl	80028ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a06:	f000 f811 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a0a:	f7ff fe0b 	bl	8002624 <main>
  bx  lr    
 8002a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a14:	08004798 	.word	0x08004798
  ldr  r0, =_sdata
 8002a18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a1c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002a20:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002a24:	2000024c 	.word	0x2000024c

08002a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a28:	e7fe      	b.n	8002a28 <ADC_IRQHandler>
	...

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	4e0d      	ldr	r6, [pc, #52]	; (8002a64 <__libc_init_array+0x38>)
 8002a30:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <__libc_init_array+0x3c>)
 8002a32:	1ba4      	subs	r4, r4, r6
 8002a34:	10a4      	asrs	r4, r4, #2
 8002a36:	2500      	movs	r5, #0
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	4e0b      	ldr	r6, [pc, #44]	; (8002a6c <__libc_init_array+0x40>)
 8002a3e:	4c0c      	ldr	r4, [pc, #48]	; (8002a70 <__libc_init_array+0x44>)
 8002a40:	f001 fd66 	bl	8004510 <_init>
 8002a44:	1ba4      	subs	r4, r4, r6
 8002a46:	10a4      	asrs	r4, r4, #2
 8002a48:	2500      	movs	r5, #0
 8002a4a:	42a5      	cmp	r5, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a54:	4798      	blx	r3
 8002a56:	3501      	adds	r5, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a5e:	4798      	blx	r3
 8002a60:	3501      	adds	r5, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	08004790 	.word	0x08004790
 8002a68:	08004790 	.word	0x08004790
 8002a6c:	08004790 	.word	0x08004790
 8002a70:	08004794 	.word	0x08004794

08002a74 <__cvt>:
 8002a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a78:	ec55 4b10 	vmov	r4, r5, d0
 8002a7c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002a7e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	460e      	mov	r6, r1
 8002a86:	4691      	mov	r9, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	bfb8      	it	lt
 8002a8c:	4622      	movlt	r2, r4
 8002a8e:	462b      	mov	r3, r5
 8002a90:	f027 0720 	bic.w	r7, r7, #32
 8002a94:	bfbb      	ittet	lt
 8002a96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002a9a:	461d      	movlt	r5, r3
 8002a9c:	2300      	movge	r3, #0
 8002a9e:	232d      	movlt	r3, #45	; 0x2d
 8002aa0:	bfb8      	it	lt
 8002aa2:	4614      	movlt	r4, r2
 8002aa4:	2f46      	cmp	r7, #70	; 0x46
 8002aa6:	700b      	strb	r3, [r1, #0]
 8002aa8:	d004      	beq.n	8002ab4 <__cvt+0x40>
 8002aaa:	2f45      	cmp	r7, #69	; 0x45
 8002aac:	d100      	bne.n	8002ab0 <__cvt+0x3c>
 8002aae:	3601      	adds	r6, #1
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	e000      	b.n	8002ab6 <__cvt+0x42>
 8002ab4:	2103      	movs	r1, #3
 8002ab6:	ab03      	add	r3, sp, #12
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	ab02      	add	r3, sp, #8
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4632      	mov	r2, r6
 8002ac0:	4653      	mov	r3, sl
 8002ac2:	ec45 4b10 	vmov	d0, r4, r5
 8002ac6:	f000 fbaf 	bl	8003228 <_dtoa_r>
 8002aca:	2f47      	cmp	r7, #71	; 0x47
 8002acc:	4680      	mov	r8, r0
 8002ace:	d102      	bne.n	8002ad6 <__cvt+0x62>
 8002ad0:	f019 0f01 	tst.w	r9, #1
 8002ad4:	d026      	beq.n	8002b24 <__cvt+0xb0>
 8002ad6:	2f46      	cmp	r7, #70	; 0x46
 8002ad8:	eb08 0906 	add.w	r9, r8, r6
 8002adc:	d111      	bne.n	8002b02 <__cvt+0x8e>
 8002ade:	f898 3000 	ldrb.w	r3, [r8]
 8002ae2:	2b30      	cmp	r3, #48	; 0x30
 8002ae4:	d10a      	bne.n	8002afc <__cvt+0x88>
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2300      	movs	r3, #0
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f7fd ff93 	bl	8000a18 <__aeabi_dcmpeq>
 8002af2:	b918      	cbnz	r0, 8002afc <__cvt+0x88>
 8002af4:	f1c6 0601 	rsb	r6, r6, #1
 8002af8:	f8ca 6000 	str.w	r6, [sl]
 8002afc:	f8da 3000 	ldr.w	r3, [sl]
 8002b00:	4499      	add	r9, r3
 8002b02:	2200      	movs	r2, #0
 8002b04:	2300      	movs	r3, #0
 8002b06:	4620      	mov	r0, r4
 8002b08:	4629      	mov	r1, r5
 8002b0a:	f7fd ff85 	bl	8000a18 <__aeabi_dcmpeq>
 8002b0e:	b938      	cbnz	r0, 8002b20 <__cvt+0xac>
 8002b10:	2230      	movs	r2, #48	; 0x30
 8002b12:	9b03      	ldr	r3, [sp, #12]
 8002b14:	4599      	cmp	r9, r3
 8002b16:	d905      	bls.n	8002b24 <__cvt+0xb0>
 8002b18:	1c59      	adds	r1, r3, #1
 8002b1a:	9103      	str	r1, [sp, #12]
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e7f8      	b.n	8002b12 <__cvt+0x9e>
 8002b20:	f8cd 900c 	str.w	r9, [sp, #12]
 8002b24:	9b03      	ldr	r3, [sp, #12]
 8002b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b28:	eba3 0308 	sub.w	r3, r3, r8
 8002b2c:	4640      	mov	r0, r8
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	b004      	add	sp, #16
 8002b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b36 <__exponent>:
 8002b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	bfb8      	it	lt
 8002b3e:	4249      	neglt	r1, r1
 8002b40:	f803 2b02 	strb.w	r2, [r3], #2
 8002b44:	bfb4      	ite	lt
 8002b46:	222d      	movlt	r2, #45	; 0x2d
 8002b48:	222b      	movge	r2, #43	; 0x2b
 8002b4a:	2909      	cmp	r1, #9
 8002b4c:	7042      	strb	r2, [r0, #1]
 8002b4e:	dd20      	ble.n	8002b92 <__exponent+0x5c>
 8002b50:	f10d 0207 	add.w	r2, sp, #7
 8002b54:	4617      	mov	r7, r2
 8002b56:	260a      	movs	r6, #10
 8002b58:	fb91 f5f6 	sdiv	r5, r1, r6
 8002b5c:	fb06 1115 	mls	r1, r6, r5, r1
 8002b60:	3130      	adds	r1, #48	; 0x30
 8002b62:	2d09      	cmp	r5, #9
 8002b64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002b68:	f102 34ff 	add.w	r4, r2, #4294967295
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	dc09      	bgt.n	8002b84 <__exponent+0x4e>
 8002b70:	3130      	adds	r1, #48	; 0x30
 8002b72:	3a02      	subs	r2, #2
 8002b74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002b78:	42ba      	cmp	r2, r7
 8002b7a:	461c      	mov	r4, r3
 8002b7c:	d304      	bcc.n	8002b88 <__exponent+0x52>
 8002b7e:	1a20      	subs	r0, r4, r0
 8002b80:	b003      	add	sp, #12
 8002b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b84:	4622      	mov	r2, r4
 8002b86:	e7e7      	b.n	8002b58 <__exponent+0x22>
 8002b88:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002b8c:	f803 1b01 	strb.w	r1, [r3], #1
 8002b90:	e7f2      	b.n	8002b78 <__exponent+0x42>
 8002b92:	2230      	movs	r2, #48	; 0x30
 8002b94:	461c      	mov	r4, r3
 8002b96:	4411      	add	r1, r2
 8002b98:	f804 2b02 	strb.w	r2, [r4], #2
 8002b9c:	7059      	strb	r1, [r3, #1]
 8002b9e:	e7ee      	b.n	8002b7e <__exponent+0x48>

08002ba0 <_printf_float>:
 8002ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba4:	b08d      	sub	sp, #52	; 0x34
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002bac:	4616      	mov	r6, r2
 8002bae:	461f      	mov	r7, r3
 8002bb0:	4605      	mov	r5, r0
 8002bb2:	f001 f907 	bl	8003dc4 <_localeconv_r>
 8002bb6:	6803      	ldr	r3, [r0, #0]
 8002bb8:	9304      	str	r3, [sp, #16]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fb04 	bl	80001c8 <strlen>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8002bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8002bc8:	9005      	str	r0, [sp, #20]
 8002bca:	3307      	adds	r3, #7
 8002bcc:	f023 0307 	bic.w	r3, r3, #7
 8002bd0:	f103 0208 	add.w	r2, r3, #8
 8002bd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002bd8:	f8d4 b000 	ldr.w	fp, [r4]
 8002bdc:	f8c8 2000 	str.w	r2, [r8]
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002be8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002bec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002bf0:	9307      	str	r3, [sp, #28]
 8002bf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8002bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfa:	4ba5      	ldr	r3, [pc, #660]	; (8002e90 <_printf_float+0x2f0>)
 8002bfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c00:	f7fd ff3c 	bl	8000a7c <__aeabi_dcmpun>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	f040 81fb 	bne.w	8003000 <_printf_float+0x460>
 8002c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0e:	4ba0      	ldr	r3, [pc, #640]	; (8002e90 <_printf_float+0x2f0>)
 8002c10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c14:	f7fd ff14 	bl	8000a40 <__aeabi_dcmple>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	f040 81f1 	bne.w	8003000 <_printf_float+0x460>
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2300      	movs	r3, #0
 8002c22:	4640      	mov	r0, r8
 8002c24:	4649      	mov	r1, r9
 8002c26:	f7fd ff01 	bl	8000a2c <__aeabi_dcmplt>
 8002c2a:	b110      	cbz	r0, 8002c32 <_printf_float+0x92>
 8002c2c:	232d      	movs	r3, #45	; 0x2d
 8002c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c32:	4b98      	ldr	r3, [pc, #608]	; (8002e94 <_printf_float+0x2f4>)
 8002c34:	4a98      	ldr	r2, [pc, #608]	; (8002e98 <_printf_float+0x2f8>)
 8002c36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002c3a:	bf8c      	ite	hi
 8002c3c:	4690      	movhi	r8, r2
 8002c3e:	4698      	movls	r8, r3
 8002c40:	2303      	movs	r3, #3
 8002c42:	f02b 0204 	bic.w	r2, fp, #4
 8002c46:	6123      	str	r3, [r4, #16]
 8002c48:	6022      	str	r2, [r4, #0]
 8002c4a:	f04f 0900 	mov.w	r9, #0
 8002c4e:	9700      	str	r7, [sp, #0]
 8002c50:	4633      	mov	r3, r6
 8002c52:	aa0b      	add	r2, sp, #44	; 0x2c
 8002c54:	4621      	mov	r1, r4
 8002c56:	4628      	mov	r0, r5
 8002c58:	f000 f9e2 	bl	8003020 <_printf_common>
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	f040 8093 	bne.w	8002d88 <_printf_float+0x1e8>
 8002c62:	f04f 30ff 	mov.w	r0, #4294967295
 8002c66:	b00d      	add	sp, #52	; 0x34
 8002c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c6c:	6861      	ldr	r1, [r4, #4]
 8002c6e:	1c4b      	adds	r3, r1, #1
 8002c70:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002c74:	d13f      	bne.n	8002cf6 <_printf_float+0x156>
 8002c76:	2306      	movs	r3, #6
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9303      	str	r3, [sp, #12]
 8002c7e:	ab0a      	add	r3, sp, #40	; 0x28
 8002c80:	9302      	str	r3, [sp, #8]
 8002c82:	ab09      	add	r3, sp, #36	; 0x24
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	ec49 8b10 	vmov	d0, r8, r9
 8002c8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002c8e:	6022      	str	r2, [r4, #0]
 8002c90:	f8cd a004 	str.w	sl, [sp, #4]
 8002c94:	6861      	ldr	r1, [r4, #4]
 8002c96:	4628      	mov	r0, r5
 8002c98:	f7ff feec 	bl	8002a74 <__cvt>
 8002c9c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002ca0:	2b47      	cmp	r3, #71	; 0x47
 8002ca2:	4680      	mov	r8, r0
 8002ca4:	d109      	bne.n	8002cba <_printf_float+0x11a>
 8002ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ca8:	1cd8      	adds	r0, r3, #3
 8002caa:	db02      	blt.n	8002cb2 <_printf_float+0x112>
 8002cac:	6862      	ldr	r2, [r4, #4]
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	dd57      	ble.n	8002d62 <_printf_float+0x1c2>
 8002cb2:	f1aa 0a02 	sub.w	sl, sl, #2
 8002cb6:	fa5f fa8a 	uxtb.w	sl, sl
 8002cba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002cbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cc0:	d834      	bhi.n	8002d2c <_printf_float+0x18c>
 8002cc2:	3901      	subs	r1, #1
 8002cc4:	4652      	mov	r2, sl
 8002cc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002cca:	9109      	str	r1, [sp, #36]	; 0x24
 8002ccc:	f7ff ff33 	bl	8002b36 <__exponent>
 8002cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cd2:	1883      	adds	r3, r0, r2
 8002cd4:	2a01      	cmp	r2, #1
 8002cd6:	4681      	mov	r9, r0
 8002cd8:	6123      	str	r3, [r4, #16]
 8002cda:	dc02      	bgt.n	8002ce2 <_printf_float+0x142>
 8002cdc:	6822      	ldr	r2, [r4, #0]
 8002cde:	07d1      	lsls	r1, r2, #31
 8002ce0:	d501      	bpl.n	8002ce6 <_printf_float+0x146>
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	6123      	str	r3, [r4, #16]
 8002ce6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0af      	beq.n	8002c4e <_printf_float+0xae>
 8002cee:	232d      	movs	r3, #45	; 0x2d
 8002cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cf4:	e7ab      	b.n	8002c4e <_printf_float+0xae>
 8002cf6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002cfa:	d002      	beq.n	8002d02 <_printf_float+0x162>
 8002cfc:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002d00:	d1bb      	bne.n	8002c7a <_printf_float+0xda>
 8002d02:	b189      	cbz	r1, 8002d28 <_printf_float+0x188>
 8002d04:	2300      	movs	r3, #0
 8002d06:	9303      	str	r3, [sp, #12]
 8002d08:	ab0a      	add	r3, sp, #40	; 0x28
 8002d0a:	9302      	str	r3, [sp, #8]
 8002d0c:	ab09      	add	r3, sp, #36	; 0x24
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	ec49 8b10 	vmov	d0, r8, r9
 8002d14:	6022      	str	r2, [r4, #0]
 8002d16:	f8cd a004 	str.w	sl, [sp, #4]
 8002d1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f7ff fea8 	bl	8002a74 <__cvt>
 8002d24:	4680      	mov	r8, r0
 8002d26:	e7be      	b.n	8002ca6 <_printf_float+0x106>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e7a5      	b.n	8002c78 <_printf_float+0xd8>
 8002d2c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002d30:	d119      	bne.n	8002d66 <_printf_float+0x1c6>
 8002d32:	2900      	cmp	r1, #0
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	dd0c      	ble.n	8002d52 <_printf_float+0x1b2>
 8002d38:	6121      	str	r1, [r4, #16]
 8002d3a:	b913      	cbnz	r3, 8002d42 <_printf_float+0x1a2>
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	07d2      	lsls	r2, r2, #31
 8002d40:	d502      	bpl.n	8002d48 <_printf_float+0x1a8>
 8002d42:	3301      	adds	r3, #1
 8002d44:	440b      	add	r3, r1
 8002d46:	6123      	str	r3, [r4, #16]
 8002d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d4c:	f04f 0900 	mov.w	r9, #0
 8002d50:	e7c9      	b.n	8002ce6 <_printf_float+0x146>
 8002d52:	b913      	cbnz	r3, 8002d5a <_printf_float+0x1ba>
 8002d54:	6822      	ldr	r2, [r4, #0]
 8002d56:	07d0      	lsls	r0, r2, #31
 8002d58:	d501      	bpl.n	8002d5e <_printf_float+0x1be>
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	e7f3      	b.n	8002d46 <_printf_float+0x1a6>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e7f1      	b.n	8002d46 <_printf_float+0x1a6>
 8002d62:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	db05      	blt.n	8002d7a <_printf_float+0x1da>
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	6123      	str	r3, [r4, #16]
 8002d72:	07d1      	lsls	r1, r2, #31
 8002d74:	d5e8      	bpl.n	8002d48 <_printf_float+0x1a8>
 8002d76:	3301      	adds	r3, #1
 8002d78:	e7e5      	b.n	8002d46 <_printf_float+0x1a6>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bfd4      	ite	le
 8002d7e:	f1c3 0302 	rsble	r3, r3, #2
 8002d82:	2301      	movgt	r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	e7de      	b.n	8002d46 <_printf_float+0x1a6>
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	055a      	lsls	r2, r3, #21
 8002d8c:	d407      	bmi.n	8002d9e <_printf_float+0x1fe>
 8002d8e:	6923      	ldr	r3, [r4, #16]
 8002d90:	4642      	mov	r2, r8
 8002d92:	4631      	mov	r1, r6
 8002d94:	4628      	mov	r0, r5
 8002d96:	47b8      	blx	r7
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d12b      	bne.n	8002df4 <_printf_float+0x254>
 8002d9c:	e761      	b.n	8002c62 <_printf_float+0xc2>
 8002d9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002da2:	f240 80e2 	bls.w	8002f6a <_printf_float+0x3ca>
 8002da6:	2200      	movs	r2, #0
 8002da8:	2300      	movs	r3, #0
 8002daa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002dae:	f7fd fe33 	bl	8000a18 <__aeabi_dcmpeq>
 8002db2:	2800      	cmp	r0, #0
 8002db4:	d03c      	beq.n	8002e30 <_printf_float+0x290>
 8002db6:	2301      	movs	r3, #1
 8002db8:	4a38      	ldr	r2, [pc, #224]	; (8002e9c <_printf_float+0x2fc>)
 8002dba:	4631      	mov	r1, r6
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	47b8      	blx	r7
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	f43f af4e 	beq.w	8002c62 <_printf_float+0xc2>
 8002dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	db02      	blt.n	8002dd4 <_printf_float+0x234>
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	07d8      	lsls	r0, r3, #31
 8002dd2:	d50f      	bpl.n	8002df4 <_printf_float+0x254>
 8002dd4:	9b05      	ldr	r3, [sp, #20]
 8002dd6:	9a04      	ldr	r2, [sp, #16]
 8002dd8:	4631      	mov	r1, r6
 8002dda:	4628      	mov	r0, r5
 8002ddc:	47b8      	blx	r7
 8002dde:	3001      	adds	r0, #1
 8002de0:	f43f af3f 	beq.w	8002c62 <_printf_float+0xc2>
 8002de4:	f04f 0800 	mov.w	r8, #0
 8002de8:	f104 091a 	add.w	r9, r4, #26
 8002dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dee:	3b01      	subs	r3, #1
 8002df0:	4598      	cmp	r8, r3
 8002df2:	db12      	blt.n	8002e1a <_printf_float+0x27a>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	079b      	lsls	r3, r3, #30
 8002df8:	d509      	bpl.n	8002e0e <_printf_float+0x26e>
 8002dfa:	f04f 0800 	mov.w	r8, #0
 8002dfe:	f104 0919 	add.w	r9, r4, #25
 8002e02:	68e3      	ldr	r3, [r4, #12]
 8002e04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	4598      	cmp	r8, r3
 8002e0a:	f2c0 80ee 	blt.w	8002fea <_printf_float+0x44a>
 8002e0e:	68e0      	ldr	r0, [r4, #12]
 8002e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e12:	4298      	cmp	r0, r3
 8002e14:	bfb8      	it	lt
 8002e16:	4618      	movlt	r0, r3
 8002e18:	e725      	b.n	8002c66 <_printf_float+0xc6>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	464a      	mov	r2, r9
 8002e1e:	4631      	mov	r1, r6
 8002e20:	4628      	mov	r0, r5
 8002e22:	47b8      	blx	r7
 8002e24:	3001      	adds	r0, #1
 8002e26:	f43f af1c 	beq.w	8002c62 <_printf_float+0xc2>
 8002e2a:	f108 0801 	add.w	r8, r8, #1
 8002e2e:	e7dd      	b.n	8002dec <_printf_float+0x24c>
 8002e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	dc34      	bgt.n	8002ea0 <_printf_float+0x300>
 8002e36:	2301      	movs	r3, #1
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <_printf_float+0x2fc>)
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	47b8      	blx	r7
 8002e40:	3001      	adds	r0, #1
 8002e42:	f43f af0e 	beq.w	8002c62 <_printf_float+0xc2>
 8002e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e48:	b923      	cbnz	r3, 8002e54 <_printf_float+0x2b4>
 8002e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e4c:	b913      	cbnz	r3, 8002e54 <_printf_float+0x2b4>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	07d9      	lsls	r1, r3, #31
 8002e52:	d5cf      	bpl.n	8002df4 <_printf_float+0x254>
 8002e54:	9b05      	ldr	r3, [sp, #20]
 8002e56:	9a04      	ldr	r2, [sp, #16]
 8002e58:	4631      	mov	r1, r6
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	47b8      	blx	r7
 8002e5e:	3001      	adds	r0, #1
 8002e60:	f43f aeff 	beq.w	8002c62 <_printf_float+0xc2>
 8002e64:	f04f 0900 	mov.w	r9, #0
 8002e68:	f104 0a1a 	add.w	sl, r4, #26
 8002e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e6e:	425b      	negs	r3, r3
 8002e70:	4599      	cmp	r9, r3
 8002e72:	db01      	blt.n	8002e78 <_printf_float+0x2d8>
 8002e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e76:	e78b      	b.n	8002d90 <_printf_float+0x1f0>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	4652      	mov	r2, sl
 8002e7c:	4631      	mov	r1, r6
 8002e7e:	4628      	mov	r0, r5
 8002e80:	47b8      	blx	r7
 8002e82:	3001      	adds	r0, #1
 8002e84:	f43f aeed 	beq.w	8002c62 <_printf_float+0xc2>
 8002e88:	f109 0901 	add.w	r9, r9, #1
 8002e8c:	e7ee      	b.n	8002e6c <_printf_float+0x2cc>
 8002e8e:	bf00      	nop
 8002e90:	7fefffff 	.word	0x7fefffff
 8002e94:	08004560 	.word	0x08004560
 8002e98:	08004564 	.word	0x08004564
 8002e9c:	08004570 	.word	0x08004570
 8002ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	bfa8      	it	ge
 8002ea8:	461a      	movge	r2, r3
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	4691      	mov	r9, r2
 8002eae:	dc38      	bgt.n	8002f22 <_printf_float+0x382>
 8002eb0:	f104 031a 	add.w	r3, r4, #26
 8002eb4:	f04f 0b00 	mov.w	fp, #0
 8002eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ebc:	9306      	str	r3, [sp, #24]
 8002ebe:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002ec2:	ebaa 0309 	sub.w	r3, sl, r9
 8002ec6:	459b      	cmp	fp, r3
 8002ec8:	db33      	blt.n	8002f32 <_printf_float+0x392>
 8002eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	db3a      	blt.n	8002f48 <_printf_float+0x3a8>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	07da      	lsls	r2, r3, #31
 8002ed6:	d437      	bmi.n	8002f48 <_printf_float+0x3a8>
 8002ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002edc:	eba3 020a 	sub.w	r2, r3, sl
 8002ee0:	eba3 0901 	sub.w	r9, r3, r1
 8002ee4:	4591      	cmp	r9, r2
 8002ee6:	bfa8      	it	ge
 8002ee8:	4691      	movge	r9, r2
 8002eea:	f1b9 0f00 	cmp.w	r9, #0
 8002eee:	dc33      	bgt.n	8002f58 <_printf_float+0x3b8>
 8002ef0:	f04f 0800 	mov.w	r8, #0
 8002ef4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ef8:	f104 0a1a 	add.w	sl, r4, #26
 8002efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	eba3 0309 	sub.w	r3, r3, r9
 8002f06:	4598      	cmp	r8, r3
 8002f08:	f6bf af74 	bge.w	8002df4 <_printf_float+0x254>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4652      	mov	r2, sl
 8002f10:	4631      	mov	r1, r6
 8002f12:	4628      	mov	r0, r5
 8002f14:	47b8      	blx	r7
 8002f16:	3001      	adds	r0, #1
 8002f18:	f43f aea3 	beq.w	8002c62 <_printf_float+0xc2>
 8002f1c:	f108 0801 	add.w	r8, r8, #1
 8002f20:	e7ec      	b.n	8002efc <_printf_float+0x35c>
 8002f22:	4613      	mov	r3, r2
 8002f24:	4631      	mov	r1, r6
 8002f26:	4642      	mov	r2, r8
 8002f28:	4628      	mov	r0, r5
 8002f2a:	47b8      	blx	r7
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d1bf      	bne.n	8002eb0 <_printf_float+0x310>
 8002f30:	e697      	b.n	8002c62 <_printf_float+0xc2>
 8002f32:	2301      	movs	r3, #1
 8002f34:	9a06      	ldr	r2, [sp, #24]
 8002f36:	4631      	mov	r1, r6
 8002f38:	4628      	mov	r0, r5
 8002f3a:	47b8      	blx	r7
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	f43f ae90 	beq.w	8002c62 <_printf_float+0xc2>
 8002f42:	f10b 0b01 	add.w	fp, fp, #1
 8002f46:	e7ba      	b.n	8002ebe <_printf_float+0x31e>
 8002f48:	9b05      	ldr	r3, [sp, #20]
 8002f4a:	9a04      	ldr	r2, [sp, #16]
 8002f4c:	4631      	mov	r1, r6
 8002f4e:	4628      	mov	r0, r5
 8002f50:	47b8      	blx	r7
 8002f52:	3001      	adds	r0, #1
 8002f54:	d1c0      	bne.n	8002ed8 <_printf_float+0x338>
 8002f56:	e684      	b.n	8002c62 <_printf_float+0xc2>
 8002f58:	464b      	mov	r3, r9
 8002f5a:	eb08 020a 	add.w	r2, r8, sl
 8002f5e:	4631      	mov	r1, r6
 8002f60:	4628      	mov	r0, r5
 8002f62:	47b8      	blx	r7
 8002f64:	3001      	adds	r0, #1
 8002f66:	d1c3      	bne.n	8002ef0 <_printf_float+0x350>
 8002f68:	e67b      	b.n	8002c62 <_printf_float+0xc2>
 8002f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f6c:	2a01      	cmp	r2, #1
 8002f6e:	dc01      	bgt.n	8002f74 <_printf_float+0x3d4>
 8002f70:	07db      	lsls	r3, r3, #31
 8002f72:	d537      	bpl.n	8002fe4 <_printf_float+0x444>
 8002f74:	2301      	movs	r3, #1
 8002f76:	4642      	mov	r2, r8
 8002f78:	4631      	mov	r1, r6
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	47b8      	blx	r7
 8002f7e:	3001      	adds	r0, #1
 8002f80:	f43f ae6f 	beq.w	8002c62 <_printf_float+0xc2>
 8002f84:	9b05      	ldr	r3, [sp, #20]
 8002f86:	9a04      	ldr	r2, [sp, #16]
 8002f88:	4631      	mov	r1, r6
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	47b8      	blx	r7
 8002f8e:	3001      	adds	r0, #1
 8002f90:	f43f ae67 	beq.w	8002c62 <_printf_float+0xc2>
 8002f94:	2200      	movs	r2, #0
 8002f96:	2300      	movs	r3, #0
 8002f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f9c:	f7fd fd3c 	bl	8000a18 <__aeabi_dcmpeq>
 8002fa0:	b158      	cbz	r0, 8002fba <_printf_float+0x41a>
 8002fa2:	f04f 0800 	mov.w	r8, #0
 8002fa6:	f104 0a1a 	add.w	sl, r4, #26
 8002faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	4598      	cmp	r8, r3
 8002fb0:	db0d      	blt.n	8002fce <_printf_float+0x42e>
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002fb8:	e6eb      	b.n	8002d92 <_printf_float+0x1f2>
 8002fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fbc:	f108 0201 	add.w	r2, r8, #1
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	47b8      	blx	r7
 8002fc8:	3001      	adds	r0, #1
 8002fca:	d1f2      	bne.n	8002fb2 <_printf_float+0x412>
 8002fcc:	e649      	b.n	8002c62 <_printf_float+0xc2>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	4652      	mov	r2, sl
 8002fd2:	4631      	mov	r1, r6
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b8      	blx	r7
 8002fd8:	3001      	adds	r0, #1
 8002fda:	f43f ae42 	beq.w	8002c62 <_printf_float+0xc2>
 8002fde:	f108 0801 	add.w	r8, r8, #1
 8002fe2:	e7e2      	b.n	8002faa <_printf_float+0x40a>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	4642      	mov	r2, r8
 8002fe8:	e7eb      	b.n	8002fc2 <_printf_float+0x422>
 8002fea:	2301      	movs	r3, #1
 8002fec:	464a      	mov	r2, r9
 8002fee:	4631      	mov	r1, r6
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	47b8      	blx	r7
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	f43f ae34 	beq.w	8002c62 <_printf_float+0xc2>
 8002ffa:	f108 0801 	add.w	r8, r8, #1
 8002ffe:	e700      	b.n	8002e02 <_printf_float+0x262>
 8003000:	4642      	mov	r2, r8
 8003002:	464b      	mov	r3, r9
 8003004:	4640      	mov	r0, r8
 8003006:	4649      	mov	r1, r9
 8003008:	f7fd fd38 	bl	8000a7c <__aeabi_dcmpun>
 800300c:	2800      	cmp	r0, #0
 800300e:	f43f ae2d 	beq.w	8002c6c <_printf_float+0xcc>
 8003012:	4b01      	ldr	r3, [pc, #4]	; (8003018 <_printf_float+0x478>)
 8003014:	4a01      	ldr	r2, [pc, #4]	; (800301c <_printf_float+0x47c>)
 8003016:	e60e      	b.n	8002c36 <_printf_float+0x96>
 8003018:	08004568 	.word	0x08004568
 800301c:	0800456c 	.word	0x0800456c

08003020 <_printf_common>:
 8003020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003024:	4691      	mov	r9, r2
 8003026:	461f      	mov	r7, r3
 8003028:	688a      	ldr	r2, [r1, #8]
 800302a:	690b      	ldr	r3, [r1, #16]
 800302c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003030:	4293      	cmp	r3, r2
 8003032:	bfb8      	it	lt
 8003034:	4613      	movlt	r3, r2
 8003036:	f8c9 3000 	str.w	r3, [r9]
 800303a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800303e:	4606      	mov	r6, r0
 8003040:	460c      	mov	r4, r1
 8003042:	b112      	cbz	r2, 800304a <_printf_common+0x2a>
 8003044:	3301      	adds	r3, #1
 8003046:	f8c9 3000 	str.w	r3, [r9]
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	0699      	lsls	r1, r3, #26
 800304e:	bf42      	ittt	mi
 8003050:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003054:	3302      	addmi	r3, #2
 8003056:	f8c9 3000 	strmi.w	r3, [r9]
 800305a:	6825      	ldr	r5, [r4, #0]
 800305c:	f015 0506 	ands.w	r5, r5, #6
 8003060:	d107      	bne.n	8003072 <_printf_common+0x52>
 8003062:	f104 0a19 	add.w	sl, r4, #25
 8003066:	68e3      	ldr	r3, [r4, #12]
 8003068:	f8d9 2000 	ldr.w	r2, [r9]
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	429d      	cmp	r5, r3
 8003070:	db29      	blt.n	80030c6 <_printf_common+0xa6>
 8003072:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	3300      	adds	r3, #0
 800307a:	bf18      	it	ne
 800307c:	2301      	movne	r3, #1
 800307e:	0692      	lsls	r2, r2, #26
 8003080:	d42e      	bmi.n	80030e0 <_printf_common+0xc0>
 8003082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003086:	4639      	mov	r1, r7
 8003088:	4630      	mov	r0, r6
 800308a:	47c0      	blx	r8
 800308c:	3001      	adds	r0, #1
 800308e:	d021      	beq.n	80030d4 <_printf_common+0xb4>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	68e5      	ldr	r5, [r4, #12]
 8003094:	f8d9 2000 	ldr.w	r2, [r9]
 8003098:	f003 0306 	and.w	r3, r3, #6
 800309c:	2b04      	cmp	r3, #4
 800309e:	bf08      	it	eq
 80030a0:	1aad      	subeq	r5, r5, r2
 80030a2:	68a3      	ldr	r3, [r4, #8]
 80030a4:	6922      	ldr	r2, [r4, #16]
 80030a6:	bf0c      	ite	eq
 80030a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030ac:	2500      	movne	r5, #0
 80030ae:	4293      	cmp	r3, r2
 80030b0:	bfc4      	itt	gt
 80030b2:	1a9b      	subgt	r3, r3, r2
 80030b4:	18ed      	addgt	r5, r5, r3
 80030b6:	f04f 0900 	mov.w	r9, #0
 80030ba:	341a      	adds	r4, #26
 80030bc:	454d      	cmp	r5, r9
 80030be:	d11b      	bne.n	80030f8 <_printf_common+0xd8>
 80030c0:	2000      	movs	r0, #0
 80030c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c6:	2301      	movs	r3, #1
 80030c8:	4652      	mov	r2, sl
 80030ca:	4639      	mov	r1, r7
 80030cc:	4630      	mov	r0, r6
 80030ce:	47c0      	blx	r8
 80030d0:	3001      	adds	r0, #1
 80030d2:	d103      	bne.n	80030dc <_printf_common+0xbc>
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030dc:	3501      	adds	r5, #1
 80030de:	e7c2      	b.n	8003066 <_printf_common+0x46>
 80030e0:	18e1      	adds	r1, r4, r3
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	2030      	movs	r0, #48	; 0x30
 80030e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030ea:	4422      	add	r2, r4
 80030ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030f4:	3302      	adds	r3, #2
 80030f6:	e7c4      	b.n	8003082 <_printf_common+0x62>
 80030f8:	2301      	movs	r3, #1
 80030fa:	4622      	mov	r2, r4
 80030fc:	4639      	mov	r1, r7
 80030fe:	4630      	mov	r0, r6
 8003100:	47c0      	blx	r8
 8003102:	3001      	adds	r0, #1
 8003104:	d0e6      	beq.n	80030d4 <_printf_common+0xb4>
 8003106:	f109 0901 	add.w	r9, r9, #1
 800310a:	e7d7      	b.n	80030bc <_printf_common+0x9c>

0800310c <quorem>:
 800310c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003110:	6903      	ldr	r3, [r0, #16]
 8003112:	690c      	ldr	r4, [r1, #16]
 8003114:	429c      	cmp	r4, r3
 8003116:	4680      	mov	r8, r0
 8003118:	f300 8082 	bgt.w	8003220 <quorem+0x114>
 800311c:	3c01      	subs	r4, #1
 800311e:	f101 0714 	add.w	r7, r1, #20
 8003122:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003126:	f100 0614 	add.w	r6, r0, #20
 800312a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800312e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003132:	eb06 030e 	add.w	r3, r6, lr
 8003136:	3501      	adds	r5, #1
 8003138:	eb07 090e 	add.w	r9, r7, lr
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003142:	b395      	cbz	r5, 80031aa <quorem+0x9e>
 8003144:	f04f 0a00 	mov.w	sl, #0
 8003148:	4638      	mov	r0, r7
 800314a:	46b4      	mov	ip, r6
 800314c:	46d3      	mov	fp, sl
 800314e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003152:	b293      	uxth	r3, r2
 8003154:	fb05 a303 	mla	r3, r5, r3, sl
 8003158:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800315c:	b29b      	uxth	r3, r3
 800315e:	ebab 0303 	sub.w	r3, fp, r3
 8003162:	0c12      	lsrs	r2, r2, #16
 8003164:	f8bc b000 	ldrh.w	fp, [ip]
 8003168:	fb05 a202 	mla	r2, r5, r2, sl
 800316c:	fa13 f38b 	uxtah	r3, r3, fp
 8003170:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003174:	fa1f fb82 	uxth.w	fp, r2
 8003178:	f8dc 2000 	ldr.w	r2, [ip]
 800317c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003180:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003184:	b29b      	uxth	r3, r3
 8003186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800318a:	4581      	cmp	r9, r0
 800318c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003190:	f84c 3b04 	str.w	r3, [ip], #4
 8003194:	d2db      	bcs.n	800314e <quorem+0x42>
 8003196:	f856 300e 	ldr.w	r3, [r6, lr]
 800319a:	b933      	cbnz	r3, 80031aa <quorem+0x9e>
 800319c:	9b01      	ldr	r3, [sp, #4]
 800319e:	3b04      	subs	r3, #4
 80031a0:	429e      	cmp	r6, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	d330      	bcc.n	8003208 <quorem+0xfc>
 80031a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80031aa:	4640      	mov	r0, r8
 80031ac:	f001 f835 	bl	800421a <__mcmp>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	db25      	blt.n	8003200 <quorem+0xf4>
 80031b4:	3501      	adds	r5, #1
 80031b6:	4630      	mov	r0, r6
 80031b8:	f04f 0e00 	mov.w	lr, #0
 80031bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80031c0:	f8d0 c000 	ldr.w	ip, [r0]
 80031c4:	b293      	uxth	r3, r2
 80031c6:	ebae 0303 	sub.w	r3, lr, r3
 80031ca:	0c12      	lsrs	r2, r2, #16
 80031cc:	fa13 f38c 	uxtah	r3, r3, ip
 80031d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80031d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80031d8:	b29b      	uxth	r3, r3
 80031da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031de:	45b9      	cmp	r9, r7
 80031e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80031e4:	f840 3b04 	str.w	r3, [r0], #4
 80031e8:	d2e8      	bcs.n	80031bc <quorem+0xb0>
 80031ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80031ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80031f2:	b92a      	cbnz	r2, 8003200 <quorem+0xf4>
 80031f4:	3b04      	subs	r3, #4
 80031f6:	429e      	cmp	r6, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	d30b      	bcc.n	8003214 <quorem+0x108>
 80031fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8003200:	4628      	mov	r0, r5
 8003202:	b003      	add	sp, #12
 8003204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	3b04      	subs	r3, #4
 800320c:	2a00      	cmp	r2, #0
 800320e:	d1ca      	bne.n	80031a6 <quorem+0x9a>
 8003210:	3c01      	subs	r4, #1
 8003212:	e7c5      	b.n	80031a0 <quorem+0x94>
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	3b04      	subs	r3, #4
 8003218:	2a00      	cmp	r2, #0
 800321a:	d1ef      	bne.n	80031fc <quorem+0xf0>
 800321c:	3c01      	subs	r4, #1
 800321e:	e7ea      	b.n	80031f6 <quorem+0xea>
 8003220:	2000      	movs	r0, #0
 8003222:	e7ee      	b.n	8003202 <quorem+0xf6>
 8003224:	0000      	movs	r0, r0
	...

08003228 <_dtoa_r>:
 8003228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322c:	ec57 6b10 	vmov	r6, r7, d0
 8003230:	b097      	sub	sp, #92	; 0x5c
 8003232:	e9cd 6700 	strd	r6, r7, [sp]
 8003236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003238:	9107      	str	r1, [sp, #28]
 800323a:	4604      	mov	r4, r0
 800323c:	920a      	str	r2, [sp, #40]	; 0x28
 800323e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003240:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003242:	b93e      	cbnz	r6, 8003254 <_dtoa_r+0x2c>
 8003244:	2010      	movs	r0, #16
 8003246:	f000 fdcb 	bl	8003de0 <malloc>
 800324a:	6260      	str	r0, [r4, #36]	; 0x24
 800324c:	6046      	str	r6, [r0, #4]
 800324e:	6086      	str	r6, [r0, #8]
 8003250:	6006      	str	r6, [r0, #0]
 8003252:	60c6      	str	r6, [r0, #12]
 8003254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	b151      	cbz	r1, 8003270 <_dtoa_r+0x48>
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	604a      	str	r2, [r1, #4]
 800325e:	2301      	movs	r3, #1
 8003260:	4093      	lsls	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
 8003264:	4620      	mov	r0, r4
 8003266:	f000 fe02 	bl	8003e6e <_Bfree>
 800326a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	9b01      	ldr	r3, [sp, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	bfbf      	itttt	lt
 8003276:	2301      	movlt	r3, #1
 8003278:	602b      	strlt	r3, [r5, #0]
 800327a:	9b01      	ldrlt	r3, [sp, #4]
 800327c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003280:	bfb2      	itee	lt
 8003282:	9301      	strlt	r3, [sp, #4]
 8003284:	2300      	movge	r3, #0
 8003286:	602b      	strge	r3, [r5, #0]
 8003288:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800328c:	4ba8      	ldr	r3, [pc, #672]	; (8003530 <_dtoa_r+0x308>)
 800328e:	ea33 0308 	bics.w	r3, r3, r8
 8003292:	d11b      	bne.n	80032cc <_dtoa_r+0xa4>
 8003294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003296:	f242 730f 	movw	r3, #9999	; 0x270f
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	9b00      	ldr	r3, [sp, #0]
 800329e:	b923      	cbnz	r3, 80032aa <_dtoa_r+0x82>
 80032a0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80032a4:	2800      	cmp	r0, #0
 80032a6:	f000 8578 	beq.w	8003d9a <_dtoa_r+0xb72>
 80032aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032ac:	b953      	cbnz	r3, 80032c4 <_dtoa_r+0x9c>
 80032ae:	4ba1      	ldr	r3, [pc, #644]	; (8003534 <_dtoa_r+0x30c>)
 80032b0:	e021      	b.n	80032f6 <_dtoa_r+0xce>
 80032b2:	4ba1      	ldr	r3, [pc, #644]	; (8003538 <_dtoa_r+0x310>)
 80032b4:	9302      	str	r3, [sp, #8]
 80032b6:	3308      	adds	r3, #8
 80032b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	9802      	ldr	r0, [sp, #8]
 80032be:	b017      	add	sp, #92	; 0x5c
 80032c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c4:	4b9b      	ldr	r3, [pc, #620]	; (8003534 <_dtoa_r+0x30c>)
 80032c6:	9302      	str	r3, [sp, #8]
 80032c8:	3303      	adds	r3, #3
 80032ca:	e7f5      	b.n	80032b8 <_dtoa_r+0x90>
 80032cc:	e9dd 6700 	ldrd	r6, r7, [sp]
 80032d0:	2200      	movs	r2, #0
 80032d2:	2300      	movs	r3, #0
 80032d4:	4630      	mov	r0, r6
 80032d6:	4639      	mov	r1, r7
 80032d8:	f7fd fb9e 	bl	8000a18 <__aeabi_dcmpeq>
 80032dc:	4681      	mov	r9, r0
 80032de:	b160      	cbz	r0, 80032fa <_dtoa_r+0xd2>
 80032e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80032e2:	2301      	movs	r3, #1
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8553 	beq.w	8003d94 <_dtoa_r+0xb6c>
 80032ee:	4b93      	ldr	r3, [pc, #588]	; (800353c <_dtoa_r+0x314>)
 80032f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	9302      	str	r3, [sp, #8]
 80032f8:	e7e0      	b.n	80032bc <_dtoa_r+0x94>
 80032fa:	aa14      	add	r2, sp, #80	; 0x50
 80032fc:	a915      	add	r1, sp, #84	; 0x54
 80032fe:	ec47 6b10 	vmov	d0, r6, r7
 8003302:	4620      	mov	r0, r4
 8003304:	f001 f801 	bl	800430a <__d2b>
 8003308:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800330c:	4682      	mov	sl, r0
 800330e:	2d00      	cmp	r5, #0
 8003310:	d07e      	beq.n	8003410 <_dtoa_r+0x1e8>
 8003312:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003316:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800331a:	4630      	mov	r0, r6
 800331c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003320:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003324:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003328:	2200      	movs	r2, #0
 800332a:	4b85      	ldr	r3, [pc, #532]	; (8003540 <_dtoa_r+0x318>)
 800332c:	f7fc ff58 	bl	80001e0 <__aeabi_dsub>
 8003330:	a379      	add	r3, pc, #484	; (adr r3, 8003518 <_dtoa_r+0x2f0>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fd f907 	bl	8000548 <__aeabi_dmul>
 800333a:	a379      	add	r3, pc, #484	; (adr r3, 8003520 <_dtoa_r+0x2f8>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f7fc ff50 	bl	80001e4 <__adddf3>
 8003344:	4606      	mov	r6, r0
 8003346:	4628      	mov	r0, r5
 8003348:	460f      	mov	r7, r1
 800334a:	f7fd f897 	bl	800047c <__aeabi_i2d>
 800334e:	a376      	add	r3, pc, #472	; (adr r3, 8003528 <_dtoa_r+0x300>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fd f8f8 	bl	8000548 <__aeabi_dmul>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4630      	mov	r0, r6
 800335e:	4639      	mov	r1, r7
 8003360:	f7fc ff40 	bl	80001e4 <__adddf3>
 8003364:	4606      	mov	r6, r0
 8003366:	460f      	mov	r7, r1
 8003368:	f7fd fb9e 	bl	8000aa8 <__aeabi_d2iz>
 800336c:	2200      	movs	r2, #0
 800336e:	4683      	mov	fp, r0
 8003370:	2300      	movs	r3, #0
 8003372:	4630      	mov	r0, r6
 8003374:	4639      	mov	r1, r7
 8003376:	f7fd fb59 	bl	8000a2c <__aeabi_dcmplt>
 800337a:	b158      	cbz	r0, 8003394 <_dtoa_r+0x16c>
 800337c:	4658      	mov	r0, fp
 800337e:	f7fd f87d 	bl	800047c <__aeabi_i2d>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4630      	mov	r0, r6
 8003388:	4639      	mov	r1, r7
 800338a:	f7fd fb45 	bl	8000a18 <__aeabi_dcmpeq>
 800338e:	b908      	cbnz	r0, 8003394 <_dtoa_r+0x16c>
 8003390:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003394:	f1bb 0f16 	cmp.w	fp, #22
 8003398:	d859      	bhi.n	800344e <_dtoa_r+0x226>
 800339a:	496a      	ldr	r1, [pc, #424]	; (8003544 <_dtoa_r+0x31c>)
 800339c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80033a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033a8:	f7fd fb5e 	bl	8000a68 <__aeabi_dcmpgt>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d050      	beq.n	8003452 <_dtoa_r+0x22a>
 80033b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80033b4:	2300      	movs	r3, #0
 80033b6:	930e      	str	r3, [sp, #56]	; 0x38
 80033b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80033ba:	1b5d      	subs	r5, r3, r5
 80033bc:	1e6b      	subs	r3, r5, #1
 80033be:	9306      	str	r3, [sp, #24]
 80033c0:	bf45      	ittet	mi
 80033c2:	f1c5 0301 	rsbmi	r3, r5, #1
 80033c6:	9305      	strmi	r3, [sp, #20]
 80033c8:	2300      	movpl	r3, #0
 80033ca:	2300      	movmi	r3, #0
 80033cc:	bf4c      	ite	mi
 80033ce:	9306      	strmi	r3, [sp, #24]
 80033d0:	9305      	strpl	r3, [sp, #20]
 80033d2:	f1bb 0f00 	cmp.w	fp, #0
 80033d6:	db3e      	blt.n	8003456 <_dtoa_r+0x22e>
 80033d8:	9b06      	ldr	r3, [sp, #24]
 80033da:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80033de:	445b      	add	r3, fp
 80033e0:	9306      	str	r3, [sp, #24]
 80033e2:	2300      	movs	r3, #0
 80033e4:	9308      	str	r3, [sp, #32]
 80033e6:	9b07      	ldr	r3, [sp, #28]
 80033e8:	2b09      	cmp	r3, #9
 80033ea:	f200 80af 	bhi.w	800354c <_dtoa_r+0x324>
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	bfc4      	itt	gt
 80033f2:	3b04      	subgt	r3, #4
 80033f4:	9307      	strgt	r3, [sp, #28]
 80033f6:	9b07      	ldr	r3, [sp, #28]
 80033f8:	f1a3 0302 	sub.w	r3, r3, #2
 80033fc:	bfcc      	ite	gt
 80033fe:	2600      	movgt	r6, #0
 8003400:	2601      	movle	r6, #1
 8003402:	2b03      	cmp	r3, #3
 8003404:	f200 80ae 	bhi.w	8003564 <_dtoa_r+0x33c>
 8003408:	e8df f003 	tbb	[pc, r3]
 800340c:	772f8482 	.word	0x772f8482
 8003410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003412:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003414:	441d      	add	r5, r3
 8003416:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800341a:	2b20      	cmp	r3, #32
 800341c:	dd11      	ble.n	8003442 <_dtoa_r+0x21a>
 800341e:	9a00      	ldr	r2, [sp, #0]
 8003420:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003424:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003428:	fa22 f000 	lsr.w	r0, r2, r0
 800342c:	fa08 f303 	lsl.w	r3, r8, r3
 8003430:	4318      	orrs	r0, r3
 8003432:	f7fd f813 	bl	800045c <__aeabi_ui2d>
 8003436:	2301      	movs	r3, #1
 8003438:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800343c:	3d01      	subs	r5, #1
 800343e:	9312      	str	r3, [sp, #72]	; 0x48
 8003440:	e772      	b.n	8003328 <_dtoa_r+0x100>
 8003442:	f1c3 0020 	rsb	r0, r3, #32
 8003446:	9b00      	ldr	r3, [sp, #0]
 8003448:	fa03 f000 	lsl.w	r0, r3, r0
 800344c:	e7f1      	b.n	8003432 <_dtoa_r+0x20a>
 800344e:	2301      	movs	r3, #1
 8003450:	e7b1      	b.n	80033b6 <_dtoa_r+0x18e>
 8003452:	900e      	str	r0, [sp, #56]	; 0x38
 8003454:	e7b0      	b.n	80033b8 <_dtoa_r+0x190>
 8003456:	9b05      	ldr	r3, [sp, #20]
 8003458:	eba3 030b 	sub.w	r3, r3, fp
 800345c:	9305      	str	r3, [sp, #20]
 800345e:	f1cb 0300 	rsb	r3, fp, #0
 8003462:	9308      	str	r3, [sp, #32]
 8003464:	2300      	movs	r3, #0
 8003466:	930b      	str	r3, [sp, #44]	; 0x2c
 8003468:	e7bd      	b.n	80033e6 <_dtoa_r+0x1be>
 800346a:	2301      	movs	r3, #1
 800346c:	9309      	str	r3, [sp, #36]	; 0x24
 800346e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	dd7a      	ble.n	800356a <_dtoa_r+0x342>
 8003474:	9304      	str	r3, [sp, #16]
 8003476:	9303      	str	r3, [sp, #12]
 8003478:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800347a:	2200      	movs	r2, #0
 800347c:	606a      	str	r2, [r5, #4]
 800347e:	2104      	movs	r1, #4
 8003480:	f101 0214 	add.w	r2, r1, #20
 8003484:	429a      	cmp	r2, r3
 8003486:	d975      	bls.n	8003574 <_dtoa_r+0x34c>
 8003488:	6869      	ldr	r1, [r5, #4]
 800348a:	4620      	mov	r0, r4
 800348c:	f000 fcbb 	bl	8003e06 <_Balloc>
 8003490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003492:	6028      	str	r0, [r5, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	9b03      	ldr	r3, [sp, #12]
 800349a:	2b0e      	cmp	r3, #14
 800349c:	f200 80e5 	bhi.w	800366a <_dtoa_r+0x442>
 80034a0:	2e00      	cmp	r6, #0
 80034a2:	f000 80e2 	beq.w	800366a <_dtoa_r+0x442>
 80034a6:	ed9d 7b00 	vldr	d7, [sp]
 80034aa:	f1bb 0f00 	cmp.w	fp, #0
 80034ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80034b2:	dd74      	ble.n	800359e <_dtoa_r+0x376>
 80034b4:	4a23      	ldr	r2, [pc, #140]	; (8003544 <_dtoa_r+0x31c>)
 80034b6:	f00b 030f 	and.w	r3, fp, #15
 80034ba:	ea4f 162b 	mov.w	r6, fp, asr #4
 80034be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80034c2:	06f0      	lsls	r0, r6, #27
 80034c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034c8:	d559      	bpl.n	800357e <_dtoa_r+0x356>
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <_dtoa_r+0x320>)
 80034cc:	ec51 0b17 	vmov	r0, r1, d7
 80034d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80034d4:	f7fd f962 	bl	800079c <__aeabi_ddiv>
 80034d8:	e9cd 0100 	strd	r0, r1, [sp]
 80034dc:	f006 060f 	and.w	r6, r6, #15
 80034e0:	2503      	movs	r5, #3
 80034e2:	4f19      	ldr	r7, [pc, #100]	; (8003548 <_dtoa_r+0x320>)
 80034e4:	2e00      	cmp	r6, #0
 80034e6:	d14c      	bne.n	8003582 <_dtoa_r+0x35a>
 80034e8:	4642      	mov	r2, r8
 80034ea:	464b      	mov	r3, r9
 80034ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034f0:	f7fd f954 	bl	800079c <__aeabi_ddiv>
 80034f4:	e9cd 0100 	strd	r0, r1, [sp]
 80034f8:	e06a      	b.n	80035d0 <_dtoa_r+0x3a8>
 80034fa:	2301      	movs	r3, #1
 80034fc:	9309      	str	r3, [sp, #36]	; 0x24
 80034fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003500:	445b      	add	r3, fp
 8003502:	9304      	str	r3, [sp, #16]
 8003504:	3301      	adds	r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	9303      	str	r3, [sp, #12]
 800350a:	bfb8      	it	lt
 800350c:	2301      	movlt	r3, #1
 800350e:	e7b3      	b.n	8003478 <_dtoa_r+0x250>
 8003510:	2300      	movs	r3, #0
 8003512:	e7ab      	b.n	800346c <_dtoa_r+0x244>
 8003514:	2300      	movs	r3, #0
 8003516:	e7f1      	b.n	80034fc <_dtoa_r+0x2d4>
 8003518:	636f4361 	.word	0x636f4361
 800351c:	3fd287a7 	.word	0x3fd287a7
 8003520:	8b60c8b3 	.word	0x8b60c8b3
 8003524:	3fc68a28 	.word	0x3fc68a28
 8003528:	509f79fb 	.word	0x509f79fb
 800352c:	3fd34413 	.word	0x3fd34413
 8003530:	7ff00000 	.word	0x7ff00000
 8003534:	0800457b 	.word	0x0800457b
 8003538:	08004572 	.word	0x08004572
 800353c:	08004571 	.word	0x08004571
 8003540:	3ff80000 	.word	0x3ff80000
 8003544:	080045a8 	.word	0x080045a8
 8003548:	08004580 	.word	0x08004580
 800354c:	2601      	movs	r6, #1
 800354e:	2300      	movs	r3, #0
 8003550:	9307      	str	r3, [sp, #28]
 8003552:	9609      	str	r6, [sp, #36]	; 0x24
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	9303      	str	r3, [sp, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	2312      	movs	r3, #18
 8003560:	920a      	str	r2, [sp, #40]	; 0x28
 8003562:	e789      	b.n	8003478 <_dtoa_r+0x250>
 8003564:	2301      	movs	r3, #1
 8003566:	9309      	str	r3, [sp, #36]	; 0x24
 8003568:	e7f4      	b.n	8003554 <_dtoa_r+0x32c>
 800356a:	2301      	movs	r3, #1
 800356c:	9304      	str	r3, [sp, #16]
 800356e:	9303      	str	r3, [sp, #12]
 8003570:	461a      	mov	r2, r3
 8003572:	e7f5      	b.n	8003560 <_dtoa_r+0x338>
 8003574:	686a      	ldr	r2, [r5, #4]
 8003576:	3201      	adds	r2, #1
 8003578:	606a      	str	r2, [r5, #4]
 800357a:	0049      	lsls	r1, r1, #1
 800357c:	e780      	b.n	8003480 <_dtoa_r+0x258>
 800357e:	2502      	movs	r5, #2
 8003580:	e7af      	b.n	80034e2 <_dtoa_r+0x2ba>
 8003582:	07f1      	lsls	r1, r6, #31
 8003584:	d508      	bpl.n	8003598 <_dtoa_r+0x370>
 8003586:	4640      	mov	r0, r8
 8003588:	4649      	mov	r1, r9
 800358a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800358e:	f7fc ffdb 	bl	8000548 <__aeabi_dmul>
 8003592:	3501      	adds	r5, #1
 8003594:	4680      	mov	r8, r0
 8003596:	4689      	mov	r9, r1
 8003598:	1076      	asrs	r6, r6, #1
 800359a:	3708      	adds	r7, #8
 800359c:	e7a2      	b.n	80034e4 <_dtoa_r+0x2bc>
 800359e:	f000 809d 	beq.w	80036dc <_dtoa_r+0x4b4>
 80035a2:	f1cb 0600 	rsb	r6, fp, #0
 80035a6:	4b9f      	ldr	r3, [pc, #636]	; (8003824 <_dtoa_r+0x5fc>)
 80035a8:	4f9f      	ldr	r7, [pc, #636]	; (8003828 <_dtoa_r+0x600>)
 80035aa:	f006 020f 	and.w	r2, r6, #15
 80035ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80035ba:	f7fc ffc5 	bl	8000548 <__aeabi_dmul>
 80035be:	e9cd 0100 	strd	r0, r1, [sp]
 80035c2:	1136      	asrs	r6, r6, #4
 80035c4:	2300      	movs	r3, #0
 80035c6:	2502      	movs	r5, #2
 80035c8:	2e00      	cmp	r6, #0
 80035ca:	d17c      	bne.n	80036c6 <_dtoa_r+0x49e>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d191      	bne.n	80034f4 <_dtoa_r+0x2cc>
 80035d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8084 	beq.w	80036e0 <_dtoa_r+0x4b8>
 80035d8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80035dc:	2200      	movs	r2, #0
 80035de:	4b93      	ldr	r3, [pc, #588]	; (800382c <_dtoa_r+0x604>)
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	f7fd fa22 	bl	8000a2c <__aeabi_dcmplt>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d079      	beq.n	80036e0 <_dtoa_r+0x4b8>
 80035ec:	9b03      	ldr	r3, [sp, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d076      	beq.n	80036e0 <_dtoa_r+0x4b8>
 80035f2:	9b04      	ldr	r3, [sp, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dd34      	ble.n	8003662 <_dtoa_r+0x43a>
 80035f8:	2200      	movs	r2, #0
 80035fa:	4b8d      	ldr	r3, [pc, #564]	; (8003830 <_dtoa_r+0x608>)
 80035fc:	4640      	mov	r0, r8
 80035fe:	4649      	mov	r1, r9
 8003600:	f7fc ffa2 	bl	8000548 <__aeabi_dmul>
 8003604:	e9cd 0100 	strd	r0, r1, [sp]
 8003608:	9e04      	ldr	r6, [sp, #16]
 800360a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800360e:	3501      	adds	r5, #1
 8003610:	4628      	mov	r0, r5
 8003612:	f7fc ff33 	bl	800047c <__aeabi_i2d>
 8003616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800361a:	f7fc ff95 	bl	8000548 <__aeabi_dmul>
 800361e:	2200      	movs	r2, #0
 8003620:	4b84      	ldr	r3, [pc, #528]	; (8003834 <_dtoa_r+0x60c>)
 8003622:	f7fc fddf 	bl	80001e4 <__adddf3>
 8003626:	4680      	mov	r8, r0
 8003628:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800362c:	2e00      	cmp	r6, #0
 800362e:	d15a      	bne.n	80036e6 <_dtoa_r+0x4be>
 8003630:	2200      	movs	r2, #0
 8003632:	4b81      	ldr	r3, [pc, #516]	; (8003838 <_dtoa_r+0x610>)
 8003634:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003638:	f7fc fdd2 	bl	80001e0 <__aeabi_dsub>
 800363c:	4642      	mov	r2, r8
 800363e:	464b      	mov	r3, r9
 8003640:	e9cd 0100 	strd	r0, r1, [sp]
 8003644:	f7fd fa10 	bl	8000a68 <__aeabi_dcmpgt>
 8003648:	2800      	cmp	r0, #0
 800364a:	f040 829b 	bne.w	8003b84 <_dtoa_r+0x95c>
 800364e:	4642      	mov	r2, r8
 8003650:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003658:	f7fd f9e8 	bl	8000a2c <__aeabi_dcmplt>
 800365c:	2800      	cmp	r0, #0
 800365e:	f040 828f 	bne.w	8003b80 <_dtoa_r+0x958>
 8003662:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003666:	e9cd 2300 	strd	r2, r3, [sp]
 800366a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800366c:	2b00      	cmp	r3, #0
 800366e:	f2c0 8150 	blt.w	8003912 <_dtoa_r+0x6ea>
 8003672:	f1bb 0f0e 	cmp.w	fp, #14
 8003676:	f300 814c 	bgt.w	8003912 <_dtoa_r+0x6ea>
 800367a:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <_dtoa_r+0x5fc>)
 800367c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003680:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	f280 80da 	bge.w	8003840 <_dtoa_r+0x618>
 800368c:	9b03      	ldr	r3, [sp, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f300 80d6 	bgt.w	8003840 <_dtoa_r+0x618>
 8003694:	f040 8273 	bne.w	8003b7e <_dtoa_r+0x956>
 8003698:	2200      	movs	r2, #0
 800369a:	4b67      	ldr	r3, [pc, #412]	; (8003838 <_dtoa_r+0x610>)
 800369c:	4640      	mov	r0, r8
 800369e:	4649      	mov	r1, r9
 80036a0:	f7fc ff52 	bl	8000548 <__aeabi_dmul>
 80036a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036a8:	f7fd f9d4 	bl	8000a54 <__aeabi_dcmpge>
 80036ac:	9e03      	ldr	r6, [sp, #12]
 80036ae:	4637      	mov	r7, r6
 80036b0:	2800      	cmp	r0, #0
 80036b2:	f040 824a 	bne.w	8003b4a <_dtoa_r+0x922>
 80036b6:	9b02      	ldr	r3, [sp, #8]
 80036b8:	9a02      	ldr	r2, [sp, #8]
 80036ba:	1c5d      	adds	r5, r3, #1
 80036bc:	2331      	movs	r3, #49	; 0x31
 80036be:	7013      	strb	r3, [r2, #0]
 80036c0:	f10b 0b01 	add.w	fp, fp, #1
 80036c4:	e245      	b.n	8003b52 <_dtoa_r+0x92a>
 80036c6:	07f2      	lsls	r2, r6, #31
 80036c8:	d505      	bpl.n	80036d6 <_dtoa_r+0x4ae>
 80036ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ce:	f7fc ff3b 	bl	8000548 <__aeabi_dmul>
 80036d2:	3501      	adds	r5, #1
 80036d4:	2301      	movs	r3, #1
 80036d6:	1076      	asrs	r6, r6, #1
 80036d8:	3708      	adds	r7, #8
 80036da:	e775      	b.n	80035c8 <_dtoa_r+0x3a0>
 80036dc:	2502      	movs	r5, #2
 80036de:	e777      	b.n	80035d0 <_dtoa_r+0x3a8>
 80036e0:	465f      	mov	r7, fp
 80036e2:	9e03      	ldr	r6, [sp, #12]
 80036e4:	e794      	b.n	8003610 <_dtoa_r+0x3e8>
 80036e6:	9a02      	ldr	r2, [sp, #8]
 80036e8:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <_dtoa_r+0x5fc>)
 80036ea:	4432      	add	r2, r6
 80036ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80036ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036f0:	1e71      	subs	r1, r6, #1
 80036f2:	2a00      	cmp	r2, #0
 80036f4:	d048      	beq.n	8003788 <_dtoa_r+0x560>
 80036f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	2000      	movs	r0, #0
 8003700:	494e      	ldr	r1, [pc, #312]	; (800383c <_dtoa_r+0x614>)
 8003702:	f7fd f84b 	bl	800079c <__aeabi_ddiv>
 8003706:	4642      	mov	r2, r8
 8003708:	464b      	mov	r3, r9
 800370a:	f7fc fd69 	bl	80001e0 <__aeabi_dsub>
 800370e:	9d02      	ldr	r5, [sp, #8]
 8003710:	4680      	mov	r8, r0
 8003712:	4689      	mov	r9, r1
 8003714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003718:	f7fd f9c6 	bl	8000aa8 <__aeabi_d2iz>
 800371c:	4606      	mov	r6, r0
 800371e:	f7fc fead 	bl	800047c <__aeabi_i2d>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800372a:	f7fc fd59 	bl	80001e0 <__aeabi_dsub>
 800372e:	3630      	adds	r6, #48	; 0x30
 8003730:	f805 6b01 	strb.w	r6, [r5], #1
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	e9cd 0100 	strd	r0, r1, [sp]
 800373c:	f7fd f976 	bl	8000a2c <__aeabi_dcmplt>
 8003740:	2800      	cmp	r0, #0
 8003742:	d165      	bne.n	8003810 <_dtoa_r+0x5e8>
 8003744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003748:	2000      	movs	r0, #0
 800374a:	4938      	ldr	r1, [pc, #224]	; (800382c <_dtoa_r+0x604>)
 800374c:	f7fc fd48 	bl	80001e0 <__aeabi_dsub>
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	f7fd f96a 	bl	8000a2c <__aeabi_dcmplt>
 8003758:	2800      	cmp	r0, #0
 800375a:	f040 80ba 	bne.w	80038d2 <_dtoa_r+0x6aa>
 800375e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003760:	429d      	cmp	r5, r3
 8003762:	f43f af7e 	beq.w	8003662 <_dtoa_r+0x43a>
 8003766:	2200      	movs	r2, #0
 8003768:	4b31      	ldr	r3, [pc, #196]	; (8003830 <_dtoa_r+0x608>)
 800376a:	4640      	mov	r0, r8
 800376c:	4649      	mov	r1, r9
 800376e:	f7fc feeb 	bl	8000548 <__aeabi_dmul>
 8003772:	2200      	movs	r2, #0
 8003774:	4680      	mov	r8, r0
 8003776:	4689      	mov	r9, r1
 8003778:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <_dtoa_r+0x608>)
 800377a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800377e:	f7fc fee3 	bl	8000548 <__aeabi_dmul>
 8003782:	e9cd 0100 	strd	r0, r1, [sp]
 8003786:	e7c5      	b.n	8003714 <_dtoa_r+0x4ec>
 8003788:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800378c:	4642      	mov	r2, r8
 800378e:	464b      	mov	r3, r9
 8003790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003794:	f7fc fed8 	bl	8000548 <__aeabi_dmul>
 8003798:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800379c:	9d02      	ldr	r5, [sp, #8]
 800379e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037a2:	f7fd f981 	bl	8000aa8 <__aeabi_d2iz>
 80037a6:	4606      	mov	r6, r0
 80037a8:	f7fc fe68 	bl	800047c <__aeabi_i2d>
 80037ac:	3630      	adds	r6, #48	; 0x30
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037b6:	f7fc fd13 	bl	80001e0 <__aeabi_dsub>
 80037ba:	f805 6b01 	strb.w	r6, [r5], #1
 80037be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80037c0:	42ab      	cmp	r3, r5
 80037c2:	4680      	mov	r8, r0
 80037c4:	4689      	mov	r9, r1
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	d125      	bne.n	8003818 <_dtoa_r+0x5f0>
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <_dtoa_r+0x614>)
 80037ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037d2:	f7fc fd07 	bl	80001e4 <__adddf3>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4640      	mov	r0, r8
 80037dc:	4649      	mov	r1, r9
 80037de:	f7fd f943 	bl	8000a68 <__aeabi_dcmpgt>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d175      	bne.n	80038d2 <_dtoa_r+0x6aa>
 80037e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80037ea:	2000      	movs	r0, #0
 80037ec:	4913      	ldr	r1, [pc, #76]	; (800383c <_dtoa_r+0x614>)
 80037ee:	f7fc fcf7 	bl	80001e0 <__aeabi_dsub>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4640      	mov	r0, r8
 80037f8:	4649      	mov	r1, r9
 80037fa:	f7fd f917 	bl	8000a2c <__aeabi_dcmplt>
 80037fe:	2800      	cmp	r0, #0
 8003800:	f43f af2f 	beq.w	8003662 <_dtoa_r+0x43a>
 8003804:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003808:	2b30      	cmp	r3, #48	; 0x30
 800380a:	f105 32ff 	add.w	r2, r5, #4294967295
 800380e:	d001      	beq.n	8003814 <_dtoa_r+0x5ec>
 8003810:	46bb      	mov	fp, r7
 8003812:	e04d      	b.n	80038b0 <_dtoa_r+0x688>
 8003814:	4615      	mov	r5, r2
 8003816:	e7f5      	b.n	8003804 <_dtoa_r+0x5dc>
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <_dtoa_r+0x608>)
 800381a:	f7fc fe95 	bl	8000548 <__aeabi_dmul>
 800381e:	e9cd 0100 	strd	r0, r1, [sp]
 8003822:	e7bc      	b.n	800379e <_dtoa_r+0x576>
 8003824:	080045a8 	.word	0x080045a8
 8003828:	08004580 	.word	0x08004580
 800382c:	3ff00000 	.word	0x3ff00000
 8003830:	40240000 	.word	0x40240000
 8003834:	401c0000 	.word	0x401c0000
 8003838:	40140000 	.word	0x40140000
 800383c:	3fe00000 	.word	0x3fe00000
 8003840:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003844:	9d02      	ldr	r5, [sp, #8]
 8003846:	4642      	mov	r2, r8
 8003848:	464b      	mov	r3, r9
 800384a:	4630      	mov	r0, r6
 800384c:	4639      	mov	r1, r7
 800384e:	f7fc ffa5 	bl	800079c <__aeabi_ddiv>
 8003852:	f7fd f929 	bl	8000aa8 <__aeabi_d2iz>
 8003856:	9000      	str	r0, [sp, #0]
 8003858:	f7fc fe10 	bl	800047c <__aeabi_i2d>
 800385c:	4642      	mov	r2, r8
 800385e:	464b      	mov	r3, r9
 8003860:	f7fc fe72 	bl	8000548 <__aeabi_dmul>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4630      	mov	r0, r6
 800386a:	4639      	mov	r1, r7
 800386c:	f7fc fcb8 	bl	80001e0 <__aeabi_dsub>
 8003870:	9e00      	ldr	r6, [sp, #0]
 8003872:	9f03      	ldr	r7, [sp, #12]
 8003874:	3630      	adds	r6, #48	; 0x30
 8003876:	f805 6b01 	strb.w	r6, [r5], #1
 800387a:	9e02      	ldr	r6, [sp, #8]
 800387c:	1bae      	subs	r6, r5, r6
 800387e:	42b7      	cmp	r7, r6
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	d138      	bne.n	80038f8 <_dtoa_r+0x6d0>
 8003886:	f7fc fcad 	bl	80001e4 <__adddf3>
 800388a:	4606      	mov	r6, r0
 800388c:	460f      	mov	r7, r1
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4640      	mov	r0, r8
 8003894:	4649      	mov	r1, r9
 8003896:	f7fd f8c9 	bl	8000a2c <__aeabi_dcmplt>
 800389a:	b9c8      	cbnz	r0, 80038d0 <_dtoa_r+0x6a8>
 800389c:	4632      	mov	r2, r6
 800389e:	463b      	mov	r3, r7
 80038a0:	4640      	mov	r0, r8
 80038a2:	4649      	mov	r1, r9
 80038a4:	f7fd f8b8 	bl	8000a18 <__aeabi_dcmpeq>
 80038a8:	b110      	cbz	r0, 80038b0 <_dtoa_r+0x688>
 80038aa:	9b00      	ldr	r3, [sp, #0]
 80038ac:	07db      	lsls	r3, r3, #31
 80038ae:	d40f      	bmi.n	80038d0 <_dtoa_r+0x6a8>
 80038b0:	4651      	mov	r1, sl
 80038b2:	4620      	mov	r0, r4
 80038b4:	f000 fadb 	bl	8003e6e <_Bfree>
 80038b8:	2300      	movs	r3, #0
 80038ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80038bc:	702b      	strb	r3, [r5, #0]
 80038be:	f10b 0301 	add.w	r3, fp, #1
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f43f acf8 	beq.w	80032bc <_dtoa_r+0x94>
 80038cc:	601d      	str	r5, [r3, #0]
 80038ce:	e4f5      	b.n	80032bc <_dtoa_r+0x94>
 80038d0:	465f      	mov	r7, fp
 80038d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80038d6:	2a39      	cmp	r2, #57	; 0x39
 80038d8:	f105 33ff 	add.w	r3, r5, #4294967295
 80038dc:	d106      	bne.n	80038ec <_dtoa_r+0x6c4>
 80038de:	9a02      	ldr	r2, [sp, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d107      	bne.n	80038f4 <_dtoa_r+0x6cc>
 80038e4:	2330      	movs	r3, #48	; 0x30
 80038e6:	7013      	strb	r3, [r2, #0]
 80038e8:	3701      	adds	r7, #1
 80038ea:	4613      	mov	r3, r2
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	3201      	adds	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e78d      	b.n	8003810 <_dtoa_r+0x5e8>
 80038f4:	461d      	mov	r5, r3
 80038f6:	e7ec      	b.n	80038d2 <_dtoa_r+0x6aa>
 80038f8:	2200      	movs	r2, #0
 80038fa:	4ba4      	ldr	r3, [pc, #656]	; (8003b8c <_dtoa_r+0x964>)
 80038fc:	f7fc fe24 	bl	8000548 <__aeabi_dmul>
 8003900:	2200      	movs	r2, #0
 8003902:	2300      	movs	r3, #0
 8003904:	4606      	mov	r6, r0
 8003906:	460f      	mov	r7, r1
 8003908:	f7fd f886 	bl	8000a18 <__aeabi_dcmpeq>
 800390c:	2800      	cmp	r0, #0
 800390e:	d09a      	beq.n	8003846 <_dtoa_r+0x61e>
 8003910:	e7ce      	b.n	80038b0 <_dtoa_r+0x688>
 8003912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003914:	2a00      	cmp	r2, #0
 8003916:	f000 80cd 	beq.w	8003ab4 <_dtoa_r+0x88c>
 800391a:	9a07      	ldr	r2, [sp, #28]
 800391c:	2a01      	cmp	r2, #1
 800391e:	f300 80af 	bgt.w	8003a80 <_dtoa_r+0x858>
 8003922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003924:	2a00      	cmp	r2, #0
 8003926:	f000 80a7 	beq.w	8003a78 <_dtoa_r+0x850>
 800392a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800392e:	9e08      	ldr	r6, [sp, #32]
 8003930:	9d05      	ldr	r5, [sp, #20]
 8003932:	9a05      	ldr	r2, [sp, #20]
 8003934:	441a      	add	r2, r3
 8003936:	9205      	str	r2, [sp, #20]
 8003938:	9a06      	ldr	r2, [sp, #24]
 800393a:	2101      	movs	r1, #1
 800393c:	441a      	add	r2, r3
 800393e:	4620      	mov	r0, r4
 8003940:	9206      	str	r2, [sp, #24]
 8003942:	f000 fb34 	bl	8003fae <__i2b>
 8003946:	4607      	mov	r7, r0
 8003948:	2d00      	cmp	r5, #0
 800394a:	dd0c      	ble.n	8003966 <_dtoa_r+0x73e>
 800394c:	9b06      	ldr	r3, [sp, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	dd09      	ble.n	8003966 <_dtoa_r+0x73e>
 8003952:	42ab      	cmp	r3, r5
 8003954:	9a05      	ldr	r2, [sp, #20]
 8003956:	bfa8      	it	ge
 8003958:	462b      	movge	r3, r5
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	9205      	str	r2, [sp, #20]
 800395e:	9a06      	ldr	r2, [sp, #24]
 8003960:	1aed      	subs	r5, r5, r3
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	9306      	str	r3, [sp, #24]
 8003966:	9b08      	ldr	r3, [sp, #32]
 8003968:	b1f3      	cbz	r3, 80039a8 <_dtoa_r+0x780>
 800396a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a5 	beq.w	8003abc <_dtoa_r+0x894>
 8003972:	2e00      	cmp	r6, #0
 8003974:	dd10      	ble.n	8003998 <_dtoa_r+0x770>
 8003976:	4639      	mov	r1, r7
 8003978:	4632      	mov	r2, r6
 800397a:	4620      	mov	r0, r4
 800397c:	f000 fbae 	bl	80040dc <__pow5mult>
 8003980:	4652      	mov	r2, sl
 8003982:	4601      	mov	r1, r0
 8003984:	4607      	mov	r7, r0
 8003986:	4620      	mov	r0, r4
 8003988:	f000 fb1a 	bl	8003fc0 <__multiply>
 800398c:	4651      	mov	r1, sl
 800398e:	4680      	mov	r8, r0
 8003990:	4620      	mov	r0, r4
 8003992:	f000 fa6c 	bl	8003e6e <_Bfree>
 8003996:	46c2      	mov	sl, r8
 8003998:	9b08      	ldr	r3, [sp, #32]
 800399a:	1b9a      	subs	r2, r3, r6
 800399c:	d004      	beq.n	80039a8 <_dtoa_r+0x780>
 800399e:	4651      	mov	r1, sl
 80039a0:	4620      	mov	r0, r4
 80039a2:	f000 fb9b 	bl	80040dc <__pow5mult>
 80039a6:	4682      	mov	sl, r0
 80039a8:	2101      	movs	r1, #1
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 faff 	bl	8003fae <__i2b>
 80039b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	4606      	mov	r6, r0
 80039b6:	f340 8083 	ble.w	8003ac0 <_dtoa_r+0x898>
 80039ba:	461a      	mov	r2, r3
 80039bc:	4601      	mov	r1, r0
 80039be:	4620      	mov	r0, r4
 80039c0:	f000 fb8c 	bl	80040dc <__pow5mult>
 80039c4:	9b07      	ldr	r3, [sp, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	4606      	mov	r6, r0
 80039ca:	dd7c      	ble.n	8003ac6 <_dtoa_r+0x89e>
 80039cc:	f04f 0800 	mov.w	r8, #0
 80039d0:	6933      	ldr	r3, [r6, #16]
 80039d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80039d6:	6918      	ldr	r0, [r3, #16]
 80039d8:	f000 fa9b 	bl	8003f12 <__hi0bits>
 80039dc:	f1c0 0020 	rsb	r0, r0, #32
 80039e0:	9b06      	ldr	r3, [sp, #24]
 80039e2:	4418      	add	r0, r3
 80039e4:	f010 001f 	ands.w	r0, r0, #31
 80039e8:	f000 8096 	beq.w	8003b18 <_dtoa_r+0x8f0>
 80039ec:	f1c0 0320 	rsb	r3, r0, #32
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	f340 8087 	ble.w	8003b04 <_dtoa_r+0x8dc>
 80039f6:	9b05      	ldr	r3, [sp, #20]
 80039f8:	f1c0 001c 	rsb	r0, r0, #28
 80039fc:	4403      	add	r3, r0
 80039fe:	9305      	str	r3, [sp, #20]
 8003a00:	9b06      	ldr	r3, [sp, #24]
 8003a02:	4405      	add	r5, r0
 8003a04:	4403      	add	r3, r0
 8003a06:	9306      	str	r3, [sp, #24]
 8003a08:	9b05      	ldr	r3, [sp, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	dd05      	ble.n	8003a1a <_dtoa_r+0x7f2>
 8003a0e:	4651      	mov	r1, sl
 8003a10:	461a      	mov	r2, r3
 8003a12:	4620      	mov	r0, r4
 8003a14:	f000 fbb0 	bl	8004178 <__lshift>
 8003a18:	4682      	mov	sl, r0
 8003a1a:	9b06      	ldr	r3, [sp, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	dd05      	ble.n	8003a2c <_dtoa_r+0x804>
 8003a20:	4631      	mov	r1, r6
 8003a22:	461a      	mov	r2, r3
 8003a24:	4620      	mov	r0, r4
 8003a26:	f000 fba7 	bl	8004178 <__lshift>
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d074      	beq.n	8003b1c <_dtoa_r+0x8f4>
 8003a32:	4631      	mov	r1, r6
 8003a34:	4650      	mov	r0, sl
 8003a36:	f000 fbf0 	bl	800421a <__mcmp>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	da6e      	bge.n	8003b1c <_dtoa_r+0x8f4>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	4651      	mov	r1, sl
 8003a42:	220a      	movs	r2, #10
 8003a44:	4620      	mov	r0, r4
 8003a46:	f000 fa29 	bl	8003e9c <__multadd>
 8003a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a50:	4682      	mov	sl, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 81a8 	beq.w	8003da8 <_dtoa_r+0xb80>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	4639      	mov	r1, r7
 8003a5c:	220a      	movs	r2, #10
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f000 fa1c 	bl	8003e9c <__multadd>
 8003a64:	9b04      	ldr	r3, [sp, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	4607      	mov	r7, r0
 8003a6a:	f300 80c8 	bgt.w	8003bfe <_dtoa_r+0x9d6>
 8003a6e:	9b07      	ldr	r3, [sp, #28]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f340 80c4 	ble.w	8003bfe <_dtoa_r+0x9d6>
 8003a76:	e059      	b.n	8003b2c <_dtoa_r+0x904>
 8003a78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003a7e:	e756      	b.n	800392e <_dtoa_r+0x706>
 8003a80:	9b03      	ldr	r3, [sp, #12]
 8003a82:	1e5e      	subs	r6, r3, #1
 8003a84:	9b08      	ldr	r3, [sp, #32]
 8003a86:	42b3      	cmp	r3, r6
 8003a88:	bfbf      	itttt	lt
 8003a8a:	9b08      	ldrlt	r3, [sp, #32]
 8003a8c:	9608      	strlt	r6, [sp, #32]
 8003a8e:	1af2      	sublt	r2, r6, r3
 8003a90:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8003a92:	bfb6      	itet	lt
 8003a94:	189b      	addlt	r3, r3, r2
 8003a96:	1b9e      	subge	r6, r3, r6
 8003a98:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	bfb8      	it	lt
 8003a9e:	2600      	movlt	r6, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bfb9      	ittee	lt
 8003aa4:	9b05      	ldrlt	r3, [sp, #20]
 8003aa6:	9a03      	ldrlt	r2, [sp, #12]
 8003aa8:	9d05      	ldrge	r5, [sp, #20]
 8003aaa:	9b03      	ldrge	r3, [sp, #12]
 8003aac:	bfbc      	itt	lt
 8003aae:	1a9d      	sublt	r5, r3, r2
 8003ab0:	2300      	movlt	r3, #0
 8003ab2:	e73e      	b.n	8003932 <_dtoa_r+0x70a>
 8003ab4:	9e08      	ldr	r6, [sp, #32]
 8003ab6:	9d05      	ldr	r5, [sp, #20]
 8003ab8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003aba:	e745      	b.n	8003948 <_dtoa_r+0x720>
 8003abc:	9a08      	ldr	r2, [sp, #32]
 8003abe:	e76e      	b.n	800399e <_dtoa_r+0x776>
 8003ac0:	9b07      	ldr	r3, [sp, #28]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	dc19      	bgt.n	8003afa <_dtoa_r+0x8d2>
 8003ac6:	9b00      	ldr	r3, [sp, #0]
 8003ac8:	b9bb      	cbnz	r3, 8003afa <_dtoa_r+0x8d2>
 8003aca:	9b01      	ldr	r3, [sp, #4]
 8003acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad0:	b99b      	cbnz	r3, 8003afa <_dtoa_r+0x8d2>
 8003ad2:	9b01      	ldr	r3, [sp, #4]
 8003ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ad8:	0d1b      	lsrs	r3, r3, #20
 8003ada:	051b      	lsls	r3, r3, #20
 8003adc:	b183      	cbz	r3, 8003b00 <_dtoa_r+0x8d8>
 8003ade:	9b05      	ldr	r3, [sp, #20]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	9305      	str	r3, [sp, #20]
 8003ae4:	9b06      	ldr	r3, [sp, #24]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	9306      	str	r3, [sp, #24]
 8003aea:	f04f 0801 	mov.w	r8, #1
 8003aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af6d 	bne.w	80039d0 <_dtoa_r+0x7a8>
 8003af6:	2001      	movs	r0, #1
 8003af8:	e772      	b.n	80039e0 <_dtoa_r+0x7b8>
 8003afa:	f04f 0800 	mov.w	r8, #0
 8003afe:	e7f6      	b.n	8003aee <_dtoa_r+0x8c6>
 8003b00:	4698      	mov	r8, r3
 8003b02:	e7f4      	b.n	8003aee <_dtoa_r+0x8c6>
 8003b04:	d080      	beq.n	8003a08 <_dtoa_r+0x7e0>
 8003b06:	9a05      	ldr	r2, [sp, #20]
 8003b08:	331c      	adds	r3, #28
 8003b0a:	441a      	add	r2, r3
 8003b0c:	9205      	str	r2, [sp, #20]
 8003b0e:	9a06      	ldr	r2, [sp, #24]
 8003b10:	441a      	add	r2, r3
 8003b12:	441d      	add	r5, r3
 8003b14:	4613      	mov	r3, r2
 8003b16:	e776      	b.n	8003a06 <_dtoa_r+0x7de>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	e7f4      	b.n	8003b06 <_dtoa_r+0x8de>
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	dc36      	bgt.n	8003b90 <_dtoa_r+0x968>
 8003b22:	9b07      	ldr	r3, [sp, #28]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	dd33      	ble.n	8003b90 <_dtoa_r+0x968>
 8003b28:	9b03      	ldr	r3, [sp, #12]
 8003b2a:	9304      	str	r3, [sp, #16]
 8003b2c:	9b04      	ldr	r3, [sp, #16]
 8003b2e:	b963      	cbnz	r3, 8003b4a <_dtoa_r+0x922>
 8003b30:	4631      	mov	r1, r6
 8003b32:	2205      	movs	r2, #5
 8003b34:	4620      	mov	r0, r4
 8003b36:	f000 f9b1 	bl	8003e9c <__multadd>
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	4606      	mov	r6, r0
 8003b3e:	4650      	mov	r0, sl
 8003b40:	f000 fb6b 	bl	800421a <__mcmp>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	f73f adb6 	bgt.w	80036b6 <_dtoa_r+0x48e>
 8003b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b4c:	9d02      	ldr	r5, [sp, #8]
 8003b4e:	ea6f 0b03 	mvn.w	fp, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	9303      	str	r3, [sp, #12]
 8003b56:	4631      	mov	r1, r6
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f000 f988 	bl	8003e6e <_Bfree>
 8003b5e:	2f00      	cmp	r7, #0
 8003b60:	f43f aea6 	beq.w	80038b0 <_dtoa_r+0x688>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	b12b      	cbz	r3, 8003b74 <_dtoa_r+0x94c>
 8003b68:	42bb      	cmp	r3, r7
 8003b6a:	d003      	beq.n	8003b74 <_dtoa_r+0x94c>
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f000 f97d 	bl	8003e6e <_Bfree>
 8003b74:	4639      	mov	r1, r7
 8003b76:	4620      	mov	r0, r4
 8003b78:	f000 f979 	bl	8003e6e <_Bfree>
 8003b7c:	e698      	b.n	80038b0 <_dtoa_r+0x688>
 8003b7e:	2600      	movs	r6, #0
 8003b80:	4637      	mov	r7, r6
 8003b82:	e7e2      	b.n	8003b4a <_dtoa_r+0x922>
 8003b84:	46bb      	mov	fp, r7
 8003b86:	4637      	mov	r7, r6
 8003b88:	e595      	b.n	80036b6 <_dtoa_r+0x48e>
 8003b8a:	bf00      	nop
 8003b8c:	40240000 	.word	0x40240000
 8003b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b92:	bb93      	cbnz	r3, 8003bfa <_dtoa_r+0x9d2>
 8003b94:	9b03      	ldr	r3, [sp, #12]
 8003b96:	9304      	str	r3, [sp, #16]
 8003b98:	9d02      	ldr	r5, [sp, #8]
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4650      	mov	r0, sl
 8003b9e:	f7ff fab5 	bl	800310c <quorem>
 8003ba2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003ba6:	f805 9b01 	strb.w	r9, [r5], #1
 8003baa:	9b02      	ldr	r3, [sp, #8]
 8003bac:	9a04      	ldr	r2, [sp, #16]
 8003bae:	1aeb      	subs	r3, r5, r3
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	f300 80dc 	bgt.w	8003d6e <_dtoa_r+0xb46>
 8003bb6:	9b02      	ldr	r3, [sp, #8]
 8003bb8:	2a01      	cmp	r2, #1
 8003bba:	bfac      	ite	ge
 8003bbc:	189b      	addge	r3, r3, r2
 8003bbe:	3301      	addlt	r3, #1
 8003bc0:	4698      	mov	r8, r3
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	9303      	str	r3, [sp, #12]
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f000 fad4 	bl	8004178 <__lshift>
 8003bd0:	4631      	mov	r1, r6
 8003bd2:	4682      	mov	sl, r0
 8003bd4:	f000 fb21 	bl	800421a <__mcmp>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	f300 808d 	bgt.w	8003cf8 <_dtoa_r+0xad0>
 8003bde:	d103      	bne.n	8003be8 <_dtoa_r+0x9c0>
 8003be0:	f019 0f01 	tst.w	r9, #1
 8003be4:	f040 8088 	bne.w	8003cf8 <_dtoa_r+0xad0>
 8003be8:	4645      	mov	r5, r8
 8003bea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003bee:	2b30      	cmp	r3, #48	; 0x30
 8003bf0:	f105 32ff 	add.w	r2, r5, #4294967295
 8003bf4:	d1af      	bne.n	8003b56 <_dtoa_r+0x92e>
 8003bf6:	4615      	mov	r5, r2
 8003bf8:	e7f7      	b.n	8003bea <_dtoa_r+0x9c2>
 8003bfa:	9b03      	ldr	r3, [sp, #12]
 8003bfc:	9304      	str	r3, [sp, #16]
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	dd05      	ble.n	8003c0e <_dtoa_r+0x9e6>
 8003c02:	4639      	mov	r1, r7
 8003c04:	462a      	mov	r2, r5
 8003c06:	4620      	mov	r0, r4
 8003c08:	f000 fab6 	bl	8004178 <__lshift>
 8003c0c:	4607      	mov	r7, r0
 8003c0e:	f1b8 0f00 	cmp.w	r8, #0
 8003c12:	d04c      	beq.n	8003cae <_dtoa_r+0xa86>
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 f8f5 	bl	8003e06 <_Balloc>
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	3202      	adds	r2, #2
 8003c20:	4605      	mov	r5, r0
 8003c22:	0092      	lsls	r2, r2, #2
 8003c24:	f107 010c 	add.w	r1, r7, #12
 8003c28:	300c      	adds	r0, #12
 8003c2a:	f000 f8e1 	bl	8003df0 <memcpy>
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4629      	mov	r1, r5
 8003c32:	4620      	mov	r0, r4
 8003c34:	f000 faa0 	bl	8004178 <__lshift>
 8003c38:	9b00      	ldr	r3, [sp, #0]
 8003c3a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003c3e:	9703      	str	r7, [sp, #12]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	4607      	mov	r7, r0
 8003c46:	9305      	str	r3, [sp, #20]
 8003c48:	4631      	mov	r1, r6
 8003c4a:	4650      	mov	r0, sl
 8003c4c:	f7ff fa5e 	bl	800310c <quorem>
 8003c50:	9903      	ldr	r1, [sp, #12]
 8003c52:	4605      	mov	r5, r0
 8003c54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003c58:	4650      	mov	r0, sl
 8003c5a:	f000 fade 	bl	800421a <__mcmp>
 8003c5e:	463a      	mov	r2, r7
 8003c60:	9000      	str	r0, [sp, #0]
 8003c62:	4631      	mov	r1, r6
 8003c64:	4620      	mov	r0, r4
 8003c66:	f000 faf2 	bl	800424e <__mdiff>
 8003c6a:	68c3      	ldr	r3, [r0, #12]
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	bb03      	cbnz	r3, 8003cb2 <_dtoa_r+0xa8a>
 8003c70:	4601      	mov	r1, r0
 8003c72:	9006      	str	r0, [sp, #24]
 8003c74:	4650      	mov	r0, sl
 8003c76:	f000 fad0 	bl	800421a <__mcmp>
 8003c7a:	9a06      	ldr	r2, [sp, #24]
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4620      	mov	r0, r4
 8003c82:	9306      	str	r3, [sp, #24]
 8003c84:	f000 f8f3 	bl	8003e6e <_Bfree>
 8003c88:	9b06      	ldr	r3, [sp, #24]
 8003c8a:	b9a3      	cbnz	r3, 8003cb6 <_dtoa_r+0xa8e>
 8003c8c:	9a07      	ldr	r2, [sp, #28]
 8003c8e:	b992      	cbnz	r2, 8003cb6 <_dtoa_r+0xa8e>
 8003c90:	9a05      	ldr	r2, [sp, #20]
 8003c92:	b982      	cbnz	r2, 8003cb6 <_dtoa_r+0xa8e>
 8003c94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003c98:	d029      	beq.n	8003cee <_dtoa_r+0xac6>
 8003c9a:	9b00      	ldr	r3, [sp, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	dd01      	ble.n	8003ca4 <_dtoa_r+0xa7c>
 8003ca0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003ca4:	f108 0501 	add.w	r5, r8, #1
 8003ca8:	f888 9000 	strb.w	r9, [r8]
 8003cac:	e753      	b.n	8003b56 <_dtoa_r+0x92e>
 8003cae:	4638      	mov	r0, r7
 8003cb0:	e7c2      	b.n	8003c38 <_dtoa_r+0xa10>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e7e3      	b.n	8003c7e <_dtoa_r+0xa56>
 8003cb6:	9a00      	ldr	r2, [sp, #0]
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	db04      	blt.n	8003cc6 <_dtoa_r+0xa9e>
 8003cbc:	d125      	bne.n	8003d0a <_dtoa_r+0xae2>
 8003cbe:	9a07      	ldr	r2, [sp, #28]
 8003cc0:	bb1a      	cbnz	r2, 8003d0a <_dtoa_r+0xae2>
 8003cc2:	9a05      	ldr	r2, [sp, #20]
 8003cc4:	bb0a      	cbnz	r2, 8003d0a <_dtoa_r+0xae2>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	ddec      	ble.n	8003ca4 <_dtoa_r+0xa7c>
 8003cca:	4651      	mov	r1, sl
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f000 fa52 	bl	8004178 <__lshift>
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4682      	mov	sl, r0
 8003cd8:	f000 fa9f 	bl	800421a <__mcmp>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	dc03      	bgt.n	8003ce8 <_dtoa_r+0xac0>
 8003ce0:	d1e0      	bne.n	8003ca4 <_dtoa_r+0xa7c>
 8003ce2:	f019 0f01 	tst.w	r9, #1
 8003ce6:	d0dd      	beq.n	8003ca4 <_dtoa_r+0xa7c>
 8003ce8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003cec:	d1d8      	bne.n	8003ca0 <_dtoa_r+0xa78>
 8003cee:	2339      	movs	r3, #57	; 0x39
 8003cf0:	f888 3000 	strb.w	r3, [r8]
 8003cf4:	f108 0801 	add.w	r8, r8, #1
 8003cf8:	4645      	mov	r5, r8
 8003cfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003cfe:	2b39      	cmp	r3, #57	; 0x39
 8003d00:	f105 32ff 	add.w	r2, r5, #4294967295
 8003d04:	d03b      	beq.n	8003d7e <_dtoa_r+0xb56>
 8003d06:	3301      	adds	r3, #1
 8003d08:	e040      	b.n	8003d8c <_dtoa_r+0xb64>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f108 0501 	add.w	r5, r8, #1
 8003d10:	dd05      	ble.n	8003d1e <_dtoa_r+0xaf6>
 8003d12:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003d16:	d0ea      	beq.n	8003cee <_dtoa_r+0xac6>
 8003d18:	f109 0901 	add.w	r9, r9, #1
 8003d1c:	e7c4      	b.n	8003ca8 <_dtoa_r+0xa80>
 8003d1e:	9b02      	ldr	r3, [sp, #8]
 8003d20:	9a04      	ldr	r2, [sp, #16]
 8003d22:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003d26:	1aeb      	subs	r3, r5, r3
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	46a8      	mov	r8, r5
 8003d2c:	f43f af4b 	beq.w	8003bc6 <_dtoa_r+0x99e>
 8003d30:	4651      	mov	r1, sl
 8003d32:	2300      	movs	r3, #0
 8003d34:	220a      	movs	r2, #10
 8003d36:	4620      	mov	r0, r4
 8003d38:	f000 f8b0 	bl	8003e9c <__multadd>
 8003d3c:	9b03      	ldr	r3, [sp, #12]
 8003d3e:	9903      	ldr	r1, [sp, #12]
 8003d40:	42bb      	cmp	r3, r7
 8003d42:	4682      	mov	sl, r0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	f04f 020a 	mov.w	r2, #10
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	d104      	bne.n	8003d5a <_dtoa_r+0xb32>
 8003d50:	f000 f8a4 	bl	8003e9c <__multadd>
 8003d54:	9003      	str	r0, [sp, #12]
 8003d56:	4607      	mov	r7, r0
 8003d58:	e776      	b.n	8003c48 <_dtoa_r+0xa20>
 8003d5a:	f000 f89f 	bl	8003e9c <__multadd>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9003      	str	r0, [sp, #12]
 8003d62:	220a      	movs	r2, #10
 8003d64:	4639      	mov	r1, r7
 8003d66:	4620      	mov	r0, r4
 8003d68:	f000 f898 	bl	8003e9c <__multadd>
 8003d6c:	e7f3      	b.n	8003d56 <_dtoa_r+0xb2e>
 8003d6e:	4651      	mov	r1, sl
 8003d70:	2300      	movs	r3, #0
 8003d72:	220a      	movs	r2, #10
 8003d74:	4620      	mov	r0, r4
 8003d76:	f000 f891 	bl	8003e9c <__multadd>
 8003d7a:	4682      	mov	sl, r0
 8003d7c:	e70d      	b.n	8003b9a <_dtoa_r+0x972>
 8003d7e:	9b02      	ldr	r3, [sp, #8]
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d105      	bne.n	8003d90 <_dtoa_r+0xb68>
 8003d84:	9a02      	ldr	r2, [sp, #8]
 8003d86:	f10b 0b01 	add.w	fp, fp, #1
 8003d8a:	2331      	movs	r3, #49	; 0x31
 8003d8c:	7013      	strb	r3, [r2, #0]
 8003d8e:	e6e2      	b.n	8003b56 <_dtoa_r+0x92e>
 8003d90:	4615      	mov	r5, r2
 8003d92:	e7b2      	b.n	8003cfa <_dtoa_r+0xad2>
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <_dtoa_r+0xb94>)
 8003d96:	f7ff baae 	b.w	80032f6 <_dtoa_r+0xce>
 8003d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f47f aa88 	bne.w	80032b2 <_dtoa_r+0x8a>
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <_dtoa_r+0xb98>)
 8003da4:	f7ff baa7 	b.w	80032f6 <_dtoa_r+0xce>
 8003da8:	9b04      	ldr	r3, [sp, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f73f aef4 	bgt.w	8003b98 <_dtoa_r+0x970>
 8003db0:	9b07      	ldr	r3, [sp, #28]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	f77f aef0 	ble.w	8003b98 <_dtoa_r+0x970>
 8003db8:	e6b8      	b.n	8003b2c <_dtoa_r+0x904>
 8003dba:	bf00      	nop
 8003dbc:	08004570 	.word	0x08004570
 8003dc0:	08004572 	.word	0x08004572

08003dc4 <_localeconv_r>:
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <_localeconv_r+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6a18      	ldr	r0, [r3, #32]
 8003dca:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <_localeconv_r+0x18>)
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	bf08      	it	eq
 8003dd0:	4618      	moveq	r0, r3
 8003dd2:	30f0      	adds	r0, #240	; 0xf0
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	2000000c 	.word	0x2000000c
 8003ddc:	20000070 	.word	0x20000070

08003de0 <malloc>:
 8003de0:	4b02      	ldr	r3, [pc, #8]	; (8003dec <malloc+0xc>)
 8003de2:	4601      	mov	r1, r0
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	f000 baed 	b.w	80043c4 <_malloc_r>
 8003dea:	bf00      	nop
 8003dec:	2000000c 	.word	0x2000000c

08003df0 <memcpy>:
 8003df0:	b510      	push	{r4, lr}
 8003df2:	1e43      	subs	r3, r0, #1
 8003df4:	440a      	add	r2, r1
 8003df6:	4291      	cmp	r1, r2
 8003df8:	d100      	bne.n	8003dfc <memcpy+0xc>
 8003dfa:	bd10      	pop	{r4, pc}
 8003dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e04:	e7f7      	b.n	8003df6 <memcpy+0x6>

08003e06 <_Balloc>:
 8003e06:	b570      	push	{r4, r5, r6, lr}
 8003e08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	460e      	mov	r6, r1
 8003e0e:	b93d      	cbnz	r5, 8003e20 <_Balloc+0x1a>
 8003e10:	2010      	movs	r0, #16
 8003e12:	f7ff ffe5 	bl	8003de0 <malloc>
 8003e16:	6260      	str	r0, [r4, #36]	; 0x24
 8003e18:	6045      	str	r5, [r0, #4]
 8003e1a:	6085      	str	r5, [r0, #8]
 8003e1c:	6005      	str	r5, [r0, #0]
 8003e1e:	60c5      	str	r5, [r0, #12]
 8003e20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003e22:	68eb      	ldr	r3, [r5, #12]
 8003e24:	b183      	cbz	r3, 8003e48 <_Balloc+0x42>
 8003e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003e2e:	b9b8      	cbnz	r0, 8003e60 <_Balloc+0x5a>
 8003e30:	2101      	movs	r1, #1
 8003e32:	fa01 f506 	lsl.w	r5, r1, r6
 8003e36:	1d6a      	adds	r2, r5, #5
 8003e38:	0092      	lsls	r2, r2, #2
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f000 fab4 	bl	80043a8 <_calloc_r>
 8003e40:	b160      	cbz	r0, 8003e5c <_Balloc+0x56>
 8003e42:	6046      	str	r6, [r0, #4]
 8003e44:	6085      	str	r5, [r0, #8]
 8003e46:	e00e      	b.n	8003e66 <_Balloc+0x60>
 8003e48:	2221      	movs	r2, #33	; 0x21
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 faab 	bl	80043a8 <_calloc_r>
 8003e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e54:	60e8      	str	r0, [r5, #12]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e4      	bne.n	8003e26 <_Balloc+0x20>
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	6802      	ldr	r2, [r0, #0]
 8003e62:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003e66:	2300      	movs	r3, #0
 8003e68:	6103      	str	r3, [r0, #16]
 8003e6a:	60c3      	str	r3, [r0, #12]
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}

08003e6e <_Bfree>:
 8003e6e:	b570      	push	{r4, r5, r6, lr}
 8003e70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003e72:	4606      	mov	r6, r0
 8003e74:	460d      	mov	r5, r1
 8003e76:	b93c      	cbnz	r4, 8003e88 <_Bfree+0x1a>
 8003e78:	2010      	movs	r0, #16
 8003e7a:	f7ff ffb1 	bl	8003de0 <malloc>
 8003e7e:	6270      	str	r0, [r6, #36]	; 0x24
 8003e80:	6044      	str	r4, [r0, #4]
 8003e82:	6084      	str	r4, [r0, #8]
 8003e84:	6004      	str	r4, [r0, #0]
 8003e86:	60c4      	str	r4, [r0, #12]
 8003e88:	b13d      	cbz	r5, 8003e9a <_Bfree+0x2c>
 8003e8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003e8c:	686a      	ldr	r2, [r5, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e94:	6029      	str	r1, [r5, #0]
 8003e96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}

08003e9c <__multadd>:
 8003e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea0:	690d      	ldr	r5, [r1, #16]
 8003ea2:	461f      	mov	r7, r3
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	f101 0e14 	add.w	lr, r1, #20
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8de 0000 	ldr.w	r0, [lr]
 8003eb2:	b281      	uxth	r1, r0
 8003eb4:	fb02 7101 	mla	r1, r2, r1, r7
 8003eb8:	0c0f      	lsrs	r7, r1, #16
 8003eba:	0c00      	lsrs	r0, r0, #16
 8003ebc:	fb02 7000 	mla	r0, r2, r0, r7
 8003ec0:	b289      	uxth	r1, r1
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003ec8:	429d      	cmp	r5, r3
 8003eca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003ece:	f84e 1b04 	str.w	r1, [lr], #4
 8003ed2:	dcec      	bgt.n	8003eae <__multadd+0x12>
 8003ed4:	b1d7      	cbz	r7, 8003f0c <__multadd+0x70>
 8003ed6:	68a3      	ldr	r3, [r4, #8]
 8003ed8:	429d      	cmp	r5, r3
 8003eda:	db12      	blt.n	8003f02 <__multadd+0x66>
 8003edc:	6861      	ldr	r1, [r4, #4]
 8003ede:	4630      	mov	r0, r6
 8003ee0:	3101      	adds	r1, #1
 8003ee2:	f7ff ff90 	bl	8003e06 <_Balloc>
 8003ee6:	6922      	ldr	r2, [r4, #16]
 8003ee8:	3202      	adds	r2, #2
 8003eea:	f104 010c 	add.w	r1, r4, #12
 8003eee:	4680      	mov	r8, r0
 8003ef0:	0092      	lsls	r2, r2, #2
 8003ef2:	300c      	adds	r0, #12
 8003ef4:	f7ff ff7c 	bl	8003df0 <memcpy>
 8003ef8:	4621      	mov	r1, r4
 8003efa:	4630      	mov	r0, r6
 8003efc:	f7ff ffb7 	bl	8003e6e <_Bfree>
 8003f00:	4644      	mov	r4, r8
 8003f02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003f06:	3501      	adds	r5, #1
 8003f08:	615f      	str	r7, [r3, #20]
 8003f0a:	6125      	str	r5, [r4, #16]
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f12 <__hi0bits>:
 8003f12:	0c02      	lsrs	r2, r0, #16
 8003f14:	0412      	lsls	r2, r2, #16
 8003f16:	4603      	mov	r3, r0
 8003f18:	b9b2      	cbnz	r2, 8003f48 <__hi0bits+0x36>
 8003f1a:	0403      	lsls	r3, r0, #16
 8003f1c:	2010      	movs	r0, #16
 8003f1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003f22:	bf04      	itt	eq
 8003f24:	021b      	lsleq	r3, r3, #8
 8003f26:	3008      	addeq	r0, #8
 8003f28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003f2c:	bf04      	itt	eq
 8003f2e:	011b      	lsleq	r3, r3, #4
 8003f30:	3004      	addeq	r0, #4
 8003f32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003f36:	bf04      	itt	eq
 8003f38:	009b      	lsleq	r3, r3, #2
 8003f3a:	3002      	addeq	r0, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db06      	blt.n	8003f4e <__hi0bits+0x3c>
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	d503      	bpl.n	8003f4c <__hi0bits+0x3a>
 8003f44:	3001      	adds	r0, #1
 8003f46:	4770      	bx	lr
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e7e8      	b.n	8003f1e <__hi0bits+0xc>
 8003f4c:	2020      	movs	r0, #32
 8003f4e:	4770      	bx	lr

08003f50 <__lo0bits>:
 8003f50:	6803      	ldr	r3, [r0, #0]
 8003f52:	f013 0207 	ands.w	r2, r3, #7
 8003f56:	4601      	mov	r1, r0
 8003f58:	d00b      	beq.n	8003f72 <__lo0bits+0x22>
 8003f5a:	07da      	lsls	r2, r3, #31
 8003f5c:	d423      	bmi.n	8003fa6 <__lo0bits+0x56>
 8003f5e:	0798      	lsls	r0, r3, #30
 8003f60:	bf49      	itett	mi
 8003f62:	085b      	lsrmi	r3, r3, #1
 8003f64:	089b      	lsrpl	r3, r3, #2
 8003f66:	2001      	movmi	r0, #1
 8003f68:	600b      	strmi	r3, [r1, #0]
 8003f6a:	bf5c      	itt	pl
 8003f6c:	600b      	strpl	r3, [r1, #0]
 8003f6e:	2002      	movpl	r0, #2
 8003f70:	4770      	bx	lr
 8003f72:	b298      	uxth	r0, r3
 8003f74:	b9a8      	cbnz	r0, 8003fa2 <__lo0bits+0x52>
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	2010      	movs	r0, #16
 8003f7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003f7e:	bf04      	itt	eq
 8003f80:	0a1b      	lsreq	r3, r3, #8
 8003f82:	3008      	addeq	r0, #8
 8003f84:	071a      	lsls	r2, r3, #28
 8003f86:	bf04      	itt	eq
 8003f88:	091b      	lsreq	r3, r3, #4
 8003f8a:	3004      	addeq	r0, #4
 8003f8c:	079a      	lsls	r2, r3, #30
 8003f8e:	bf04      	itt	eq
 8003f90:	089b      	lsreq	r3, r3, #2
 8003f92:	3002      	addeq	r0, #2
 8003f94:	07da      	lsls	r2, r3, #31
 8003f96:	d402      	bmi.n	8003f9e <__lo0bits+0x4e>
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	d006      	beq.n	8003faa <__lo0bits+0x5a>
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	600b      	str	r3, [r1, #0]
 8003fa0:	4770      	bx	lr
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	e7e9      	b.n	8003f7a <__lo0bits+0x2a>
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	4770      	bx	lr
 8003faa:	2020      	movs	r0, #32
 8003fac:	4770      	bx	lr

08003fae <__i2b>:
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	f7ff ff27 	bl	8003e06 <_Balloc>
 8003fb8:	2201      	movs	r2, #1
 8003fba:	6144      	str	r4, [r0, #20]
 8003fbc:	6102      	str	r2, [r0, #16]
 8003fbe:	bd10      	pop	{r4, pc}

08003fc0 <__multiply>:
 8003fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	690a      	ldr	r2, [r1, #16]
 8003fc8:	6923      	ldr	r3, [r4, #16]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	bfb8      	it	lt
 8003fce:	460b      	movlt	r3, r1
 8003fd0:	4689      	mov	r9, r1
 8003fd2:	bfbc      	itt	lt
 8003fd4:	46a1      	movlt	r9, r4
 8003fd6:	461c      	movlt	r4, r3
 8003fd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003fdc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003fe0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003fe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003fe8:	eb07 060a 	add.w	r6, r7, sl
 8003fec:	429e      	cmp	r6, r3
 8003fee:	bfc8      	it	gt
 8003ff0:	3101      	addgt	r1, #1
 8003ff2:	f7ff ff08 	bl	8003e06 <_Balloc>
 8003ff6:	f100 0514 	add.w	r5, r0, #20
 8003ffa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003ffe:	462b      	mov	r3, r5
 8004000:	2200      	movs	r2, #0
 8004002:	4543      	cmp	r3, r8
 8004004:	d316      	bcc.n	8004034 <__multiply+0x74>
 8004006:	f104 0214 	add.w	r2, r4, #20
 800400a:	f109 0114 	add.w	r1, r9, #20
 800400e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004012:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	9c01      	ldr	r4, [sp, #4]
 800401a:	4294      	cmp	r4, r2
 800401c:	4613      	mov	r3, r2
 800401e:	d80c      	bhi.n	800403a <__multiply+0x7a>
 8004020:	2e00      	cmp	r6, #0
 8004022:	dd03      	ble.n	800402c <__multiply+0x6c>
 8004024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004028:	2b00      	cmp	r3, #0
 800402a:	d054      	beq.n	80040d6 <__multiply+0x116>
 800402c:	6106      	str	r6, [r0, #16]
 800402e:	b003      	add	sp, #12
 8004030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004034:	f843 2b04 	str.w	r2, [r3], #4
 8004038:	e7e3      	b.n	8004002 <__multiply+0x42>
 800403a:	f8b3 a000 	ldrh.w	sl, [r3]
 800403e:	3204      	adds	r2, #4
 8004040:	f1ba 0f00 	cmp.w	sl, #0
 8004044:	d020      	beq.n	8004088 <__multiply+0xc8>
 8004046:	46ae      	mov	lr, r5
 8004048:	4689      	mov	r9, r1
 800404a:	f04f 0c00 	mov.w	ip, #0
 800404e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004052:	f8be b000 	ldrh.w	fp, [lr]
 8004056:	b2a3      	uxth	r3, r4
 8004058:	fb0a b303 	mla	r3, sl, r3, fp
 800405c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004060:	f8de 4000 	ldr.w	r4, [lr]
 8004064:	4463      	add	r3, ip
 8004066:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800406a:	fb0a c40b 	mla	r4, sl, fp, ip
 800406e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004072:	b29b      	uxth	r3, r3
 8004074:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004078:	454f      	cmp	r7, r9
 800407a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800407e:	f84e 3b04 	str.w	r3, [lr], #4
 8004082:	d8e4      	bhi.n	800404e <__multiply+0x8e>
 8004084:	f8ce c000 	str.w	ip, [lr]
 8004088:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800408c:	f1b9 0f00 	cmp.w	r9, #0
 8004090:	d01f      	beq.n	80040d2 <__multiply+0x112>
 8004092:	682b      	ldr	r3, [r5, #0]
 8004094:	46ae      	mov	lr, r5
 8004096:	468c      	mov	ip, r1
 8004098:	f04f 0a00 	mov.w	sl, #0
 800409c:	f8bc 4000 	ldrh.w	r4, [ip]
 80040a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80040a4:	fb09 b404 	mla	r4, r9, r4, fp
 80040a8:	44a2      	add	sl, r4
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80040b0:	f84e 3b04 	str.w	r3, [lr], #4
 80040b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80040b8:	f8be 4000 	ldrh.w	r4, [lr]
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	fb09 4303 	mla	r3, r9, r3, r4
 80040c2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80040c6:	4567      	cmp	r7, ip
 80040c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80040cc:	d8e6      	bhi.n	800409c <__multiply+0xdc>
 80040ce:	f8ce 3000 	str.w	r3, [lr]
 80040d2:	3504      	adds	r5, #4
 80040d4:	e7a0      	b.n	8004018 <__multiply+0x58>
 80040d6:	3e01      	subs	r6, #1
 80040d8:	e7a2      	b.n	8004020 <__multiply+0x60>
	...

080040dc <__pow5mult>:
 80040dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e0:	4615      	mov	r5, r2
 80040e2:	f012 0203 	ands.w	r2, r2, #3
 80040e6:	4606      	mov	r6, r0
 80040e8:	460f      	mov	r7, r1
 80040ea:	d007      	beq.n	80040fc <__pow5mult+0x20>
 80040ec:	3a01      	subs	r2, #1
 80040ee:	4c21      	ldr	r4, [pc, #132]	; (8004174 <__pow5mult+0x98>)
 80040f0:	2300      	movs	r3, #0
 80040f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80040f6:	f7ff fed1 	bl	8003e9c <__multadd>
 80040fa:	4607      	mov	r7, r0
 80040fc:	10ad      	asrs	r5, r5, #2
 80040fe:	d035      	beq.n	800416c <__pow5mult+0x90>
 8004100:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004102:	b93c      	cbnz	r4, 8004114 <__pow5mult+0x38>
 8004104:	2010      	movs	r0, #16
 8004106:	f7ff fe6b 	bl	8003de0 <malloc>
 800410a:	6270      	str	r0, [r6, #36]	; 0x24
 800410c:	6044      	str	r4, [r0, #4]
 800410e:	6084      	str	r4, [r0, #8]
 8004110:	6004      	str	r4, [r0, #0]
 8004112:	60c4      	str	r4, [r0, #12]
 8004114:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800411c:	b94c      	cbnz	r4, 8004132 <__pow5mult+0x56>
 800411e:	f240 2171 	movw	r1, #625	; 0x271
 8004122:	4630      	mov	r0, r6
 8004124:	f7ff ff43 	bl	8003fae <__i2b>
 8004128:	2300      	movs	r3, #0
 800412a:	f8c8 0008 	str.w	r0, [r8, #8]
 800412e:	4604      	mov	r4, r0
 8004130:	6003      	str	r3, [r0, #0]
 8004132:	f04f 0800 	mov.w	r8, #0
 8004136:	07eb      	lsls	r3, r5, #31
 8004138:	d50a      	bpl.n	8004150 <__pow5mult+0x74>
 800413a:	4639      	mov	r1, r7
 800413c:	4622      	mov	r2, r4
 800413e:	4630      	mov	r0, r6
 8004140:	f7ff ff3e 	bl	8003fc0 <__multiply>
 8004144:	4639      	mov	r1, r7
 8004146:	4681      	mov	r9, r0
 8004148:	4630      	mov	r0, r6
 800414a:	f7ff fe90 	bl	8003e6e <_Bfree>
 800414e:	464f      	mov	r7, r9
 8004150:	106d      	asrs	r5, r5, #1
 8004152:	d00b      	beq.n	800416c <__pow5mult+0x90>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	b938      	cbnz	r0, 8004168 <__pow5mult+0x8c>
 8004158:	4622      	mov	r2, r4
 800415a:	4621      	mov	r1, r4
 800415c:	4630      	mov	r0, r6
 800415e:	f7ff ff2f 	bl	8003fc0 <__multiply>
 8004162:	6020      	str	r0, [r4, #0]
 8004164:	f8c0 8000 	str.w	r8, [r0]
 8004168:	4604      	mov	r4, r0
 800416a:	e7e4      	b.n	8004136 <__pow5mult+0x5a>
 800416c:	4638      	mov	r0, r7
 800416e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004172:	bf00      	nop
 8004174:	08004670 	.word	0x08004670

08004178 <__lshift>:
 8004178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800417c:	460c      	mov	r4, r1
 800417e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004182:	6923      	ldr	r3, [r4, #16]
 8004184:	6849      	ldr	r1, [r1, #4]
 8004186:	eb0a 0903 	add.w	r9, sl, r3
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	4607      	mov	r7, r0
 800418e:	4616      	mov	r6, r2
 8004190:	f109 0501 	add.w	r5, r9, #1
 8004194:	42ab      	cmp	r3, r5
 8004196:	db31      	blt.n	80041fc <__lshift+0x84>
 8004198:	4638      	mov	r0, r7
 800419a:	f7ff fe34 	bl	8003e06 <_Balloc>
 800419e:	2200      	movs	r2, #0
 80041a0:	4680      	mov	r8, r0
 80041a2:	f100 0314 	add.w	r3, r0, #20
 80041a6:	4611      	mov	r1, r2
 80041a8:	4552      	cmp	r2, sl
 80041aa:	db2a      	blt.n	8004202 <__lshift+0x8a>
 80041ac:	6920      	ldr	r0, [r4, #16]
 80041ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80041b2:	f104 0114 	add.w	r1, r4, #20
 80041b6:	f016 021f 	ands.w	r2, r6, #31
 80041ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80041be:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80041c2:	d022      	beq.n	800420a <__lshift+0x92>
 80041c4:	f1c2 0c20 	rsb	ip, r2, #32
 80041c8:	2000      	movs	r0, #0
 80041ca:	680e      	ldr	r6, [r1, #0]
 80041cc:	4096      	lsls	r6, r2
 80041ce:	4330      	orrs	r0, r6
 80041d0:	f843 0b04 	str.w	r0, [r3], #4
 80041d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80041d8:	458e      	cmp	lr, r1
 80041da:	fa20 f00c 	lsr.w	r0, r0, ip
 80041de:	d8f4      	bhi.n	80041ca <__lshift+0x52>
 80041e0:	6018      	str	r0, [r3, #0]
 80041e2:	b108      	cbz	r0, 80041e8 <__lshift+0x70>
 80041e4:	f109 0502 	add.w	r5, r9, #2
 80041e8:	3d01      	subs	r5, #1
 80041ea:	4638      	mov	r0, r7
 80041ec:	f8c8 5010 	str.w	r5, [r8, #16]
 80041f0:	4621      	mov	r1, r4
 80041f2:	f7ff fe3c 	bl	8003e6e <_Bfree>
 80041f6:	4640      	mov	r0, r8
 80041f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fc:	3101      	adds	r1, #1
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	e7c8      	b.n	8004194 <__lshift+0x1c>
 8004202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004206:	3201      	adds	r2, #1
 8004208:	e7ce      	b.n	80041a8 <__lshift+0x30>
 800420a:	3b04      	subs	r3, #4
 800420c:	f851 2b04 	ldr.w	r2, [r1], #4
 8004210:	f843 2f04 	str.w	r2, [r3, #4]!
 8004214:	458e      	cmp	lr, r1
 8004216:	d8f9      	bhi.n	800420c <__lshift+0x94>
 8004218:	e7e6      	b.n	80041e8 <__lshift+0x70>

0800421a <__mcmp>:
 800421a:	6903      	ldr	r3, [r0, #16]
 800421c:	690a      	ldr	r2, [r1, #16]
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	b530      	push	{r4, r5, lr}
 8004222:	d10c      	bne.n	800423e <__mcmp+0x24>
 8004224:	0092      	lsls	r2, r2, #2
 8004226:	3014      	adds	r0, #20
 8004228:	3114      	adds	r1, #20
 800422a:	1884      	adds	r4, r0, r2
 800422c:	4411      	add	r1, r2
 800422e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004232:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004236:	4295      	cmp	r5, r2
 8004238:	d003      	beq.n	8004242 <__mcmp+0x28>
 800423a:	d305      	bcc.n	8004248 <__mcmp+0x2e>
 800423c:	2301      	movs	r3, #1
 800423e:	4618      	mov	r0, r3
 8004240:	bd30      	pop	{r4, r5, pc}
 8004242:	42a0      	cmp	r0, r4
 8004244:	d3f3      	bcc.n	800422e <__mcmp+0x14>
 8004246:	e7fa      	b.n	800423e <__mcmp+0x24>
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
 800424c:	e7f7      	b.n	800423e <__mcmp+0x24>

0800424e <__mdiff>:
 800424e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004252:	460d      	mov	r5, r1
 8004254:	4607      	mov	r7, r0
 8004256:	4611      	mov	r1, r2
 8004258:	4628      	mov	r0, r5
 800425a:	4614      	mov	r4, r2
 800425c:	f7ff ffdd 	bl	800421a <__mcmp>
 8004260:	1e06      	subs	r6, r0, #0
 8004262:	d108      	bne.n	8004276 <__mdiff+0x28>
 8004264:	4631      	mov	r1, r6
 8004266:	4638      	mov	r0, r7
 8004268:	f7ff fdcd 	bl	8003e06 <_Balloc>
 800426c:	2301      	movs	r3, #1
 800426e:	6103      	str	r3, [r0, #16]
 8004270:	6146      	str	r6, [r0, #20]
 8004272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004276:	bfa4      	itt	ge
 8004278:	4623      	movge	r3, r4
 800427a:	462c      	movge	r4, r5
 800427c:	4638      	mov	r0, r7
 800427e:	6861      	ldr	r1, [r4, #4]
 8004280:	bfa6      	itte	ge
 8004282:	461d      	movge	r5, r3
 8004284:	2600      	movge	r6, #0
 8004286:	2601      	movlt	r6, #1
 8004288:	f7ff fdbd 	bl	8003e06 <_Balloc>
 800428c:	692b      	ldr	r3, [r5, #16]
 800428e:	60c6      	str	r6, [r0, #12]
 8004290:	6926      	ldr	r6, [r4, #16]
 8004292:	f105 0914 	add.w	r9, r5, #20
 8004296:	f104 0214 	add.w	r2, r4, #20
 800429a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800429e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80042a2:	f100 0514 	add.w	r5, r0, #20
 80042a6:	f04f 0c00 	mov.w	ip, #0
 80042aa:	f852 ab04 	ldr.w	sl, [r2], #4
 80042ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80042b2:	fa1c f18a 	uxtah	r1, ip, sl
 80042b6:	b2a3      	uxth	r3, r4
 80042b8:	1ac9      	subs	r1, r1, r3
 80042ba:	0c23      	lsrs	r3, r4, #16
 80042bc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80042c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80042c4:	b289      	uxth	r1, r1
 80042c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80042ca:	45c8      	cmp	r8, r9
 80042cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80042d0:	4696      	mov	lr, r2
 80042d2:	f845 3b04 	str.w	r3, [r5], #4
 80042d6:	d8e8      	bhi.n	80042aa <__mdiff+0x5c>
 80042d8:	45be      	cmp	lr, r7
 80042da:	d305      	bcc.n	80042e8 <__mdiff+0x9a>
 80042dc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80042e0:	b18b      	cbz	r3, 8004306 <__mdiff+0xb8>
 80042e2:	6106      	str	r6, [r0, #16]
 80042e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80042ec:	fa1c f381 	uxtah	r3, ip, r1
 80042f0:	141a      	asrs	r2, r3, #16
 80042f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004300:	f845 3b04 	str.w	r3, [r5], #4
 8004304:	e7e8      	b.n	80042d8 <__mdiff+0x8a>
 8004306:	3e01      	subs	r6, #1
 8004308:	e7e8      	b.n	80042dc <__mdiff+0x8e>

0800430a <__d2b>:
 800430a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800430e:	460e      	mov	r6, r1
 8004310:	2101      	movs	r1, #1
 8004312:	ec59 8b10 	vmov	r8, r9, d0
 8004316:	4615      	mov	r5, r2
 8004318:	f7ff fd75 	bl	8003e06 <_Balloc>
 800431c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004320:	4607      	mov	r7, r0
 8004322:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004326:	bb34      	cbnz	r4, 8004376 <__d2b+0x6c>
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	f1b8 0f00 	cmp.w	r8, #0
 800432e:	d027      	beq.n	8004380 <__d2b+0x76>
 8004330:	a802      	add	r0, sp, #8
 8004332:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004336:	f7ff fe0b 	bl	8003f50 <__lo0bits>
 800433a:	9900      	ldr	r1, [sp, #0]
 800433c:	b1f0      	cbz	r0, 800437c <__d2b+0x72>
 800433e:	9a01      	ldr	r2, [sp, #4]
 8004340:	f1c0 0320 	rsb	r3, r0, #32
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	430b      	orrs	r3, r1
 800434a:	40c2      	lsrs	r2, r0
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	9201      	str	r2, [sp, #4]
 8004350:	9b01      	ldr	r3, [sp, #4]
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf14      	ite	ne
 8004358:	2102      	movne	r1, #2
 800435a:	2101      	moveq	r1, #1
 800435c:	6139      	str	r1, [r7, #16]
 800435e:	b1c4      	cbz	r4, 8004392 <__d2b+0x88>
 8004360:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004364:	4404      	add	r4, r0
 8004366:	6034      	str	r4, [r6, #0]
 8004368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800436c:	6028      	str	r0, [r5, #0]
 800436e:	4638      	mov	r0, r7
 8004370:	b003      	add	sp, #12
 8004372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437a:	e7d5      	b.n	8004328 <__d2b+0x1e>
 800437c:	6179      	str	r1, [r7, #20]
 800437e:	e7e7      	b.n	8004350 <__d2b+0x46>
 8004380:	a801      	add	r0, sp, #4
 8004382:	f7ff fde5 	bl	8003f50 <__lo0bits>
 8004386:	9b01      	ldr	r3, [sp, #4]
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	2101      	movs	r1, #1
 800438c:	6139      	str	r1, [r7, #16]
 800438e:	3020      	adds	r0, #32
 8004390:	e7e5      	b.n	800435e <__d2b+0x54>
 8004392:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004396:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800439a:	6030      	str	r0, [r6, #0]
 800439c:	6918      	ldr	r0, [r3, #16]
 800439e:	f7ff fdb8 	bl	8003f12 <__hi0bits>
 80043a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80043a6:	e7e1      	b.n	800436c <__d2b+0x62>

080043a8 <_calloc_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	fb02 f401 	mul.w	r4, r2, r1
 80043ae:	4621      	mov	r1, r4
 80043b0:	f000 f808 	bl	80043c4 <_malloc_r>
 80043b4:	4605      	mov	r5, r0
 80043b6:	b118      	cbz	r0, 80043c0 <_calloc_r+0x18>
 80043b8:	4622      	mov	r2, r4
 80043ba:	2100      	movs	r1, #0
 80043bc:	f000 f882 	bl	80044c4 <memset>
 80043c0:	4628      	mov	r0, r5
 80043c2:	bd38      	pop	{r3, r4, r5, pc}

080043c4 <_malloc_r>:
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	1ccd      	adds	r5, r1, #3
 80043c8:	f025 0503 	bic.w	r5, r5, #3
 80043cc:	3508      	adds	r5, #8
 80043ce:	2d0c      	cmp	r5, #12
 80043d0:	bf38      	it	cc
 80043d2:	250c      	movcc	r5, #12
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	4606      	mov	r6, r0
 80043d8:	db01      	blt.n	80043de <_malloc_r+0x1a>
 80043da:	42a9      	cmp	r1, r5
 80043dc:	d903      	bls.n	80043e6 <_malloc_r+0x22>
 80043de:	230c      	movs	r3, #12
 80043e0:	6033      	str	r3, [r6, #0]
 80043e2:	2000      	movs	r0, #0
 80043e4:	bd70      	pop	{r4, r5, r6, pc}
 80043e6:	f000 f875 	bl	80044d4 <__malloc_lock>
 80043ea:	4a23      	ldr	r2, [pc, #140]	; (8004478 <_malloc_r+0xb4>)
 80043ec:	6814      	ldr	r4, [r2, #0]
 80043ee:	4621      	mov	r1, r4
 80043f0:	b991      	cbnz	r1, 8004418 <_malloc_r+0x54>
 80043f2:	4c22      	ldr	r4, [pc, #136]	; (800447c <_malloc_r+0xb8>)
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	b91b      	cbnz	r3, 8004400 <_malloc_r+0x3c>
 80043f8:	4630      	mov	r0, r6
 80043fa:	f000 f841 	bl	8004480 <_sbrk_r>
 80043fe:	6020      	str	r0, [r4, #0]
 8004400:	4629      	mov	r1, r5
 8004402:	4630      	mov	r0, r6
 8004404:	f000 f83c 	bl	8004480 <_sbrk_r>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d126      	bne.n	800445a <_malloc_r+0x96>
 800440c:	230c      	movs	r3, #12
 800440e:	6033      	str	r3, [r6, #0]
 8004410:	4630      	mov	r0, r6
 8004412:	f000 f860 	bl	80044d6 <__malloc_unlock>
 8004416:	e7e4      	b.n	80043e2 <_malloc_r+0x1e>
 8004418:	680b      	ldr	r3, [r1, #0]
 800441a:	1b5b      	subs	r3, r3, r5
 800441c:	d41a      	bmi.n	8004454 <_malloc_r+0x90>
 800441e:	2b0b      	cmp	r3, #11
 8004420:	d90f      	bls.n	8004442 <_malloc_r+0x7e>
 8004422:	600b      	str	r3, [r1, #0]
 8004424:	50cd      	str	r5, [r1, r3]
 8004426:	18cc      	adds	r4, r1, r3
 8004428:	4630      	mov	r0, r6
 800442a:	f000 f854 	bl	80044d6 <__malloc_unlock>
 800442e:	f104 000b 	add.w	r0, r4, #11
 8004432:	1d23      	adds	r3, r4, #4
 8004434:	f020 0007 	bic.w	r0, r0, #7
 8004438:	1ac3      	subs	r3, r0, r3
 800443a:	d01b      	beq.n	8004474 <_malloc_r+0xb0>
 800443c:	425a      	negs	r2, r3
 800443e:	50e2      	str	r2, [r4, r3]
 8004440:	bd70      	pop	{r4, r5, r6, pc}
 8004442:	428c      	cmp	r4, r1
 8004444:	bf0d      	iteet	eq
 8004446:	6863      	ldreq	r3, [r4, #4]
 8004448:	684b      	ldrne	r3, [r1, #4]
 800444a:	6063      	strne	r3, [r4, #4]
 800444c:	6013      	streq	r3, [r2, #0]
 800444e:	bf18      	it	ne
 8004450:	460c      	movne	r4, r1
 8004452:	e7e9      	b.n	8004428 <_malloc_r+0x64>
 8004454:	460c      	mov	r4, r1
 8004456:	6849      	ldr	r1, [r1, #4]
 8004458:	e7ca      	b.n	80043f0 <_malloc_r+0x2c>
 800445a:	1cc4      	adds	r4, r0, #3
 800445c:	f024 0403 	bic.w	r4, r4, #3
 8004460:	42a0      	cmp	r0, r4
 8004462:	d005      	beq.n	8004470 <_malloc_r+0xac>
 8004464:	1a21      	subs	r1, r4, r0
 8004466:	4630      	mov	r0, r6
 8004468:	f000 f80a 	bl	8004480 <_sbrk_r>
 800446c:	3001      	adds	r0, #1
 800446e:	d0cd      	beq.n	800440c <_malloc_r+0x48>
 8004470:	6025      	str	r5, [r4, #0]
 8004472:	e7d9      	b.n	8004428 <_malloc_r+0x64>
 8004474:	bd70      	pop	{r4, r5, r6, pc}
 8004476:	bf00      	nop
 8004478:	200001f8 	.word	0x200001f8
 800447c:	200001fc 	.word	0x200001fc

08004480 <_sbrk_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4c06      	ldr	r4, [pc, #24]	; (800449c <_sbrk_r+0x1c>)
 8004484:	2300      	movs	r3, #0
 8004486:	4605      	mov	r5, r0
 8004488:	4608      	mov	r0, r1
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	f000 f832 	bl	80044f4 <_sbrk>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_sbrk_r+0x1a>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	b103      	cbz	r3, 800449a <_sbrk_r+0x1a>
 8004498:	602b      	str	r3, [r5, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	20000248 	.word	0x20000248

080044a0 <__ascii_mbtowc>:
 80044a0:	b082      	sub	sp, #8
 80044a2:	b901      	cbnz	r1, 80044a6 <__ascii_mbtowc+0x6>
 80044a4:	a901      	add	r1, sp, #4
 80044a6:	b142      	cbz	r2, 80044ba <__ascii_mbtowc+0x1a>
 80044a8:	b14b      	cbz	r3, 80044be <__ascii_mbtowc+0x1e>
 80044aa:	7813      	ldrb	r3, [r2, #0]
 80044ac:	600b      	str	r3, [r1, #0]
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	1c10      	adds	r0, r2, #0
 80044b2:	bf18      	it	ne
 80044b4:	2001      	movne	r0, #1
 80044b6:	b002      	add	sp, #8
 80044b8:	4770      	bx	lr
 80044ba:	4610      	mov	r0, r2
 80044bc:	e7fb      	b.n	80044b6 <__ascii_mbtowc+0x16>
 80044be:	f06f 0001 	mvn.w	r0, #1
 80044c2:	e7f8      	b.n	80044b6 <__ascii_mbtowc+0x16>

080044c4 <memset>:
 80044c4:	4402      	add	r2, r0
 80044c6:	4603      	mov	r3, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <__malloc_lock>:
 80044d4:	4770      	bx	lr

080044d6 <__malloc_unlock>:
 80044d6:	4770      	bx	lr

080044d8 <__ascii_wctomb>:
 80044d8:	b149      	cbz	r1, 80044ee <__ascii_wctomb+0x16>
 80044da:	2aff      	cmp	r2, #255	; 0xff
 80044dc:	bf85      	ittet	hi
 80044de:	238a      	movhi	r3, #138	; 0x8a
 80044e0:	6003      	strhi	r3, [r0, #0]
 80044e2:	700a      	strbls	r2, [r1, #0]
 80044e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80044e8:	bf98      	it	ls
 80044ea:	2001      	movls	r0, #1
 80044ec:	4770      	bx	lr
 80044ee:	4608      	mov	r0, r1
 80044f0:	4770      	bx	lr
	...

080044f4 <_sbrk>:
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <_sbrk+0x14>)
 80044f6:	6819      	ldr	r1, [r3, #0]
 80044f8:	4602      	mov	r2, r0
 80044fa:	b909      	cbnz	r1, 8004500 <_sbrk+0xc>
 80044fc:	4903      	ldr	r1, [pc, #12]	; (800450c <_sbrk+0x18>)
 80044fe:	6019      	str	r1, [r3, #0]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	4402      	add	r2, r0
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	4770      	bx	lr
 8004508:	20000200 	.word	0x20000200
 800450c:	2000024c 	.word	0x2000024c

08004510 <_init>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr

0800451c <_fini>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr
